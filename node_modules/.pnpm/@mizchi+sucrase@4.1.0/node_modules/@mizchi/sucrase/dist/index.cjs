'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const HELPERS = {
    interopRequireWildcard: `
    function interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        return newObj;
      }
    }
  `,
    interopRequireDefault: `
    function interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  `,
    createNamedExportFrom: `
    function createNamedExportFrom(obj, localName, importedName) {
      Object.defineProperty(exports, localName, {enumerable: true, get: () => obj[importedName]});
    }
  `,
    // Note that TypeScript and Babel do this differently; TypeScript does a simple existence
    // check in the exports object and does a plain assignment, whereas Babel uses
    // defineProperty and builds an object of explicitly-exported names so that star exports can
    // always take lower precedence. For now, we do the easier TypeScript thing.
    createStarExport: `
    function createStarExport(obj) {
      Object.keys(obj)
        .filter((key) => key !== "default" && key !== "__esModule")
        .forEach((key) => {
          if (exports.hasOwnProperty(key)) {
            return;
          }
          Object.defineProperty(exports, key, {enumerable: true, get: () => obj[key]});
        });
    }
  `,
    nullishCoalesce: `
    function nullishCoalesce(lhs, rhsFn) {
      if (lhs != null) {
        return lhs;
      } else {
        return rhsFn();
      }
    }
  `,
    asyncNullishCoalesce: `
    async function asyncNullishCoalesce(lhs, rhsFn) {
      if (lhs != null) {
        return lhs;
      } else {
        return await rhsFn();
      }
    }
  `,
    optionalChain: `
    function optionalChain(ops) {
      let lastAccessLHS = undefined;
      let value = ops[0];
      let i = 1;
      while (i < ops.length) {
        const op = ops[i];
        const fn = ops[i + 1];
        i += 2;
        if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {
          return undefined;
        }
        if (op === 'access' || op === 'optionalAccess') {
          lastAccessLHS = value;
          value = fn(value);
        } else if (op === 'call' || op === 'optionalCall') {
          value = fn((...args) => value.call(lastAccessLHS, ...args));
          lastAccessLHS = undefined;
        }
      }
      return value;
    }
  `,
    asyncOptionalChain: `
    async function asyncOptionalChain(ops) {
      let lastAccessLHS = undefined;
      let value = ops[0];
      let i = 1;
      while (i < ops.length) {
        const op = ops[i];
        const fn = ops[i + 1];
        i += 2;
        if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {
          return undefined;
        }
        if (op === 'access' || op === 'optionalAccess') {
          lastAccessLHS = value;
          value = await fn(value);
        } else if (op === 'call' || op === 'optionalCall') {
          value = await fn((...args) => value.call(lastAccessLHS, ...args));
          lastAccessLHS = undefined;
        }
      }
      return value;
    }
  `,
    optionalChainDelete: `
    function optionalChainDelete(ops) {
      const result = OPTIONAL_CHAIN_NAME(ops);
      return result == null ? true : result;
    }
  `,
    asyncOptionalChainDelete: `
    async function asyncOptionalChainDelete(ops) {
      const result = await ASYNC_OPTIONAL_CHAIN_NAME(ops);
      return result == null ? true : result;
    }
  `,
};
class HelperManager {
    constructor(nameManager) {
        this.nameManager = nameManager;
        this.helperNames = {};
    }
    getHelperName(baseName) {
        let helperName = this.helperNames[baseName];
        if (helperName) {
            return helperName;
        }
        helperName = this.nameManager.claimFreeName(`_${baseName}`);
        this.helperNames[baseName] = helperName;
        return helperName;
    }
    emitHelpers() {
        let resultCode = "";
        if (this.helperNames.optionalChainDelete) {
            this.getHelperName("optionalChain");
        }
        if (this.helperNames.asyncOptionalChainDelete) {
            this.getHelperName("asyncOptionalChain");
        }
        for (const [baseName, helperCodeTemplate] of Object.entries(HELPERS)) {
            const helperName = this.helperNames[baseName];
            let helperCode = helperCodeTemplate;
            if (baseName === "optionalChainDelete") {
                helperCode = helperCode.replace("OPTIONAL_CHAIN_NAME", this.helperNames.optionalChain);
            }
            else if (baseName === "asyncOptionalChainDelete") {
                helperCode = helperCode.replace("ASYNC_OPTIONAL_CHAIN_NAME", this.helperNames.asyncOptionalChain);
            }
            if (helperName) {
                resultCode += " ";
                resultCode += helperCode.replace(baseName, helperName).replace(/\s+/g, " ").trim();
            }
        }
        return resultCode;
    }
}

var ContextualKeyword;
(function (ContextualKeyword) {
    ContextualKeyword[ContextualKeyword["NONE"] = 0] = "NONE";
    ContextualKeyword[ContextualKeyword["_abstract"] = 1] = "_abstract";
    ContextualKeyword[ContextualKeyword["_as"] = 2] = "_as";
    ContextualKeyword[ContextualKeyword["_asserts"] = 3] = "_asserts";
    ContextualKeyword[ContextualKeyword["_async"] = 4] = "_async";
    ContextualKeyword[ContextualKeyword["_await"] = 5] = "_await";
    ContextualKeyword[ContextualKeyword["_checks"] = 6] = "_checks";
    ContextualKeyword[ContextualKeyword["_constructor"] = 7] = "_constructor";
    ContextualKeyword[ContextualKeyword["_declare"] = 8] = "_declare";
    ContextualKeyword[ContextualKeyword["_enum"] = 9] = "_enum";
    ContextualKeyword[ContextualKeyword["_exports"] = 10] = "_exports";
    ContextualKeyword[ContextualKeyword["_from"] = 11] = "_from";
    ContextualKeyword[ContextualKeyword["_get"] = 12] = "_get";
    ContextualKeyword[ContextualKeyword["_global"] = 13] = "_global";
    ContextualKeyword[ContextualKeyword["_implements"] = 14] = "_implements";
    ContextualKeyword[ContextualKeyword["_infer"] = 15] = "_infer";
    ContextualKeyword[ContextualKeyword["_interface"] = 16] = "_interface";
    ContextualKeyword[ContextualKeyword["_is"] = 17] = "_is";
    ContextualKeyword[ContextualKeyword["_keyof"] = 18] = "_keyof";
    ContextualKeyword[ContextualKeyword["_mixins"] = 19] = "_mixins";
    ContextualKeyword[ContextualKeyword["_module"] = 20] = "_module";
    ContextualKeyword[ContextualKeyword["_namespace"] = 21] = "_namespace";
    ContextualKeyword[ContextualKeyword["_of"] = 22] = "_of";
    ContextualKeyword[ContextualKeyword["_opaque"] = 23] = "_opaque";
    ContextualKeyword[ContextualKeyword["_private"] = 24] = "_private";
    ContextualKeyword[ContextualKeyword["_protected"] = 25] = "_protected";
    ContextualKeyword[ContextualKeyword["_proto"] = 26] = "_proto";
    ContextualKeyword[ContextualKeyword["_public"] = 27] = "_public";
    ContextualKeyword[ContextualKeyword["_readonly"] = 28] = "_readonly";
    ContextualKeyword[ContextualKeyword["_require"] = 29] = "_require";
    ContextualKeyword[ContextualKeyword["_set"] = 30] = "_set";
    ContextualKeyword[ContextualKeyword["_static"] = 31] = "_static";
    ContextualKeyword[ContextualKeyword["_type"] = 32] = "_type";
    ContextualKeyword[ContextualKeyword["_unique"] = 33] = "_unique";
})(ContextualKeyword || (ContextualKeyword = {}));

// Generated file, do not edit! Run "yarn generate" to re-generate this file.
/**
 * Enum of all token types, with bit fields to signify meaningful properties.
 */
var TokenType;
(function (TokenType) {
    // Precedence 0 means not an operator; otherwise it is a positive number up to 12.
    TokenType[TokenType["PRECEDENCE_MASK"] = 15] = "PRECEDENCE_MASK";
    TokenType[TokenType["IS_KEYWORD"] = 16] = "IS_KEYWORD";
    TokenType[TokenType["IS_ASSIGN"] = 32] = "IS_ASSIGN";
    TokenType[TokenType["IS_RIGHT_ASSOCIATIVE"] = 64] = "IS_RIGHT_ASSOCIATIVE";
    TokenType[TokenType["IS_PREFIX"] = 128] = "IS_PREFIX";
    TokenType[TokenType["IS_POSTFIX"] = 256] = "IS_POSTFIX";
    TokenType[TokenType["num"] = 0] = "num";
    TokenType[TokenType["bigint"] = 512] = "bigint";
    TokenType[TokenType["decimal"] = 1024] = "decimal";
    TokenType[TokenType["regexp"] = 1536] = "regexp";
    TokenType[TokenType["string"] = 2048] = "string";
    TokenType[TokenType["name"] = 2560] = "name";
    TokenType[TokenType["eof"] = 3072] = "eof";
    TokenType[TokenType["bracketL"] = 3584] = "bracketL";
    TokenType[TokenType["bracketR"] = 4096] = "bracketR";
    TokenType[TokenType["braceL"] = 4608] = "braceL";
    TokenType[TokenType["braceBarL"] = 5120] = "braceBarL";
    TokenType[TokenType["braceR"] = 5632] = "braceR";
    TokenType[TokenType["braceBarR"] = 6144] = "braceBarR";
    TokenType[TokenType["parenL"] = 6656] = "parenL";
    TokenType[TokenType["parenR"] = 7168] = "parenR";
    TokenType[TokenType["comma"] = 7680] = "comma";
    TokenType[TokenType["semi"] = 8192] = "semi";
    TokenType[TokenType["colon"] = 8704] = "colon";
    TokenType[TokenType["doubleColon"] = 9216] = "doubleColon";
    TokenType[TokenType["dot"] = 9728] = "dot";
    TokenType[TokenType["question"] = 10240] = "question";
    TokenType[TokenType["questionDot"] = 10752] = "questionDot";
    TokenType[TokenType["arrow"] = 11264] = "arrow";
    TokenType[TokenType["template"] = 11776] = "template";
    TokenType[TokenType["ellipsis"] = 12288] = "ellipsis";
    TokenType[TokenType["backQuote"] = 12800] = "backQuote";
    TokenType[TokenType["dollarBraceL"] = 13312] = "dollarBraceL";
    TokenType[TokenType["at"] = 13824] = "at";
    TokenType[TokenType["hash"] = 14336] = "hash";
    TokenType[TokenType["eq"] = 14880] = "eq";
    TokenType[TokenType["assign"] = 15392] = "assign";
    TokenType[TokenType["preIncDec"] = 16256] = "preIncDec";
    TokenType[TokenType["postIncDec"] = 16768] = "postIncDec";
    TokenType[TokenType["bang"] = 17024] = "bang";
    TokenType[TokenType["tilde"] = 17536] = "tilde";
    TokenType[TokenType["pipeline"] = 17921] = "pipeline";
    TokenType[TokenType["nullishCoalescing"] = 18434] = "nullishCoalescing";
    TokenType[TokenType["logicalOR"] = 18946] = "logicalOR";
    TokenType[TokenType["logicalAND"] = 19459] = "logicalAND";
    TokenType[TokenType["bitwiseOR"] = 19972] = "bitwiseOR";
    TokenType[TokenType["bitwiseXOR"] = 20485] = "bitwiseXOR";
    TokenType[TokenType["bitwiseAND"] = 20998] = "bitwiseAND";
    TokenType[TokenType["equality"] = 21511] = "equality";
    TokenType[TokenType["lessThan"] = 22024] = "lessThan";
    TokenType[TokenType["greaterThan"] = 22536] = "greaterThan";
    TokenType[TokenType["relationalOrEqual"] = 23048] = "relationalOrEqual";
    TokenType[TokenType["bitShift"] = 23561] = "bitShift";
    TokenType[TokenType["plus"] = 24202] = "plus";
    TokenType[TokenType["minus"] = 24714] = "minus";
    TokenType[TokenType["modulo"] = 25099] = "modulo";
    TokenType[TokenType["star"] = 25611] = "star";
    TokenType[TokenType["slash"] = 26123] = "slash";
    TokenType[TokenType["exponent"] = 26700] = "exponent";
    TokenType[TokenType["jsxName"] = 27136] = "jsxName";
    TokenType[TokenType["jsxText"] = 27648] = "jsxText";
    TokenType[TokenType["jsxTagStart"] = 28160] = "jsxTagStart";
    TokenType[TokenType["jsxTagEnd"] = 28672] = "jsxTagEnd";
    TokenType[TokenType["typeParameterStart"] = 29184] = "typeParameterStart";
    TokenType[TokenType["nonNullAssertion"] = 29696] = "nonNullAssertion";
    TokenType[TokenType["_break"] = 30224] = "_break";
    TokenType[TokenType["_case"] = 30736] = "_case";
    TokenType[TokenType["_catch"] = 31248] = "_catch";
    TokenType[TokenType["_continue"] = 31760] = "_continue";
    TokenType[TokenType["_debugger"] = 32272] = "_debugger";
    TokenType[TokenType["_default"] = 32784] = "_default";
    TokenType[TokenType["_do"] = 33296] = "_do";
    TokenType[TokenType["_else"] = 33808] = "_else";
    TokenType[TokenType["_finally"] = 34320] = "_finally";
    TokenType[TokenType["_for"] = 34832] = "_for";
    TokenType[TokenType["_function"] = 35344] = "_function";
    TokenType[TokenType["_if"] = 35856] = "_if";
    TokenType[TokenType["_return"] = 36368] = "_return";
    TokenType[TokenType["_switch"] = 36880] = "_switch";
    TokenType[TokenType["_throw"] = 37520] = "_throw";
    TokenType[TokenType["_try"] = 37904] = "_try";
    TokenType[TokenType["_var"] = 38416] = "_var";
    TokenType[TokenType["_let"] = 38928] = "_let";
    TokenType[TokenType["_const"] = 39440] = "_const";
    TokenType[TokenType["_while"] = 39952] = "_while";
    TokenType[TokenType["_with"] = 40464] = "_with";
    TokenType[TokenType["_new"] = 40976] = "_new";
    TokenType[TokenType["_this"] = 41488] = "_this";
    TokenType[TokenType["_super"] = 42000] = "_super";
    TokenType[TokenType["_class"] = 42512] = "_class";
    TokenType[TokenType["_extends"] = 43024] = "_extends";
    TokenType[TokenType["_export"] = 43536] = "_export";
    TokenType[TokenType["_import"] = 44048] = "_import";
    TokenType[TokenType["_yield"] = 44560] = "_yield";
    TokenType[TokenType["_null"] = 45072] = "_null";
    TokenType[TokenType["_true"] = 45584] = "_true";
    TokenType[TokenType["_false"] = 46096] = "_false";
    TokenType[TokenType["_in"] = 46616] = "_in";
    TokenType[TokenType["_instanceof"] = 47128] = "_instanceof";
    TokenType[TokenType["_typeof"] = 47760] = "_typeof";
    TokenType[TokenType["_void"] = 48272] = "_void";
    TokenType[TokenType["_delete"] = 48784] = "_delete";
    TokenType[TokenType["_async"] = 49168] = "_async";
    TokenType[TokenType["_get"] = 49680] = "_get";
    TokenType[TokenType["_set"] = 50192] = "_set";
    TokenType[TokenType["_declare"] = 50704] = "_declare";
    TokenType[TokenType["_readonly"] = 51216] = "_readonly";
    TokenType[TokenType["_abstract"] = 51728] = "_abstract";
    TokenType[TokenType["_static"] = 52240] = "_static";
    TokenType[TokenType["_public"] = 52752] = "_public";
    TokenType[TokenType["_private"] = 53264] = "_private";
    TokenType[TokenType["_protected"] = 53776] = "_protected";
    TokenType[TokenType["_as"] = 54288] = "_as";
    TokenType[TokenType["_enum"] = 54800] = "_enum";
    TokenType[TokenType["_type"] = 55312] = "_type";
    TokenType[TokenType["_implements"] = 55824] = "_implements";
})(TokenType || (TokenType = {}));
function formatTokenType(tokenType) {
    switch (tokenType) {
        case TokenType.num:
            return "num";
        case TokenType.bigint:
            return "bigint";
        case TokenType.decimal:
            return "decimal";
        case TokenType.regexp:
            return "regexp";
        case TokenType.string:
            return "string";
        case TokenType.name:
            return "name";
        case TokenType.eof:
            return "eof";
        case TokenType.bracketL:
            return "[";
        case TokenType.bracketR:
            return "]";
        case TokenType.braceL:
            return "{";
        case TokenType.braceBarL:
            return "{|";
        case TokenType.braceR:
            return "}";
        case TokenType.braceBarR:
            return "|}";
        case TokenType.parenL:
            return "(";
        case TokenType.parenR:
            return ")";
        case TokenType.comma:
            return ",";
        case TokenType.semi:
            return ";";
        case TokenType.colon:
            return ":";
        case TokenType.doubleColon:
            return "::";
        case TokenType.dot:
            return ".";
        case TokenType.question:
            return "?";
        case TokenType.questionDot:
            return "?.";
        case TokenType.arrow:
            return "=>";
        case TokenType.template:
            return "template";
        case TokenType.ellipsis:
            return "...";
        case TokenType.backQuote:
            return "`";
        case TokenType.dollarBraceL:
            return "${";
        case TokenType.at:
            return "@";
        case TokenType.hash:
            return "#";
        case TokenType.eq:
            return "=";
        case TokenType.assign:
            return "_=";
        case TokenType.preIncDec:
            return "++/--";
        case TokenType.postIncDec:
            return "++/--";
        case TokenType.bang:
            return "!";
        case TokenType.tilde:
            return "~";
        case TokenType.pipeline:
            return "|>";
        case TokenType.nullishCoalescing:
            return "??";
        case TokenType.logicalOR:
            return "||";
        case TokenType.logicalAND:
            return "&&";
        case TokenType.bitwiseOR:
            return "|";
        case TokenType.bitwiseXOR:
            return "^";
        case TokenType.bitwiseAND:
            return "&";
        case TokenType.equality:
            return "==/!=";
        case TokenType.lessThan:
            return "<";
        case TokenType.greaterThan:
            return ">";
        case TokenType.relationalOrEqual:
            return "<=/>=";
        case TokenType.bitShift:
            return "<</>>";
        case TokenType.plus:
            return "+";
        case TokenType.minus:
            return "-";
        case TokenType.modulo:
            return "%";
        case TokenType.star:
            return "*";
        case TokenType.slash:
            return "/";
        case TokenType.exponent:
            return "**";
        case TokenType.jsxName:
            return "jsxName";
        case TokenType.jsxText:
            return "jsxText";
        case TokenType.jsxTagStart:
            return "jsxTagStart";
        case TokenType.jsxTagEnd:
            return "jsxTagEnd";
        case TokenType.typeParameterStart:
            return "typeParameterStart";
        case TokenType.nonNullAssertion:
            return "nonNullAssertion";
        case TokenType._break:
            return "break";
        case TokenType._case:
            return "case";
        case TokenType._catch:
            return "catch";
        case TokenType._continue:
            return "continue";
        case TokenType._debugger:
            return "debugger";
        case TokenType._default:
            return "default";
        case TokenType._do:
            return "do";
        case TokenType._else:
            return "else";
        case TokenType._finally:
            return "finally";
        case TokenType._for:
            return "for";
        case TokenType._function:
            return "function";
        case TokenType._if:
            return "if";
        case TokenType._return:
            return "return";
        case TokenType._switch:
            return "switch";
        case TokenType._throw:
            return "throw";
        case TokenType._try:
            return "try";
        case TokenType._var:
            return "var";
        case TokenType._let:
            return "let";
        case TokenType._const:
            return "const";
        case TokenType._while:
            return "while";
        case TokenType._with:
            return "with";
        case TokenType._new:
            return "new";
        case TokenType._this:
            return "this";
        case TokenType._super:
            return "super";
        case TokenType._class:
            return "class";
        case TokenType._extends:
            return "extends";
        case TokenType._export:
            return "export";
        case TokenType._import:
            return "import";
        case TokenType._yield:
            return "yield";
        case TokenType._null:
            return "null";
        case TokenType._true:
            return "true";
        case TokenType._false:
            return "false";
        case TokenType._in:
            return "in";
        case TokenType._instanceof:
            return "instanceof";
        case TokenType._typeof:
            return "typeof";
        case TokenType._void:
            return "void";
        case TokenType._delete:
            return "delete";
        case TokenType._async:
            return "async";
        case TokenType._get:
            return "get";
        case TokenType._set:
            return "set";
        case TokenType._declare:
            return "declare";
        case TokenType._readonly:
            return "readonly";
        case TokenType._abstract:
            return "abstract";
        case TokenType._static:
            return "static";
        case TokenType._public:
            return "public";
        case TokenType._private:
            return "private";
        case TokenType._protected:
            return "protected";
        case TokenType._as:
            return "as";
        case TokenType._enum:
            return "enum";
        case TokenType._type:
            return "type";
        case TokenType._implements:
            return "implements";
        default:
            return "";
    }
}

class Scope {
    constructor(startTokenIndex, endTokenIndex, isFunctionScope) {
        this.startTokenIndex = startTokenIndex;
        this.endTokenIndex = endTokenIndex;
        this.isFunctionScope = isFunctionScope;
    }
}
class StateSnapshot {
    constructor(potentialArrowAt, noAnonFunctionType, tokensLength, scopesLength, pos, type, contextualKeyword, start, end, isType, scopeDepth, error) {
        this.potentialArrowAt = potentialArrowAt;
        this.noAnonFunctionType = noAnonFunctionType;
        this.tokensLength = tokensLength;
        this.scopesLength = scopesLength;
        this.pos = pos;
        this.type = type;
        this.contextualKeyword = contextualKeyword;
        this.start = start;
        this.end = end;
        this.isType = isType;
        this.scopeDepth = scopeDepth;
        this.error = error;
    }
}
class State {
    constructor() {
        // Used to signify the start of a potential arrow function
        this.potentialArrowAt = -1;
        // Used by Flow to handle an edge case involving function type parsing.
        this.noAnonFunctionType = false;
        // Token store.
        this.tokens = [];
        // Array of all observed scopes, ordered by their ending position.
        this.scopes = [];
        // The current position of the tokenizer in the input.
        this.pos = 0;
        // Information about the current token.
        this.type = TokenType.eof;
        this.contextualKeyword = ContextualKeyword.NONE;
        this.start = 0;
        this.end = 0;
        this.isType = false;
        this.scopeDepth = 0;
        /**
         * If the parser is in an error state, then the token is always tt.eof and all functions can
         * keep executing but should be written so they don't get into an infinite loop in this situation.
         *
         * This approach, combined with the ability to snapshot and restore state, allows us to implement
         * backtracking without exceptions and without needing to explicitly propagate error states
         * everywhere.
         */
        this.error = null;
    }
    snapshot() {
        return new StateSnapshot(this.potentialArrowAt, this.noAnonFunctionType, this.tokens.length, this.scopes.length, this.pos, this.type, this.contextualKeyword, this.start, this.end, this.isType, this.scopeDepth, this.error);
    }
    restoreFromSnapshot(snapshot) {
        this.potentialArrowAt = snapshot.potentialArrowAt;
        this.noAnonFunctionType = snapshot.noAnonFunctionType;
        this.tokens.length = snapshot.tokensLength;
        this.scopes.length = snapshot.scopesLength;
        this.pos = snapshot.pos;
        this.type = snapshot.type;
        this.contextualKeyword = snapshot.contextualKeyword;
        this.start = snapshot.start;
        this.end = snapshot.end;
        this.isType = snapshot.isType;
        this.scopeDepth = snapshot.scopeDepth;
        this.error = snapshot.error;
    }
}

var charCodes;
(function (charCodes) {
    charCodes[charCodes["backSpace"] = 8] = "backSpace";
    charCodes[charCodes["lineFeed"] = 10] = "lineFeed";
    charCodes[charCodes["carriageReturn"] = 13] = "carriageReturn";
    charCodes[charCodes["shiftOut"] = 14] = "shiftOut";
    charCodes[charCodes["space"] = 32] = "space";
    charCodes[charCodes["exclamationMark"] = 33] = "exclamationMark";
    charCodes[charCodes["quotationMark"] = 34] = "quotationMark";
    charCodes[charCodes["numberSign"] = 35] = "numberSign";
    charCodes[charCodes["dollarSign"] = 36] = "dollarSign";
    charCodes[charCodes["percentSign"] = 37] = "percentSign";
    charCodes[charCodes["ampersand"] = 38] = "ampersand";
    charCodes[charCodes["apostrophe"] = 39] = "apostrophe";
    charCodes[charCodes["leftParenthesis"] = 40] = "leftParenthesis";
    charCodes[charCodes["rightParenthesis"] = 41] = "rightParenthesis";
    charCodes[charCodes["asterisk"] = 42] = "asterisk";
    charCodes[charCodes["plusSign"] = 43] = "plusSign";
    charCodes[charCodes["comma"] = 44] = "comma";
    charCodes[charCodes["dash"] = 45] = "dash";
    charCodes[charCodes["dot"] = 46] = "dot";
    charCodes[charCodes["slash"] = 47] = "slash";
    charCodes[charCodes["digit0"] = 48] = "digit0";
    charCodes[charCodes["digit1"] = 49] = "digit1";
    charCodes[charCodes["digit2"] = 50] = "digit2";
    charCodes[charCodes["digit3"] = 51] = "digit3";
    charCodes[charCodes["digit4"] = 52] = "digit4";
    charCodes[charCodes["digit5"] = 53] = "digit5";
    charCodes[charCodes["digit6"] = 54] = "digit6";
    charCodes[charCodes["digit7"] = 55] = "digit7";
    charCodes[charCodes["digit8"] = 56] = "digit8";
    charCodes[charCodes["digit9"] = 57] = "digit9";
    charCodes[charCodes["colon"] = 58] = "colon";
    charCodes[charCodes["semicolon"] = 59] = "semicolon";
    charCodes[charCodes["lessThan"] = 60] = "lessThan";
    charCodes[charCodes["equalsTo"] = 61] = "equalsTo";
    charCodes[charCodes["greaterThan"] = 62] = "greaterThan";
    charCodes[charCodes["questionMark"] = 63] = "questionMark";
    charCodes[charCodes["atSign"] = 64] = "atSign";
    charCodes[charCodes["uppercaseA"] = 65] = "uppercaseA";
    charCodes[charCodes["uppercaseB"] = 66] = "uppercaseB";
    charCodes[charCodes["uppercaseC"] = 67] = "uppercaseC";
    charCodes[charCodes["uppercaseD"] = 68] = "uppercaseD";
    charCodes[charCodes["uppercaseE"] = 69] = "uppercaseE";
    charCodes[charCodes["uppercaseF"] = 70] = "uppercaseF";
    charCodes[charCodes["uppercaseG"] = 71] = "uppercaseG";
    charCodes[charCodes["uppercaseH"] = 72] = "uppercaseH";
    charCodes[charCodes["uppercaseI"] = 73] = "uppercaseI";
    charCodes[charCodes["uppercaseJ"] = 74] = "uppercaseJ";
    charCodes[charCodes["uppercaseK"] = 75] = "uppercaseK";
    charCodes[charCodes["uppercaseL"] = 76] = "uppercaseL";
    charCodes[charCodes["uppercaseM"] = 77] = "uppercaseM";
    charCodes[charCodes["uppercaseN"] = 78] = "uppercaseN";
    charCodes[charCodes["uppercaseO"] = 79] = "uppercaseO";
    charCodes[charCodes["uppercaseP"] = 80] = "uppercaseP";
    charCodes[charCodes["uppercaseQ"] = 81] = "uppercaseQ";
    charCodes[charCodes["uppercaseR"] = 82] = "uppercaseR";
    charCodes[charCodes["uppercaseS"] = 83] = "uppercaseS";
    charCodes[charCodes["uppercaseT"] = 84] = "uppercaseT";
    charCodes[charCodes["uppercaseU"] = 85] = "uppercaseU";
    charCodes[charCodes["uppercaseV"] = 86] = "uppercaseV";
    charCodes[charCodes["uppercaseW"] = 87] = "uppercaseW";
    charCodes[charCodes["uppercaseX"] = 88] = "uppercaseX";
    charCodes[charCodes["uppercaseY"] = 89] = "uppercaseY";
    charCodes[charCodes["uppercaseZ"] = 90] = "uppercaseZ";
    charCodes[charCodes["leftSquareBracket"] = 91] = "leftSquareBracket";
    charCodes[charCodes["backslash"] = 92] = "backslash";
    charCodes[charCodes["rightSquareBracket"] = 93] = "rightSquareBracket";
    charCodes[charCodes["caret"] = 94] = "caret";
    charCodes[charCodes["underscore"] = 95] = "underscore";
    charCodes[charCodes["graveAccent"] = 96] = "graveAccent";
    charCodes[charCodes["lowercaseA"] = 97] = "lowercaseA";
    charCodes[charCodes["lowercaseB"] = 98] = "lowercaseB";
    charCodes[charCodes["lowercaseC"] = 99] = "lowercaseC";
    charCodes[charCodes["lowercaseD"] = 100] = "lowercaseD";
    charCodes[charCodes["lowercaseE"] = 101] = "lowercaseE";
    charCodes[charCodes["lowercaseF"] = 102] = "lowercaseF";
    charCodes[charCodes["lowercaseG"] = 103] = "lowercaseG";
    charCodes[charCodes["lowercaseH"] = 104] = "lowercaseH";
    charCodes[charCodes["lowercaseI"] = 105] = "lowercaseI";
    charCodes[charCodes["lowercaseJ"] = 106] = "lowercaseJ";
    charCodes[charCodes["lowercaseK"] = 107] = "lowercaseK";
    charCodes[charCodes["lowercaseL"] = 108] = "lowercaseL";
    charCodes[charCodes["lowercaseM"] = 109] = "lowercaseM";
    charCodes[charCodes["lowercaseN"] = 110] = "lowercaseN";
    charCodes[charCodes["lowercaseO"] = 111] = "lowercaseO";
    charCodes[charCodes["lowercaseP"] = 112] = "lowercaseP";
    charCodes[charCodes["lowercaseQ"] = 113] = "lowercaseQ";
    charCodes[charCodes["lowercaseR"] = 114] = "lowercaseR";
    charCodes[charCodes["lowercaseS"] = 115] = "lowercaseS";
    charCodes[charCodes["lowercaseT"] = 116] = "lowercaseT";
    charCodes[charCodes["lowercaseU"] = 117] = "lowercaseU";
    charCodes[charCodes["lowercaseV"] = 118] = "lowercaseV";
    charCodes[charCodes["lowercaseW"] = 119] = "lowercaseW";
    charCodes[charCodes["lowercaseX"] = 120] = "lowercaseX";
    charCodes[charCodes["lowercaseY"] = 121] = "lowercaseY";
    charCodes[charCodes["lowercaseZ"] = 122] = "lowercaseZ";
    charCodes[charCodes["leftCurlyBrace"] = 123] = "leftCurlyBrace";
    charCodes[charCodes["verticalBar"] = 124] = "verticalBar";
    charCodes[charCodes["rightCurlyBrace"] = 125] = "rightCurlyBrace";
    charCodes[charCodes["tilde"] = 126] = "tilde";
    charCodes[charCodes["nonBreakingSpace"] = 160] = "nonBreakingSpace";
    // eslint-disable-next-line no-irregular-whitespace
    charCodes[charCodes["oghamSpaceMark"] = 5760] = "oghamSpaceMark";
    charCodes[charCodes["lineSeparator"] = 8232] = "lineSeparator";
    charCodes[charCodes["paragraphSeparator"] = 8233] = "paragraphSeparator";
})(charCodes || (charCodes = {}));

let isJSXEnabled;
let state;
let input;
let nextContextId;
function getNextContextId() {
    return nextContextId++;
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function augmentError(error) {
    if ("pos" in error) {
        const loc = locationForIndex(error.pos);
        error.message += ` (${loc.line}:${loc.column})`;
        error.loc = loc;
    }
    return error;
}
class Loc {
    constructor(line, column) {
        this.line = line;
        this.column = column;
    }
}
function locationForIndex(pos) {
    let line = 1;
    let column = 1;
    for (let i = 0; i < pos; i++) {
        if (input.charCodeAt(i) === charCodes.lineFeed) {
            line++;
            column = 1;
        }
        else {
            column++;
        }
    }
    return new Loc(line, column);
}
function initParser(inputCode, isJSXEnabledArg) {
    input = inputCode;
    state = new State();
    nextContextId = 1;
    isJSXEnabled = isJSXEnabledArg;
}

// ## Parser utilities
// Tests whether parsed token is a contextual keyword.
function isContextual(contextualKeyword) {
    return state.contextualKeyword === contextualKeyword;
}
function isLookaheadContextual(contextualKeyword) {
    const l = lookaheadTypeAndKeyword();
    return l.type === TokenType.name && l.contextualKeyword === contextualKeyword;
}
// Consumes contextual keyword if possible.
function eatContextual(contextualKeyword) {
    return state.contextualKeyword === contextualKeyword && eat(TokenType.name);
}
// Asserts that following token is given contextual keyword.
function expectContextual(contextualKeyword) {
    if (!eatContextual(contextualKeyword)) {
        unexpected();
    }
}
// Test whether a semicolon can be inserted at the current position.
function canInsertSemicolon() {
    return match(TokenType.eof) || match(TokenType.braceR) || hasPrecedingLineBreak();
}
function hasPrecedingLineBreak() {
    const prevToken = state.tokens[state.tokens.length - 1];
    const lastTokEnd = prevToken ? prevToken.end : 0;
    for (let i = lastTokEnd; i < state.start; i++) {
        const code = input.charCodeAt(i);
        if (code === charCodes.lineFeed ||
            code === charCodes.carriageReturn ||
            code === 0x2028 ||
            code === 0x2029) {
            return true;
        }
    }
    return false;
}
function isLineTerminator() {
    return eat(TokenType.semi) || canInsertSemicolon();
}
// Consume a semicolon, or, failing that, see if we are allowed to
// pretend that there is a semicolon at this position.
function semicolon() {
    if (!isLineTerminator()) {
        unexpected('Unexpected token, expected ";"');
    }
}
// Expect a token of a given type. If found, consume it, otherwise,
// raise an unexpected token error at given pos.
function expect(type) {
    const matched = eat(type);
    if (!matched) {
        unexpected(`Unexpected token, expected "${formatTokenType(type)}"`);
    }
}
/**
 * Transition the parser to an error state. All code needs to be written to naturally unwind in this
 * state, which allows us to backtrack without exceptions and without error plumbing everywhere.
 */
function unexpected(message = "Unexpected token", pos = state.start) {
    if (state.error) {
        return;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const err = new SyntaxError(message);
    err.pos = pos;
    state.error = err;
    state.pos = input.length;
    finishToken(TokenType.eof);
}

// https://tc39.github.io/ecma262/#sec-white-space
const WHITESPACE_CHARS = [
    0x0009,
    0x000b,
    0x000c,
    charCodes.space,
    charCodes.nonBreakingSpace,
    charCodes.oghamSpaceMark,
    0x2000,
    0x2001,
    0x2002,
    0x2003,
    0x2004,
    0x2005,
    0x2006,
    0x2007,
    0x2008,
    0x2009,
    0x200a,
    0x202f,
    0x205f,
    0x3000,
    0xfeff, // ZERO WIDTH NO-BREAK SPACE
];
const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
const IS_WHITESPACE = new Uint8Array(65536);
for (const char of WHITESPACE_CHARS) {
    IS_WHITESPACE[char] = 1;
}

function computeIsIdentifierChar(code) {
    if (code < 48)
        return code === 36;
    if (code < 58)
        return true;
    if (code < 65)
        return false;
    if (code < 91)
        return true;
    if (code < 97)
        return code === 95;
    if (code < 123)
        return true;
    if (code < 128)
        return false;
    throw new Error("Should not be called with non-ASCII char code.");
}
const IS_IDENTIFIER_CHAR = new Uint8Array(65536);
for (let i = 0; i < 128; i++) {
    IS_IDENTIFIER_CHAR[i] = computeIsIdentifierChar(i) ? 1 : 0;
}
for (let i = 128; i < 65536; i++) {
    IS_IDENTIFIER_CHAR[i] = 1;
}
// Aside from whitespace and newlines, all characters outside the ASCII space are either
// identifier characters or invalid. Since we're not performing code validation, we can just
// treat all invalid characters as identifier characters.
for (const whitespaceChar of WHITESPACE_CHARS) {
    IS_IDENTIFIER_CHAR[whitespaceChar] = 0;
}
IS_IDENTIFIER_CHAR[0x2028] = 0;
IS_IDENTIFIER_CHAR[0x2029] = 0;
const IS_IDENTIFIER_START = IS_IDENTIFIER_CHAR.slice();
for (let numChar = charCodes.digit0; numChar <= charCodes.digit9; numChar++) {
    IS_IDENTIFIER_START[numChar] = 0;
}

// Generated file, do not edit! Run "yarn generate" to re-generate this file.
// prettier-ignore
const READ_WORD_TREE = new Int32Array([
    // ""
    -1, 27, 594, 729, 1566, 2187, 2673, 3294, -1, 3510, -1, 4428, 4563, 4644, 4941, 5319, 5508, -1, 6048, 6507, 6966, 7398, 7560, 7722, -1, 7938, -1,
    // "a"
    -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 243, -1, -1, -1, 486, -1, -1, -1,
    // "ab"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1,
    // "abs"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, -1,
    // "abst"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 135, -1, -1, -1, -1, -1, -1, -1, -1,
    // "abstr"
    -1, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "abstra"
    -1, -1, -1, 189, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "abstrac"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 216, -1, -1, -1, -1, -1, -1,
    // "abstract"
    ContextualKeyword._abstract << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "as"
    ContextualKeyword._as << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 270, -1, -1, -1, -1, -1, 405, -1,
    // "ass"
    -1, -1, -1, -1, -1, 297, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "asse"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 324, -1, -1, -1, -1, -1, -1, -1, -1,
    // "asser"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 351, -1, -1, -1, -1, -1, -1,
    // "assert"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 378, -1, -1, -1, -1, -1, -1, -1,
    // "asserts"
    ContextualKeyword._asserts << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "asy"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 432, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "asyn"
    -1, -1, -1, 459, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "async"
    ContextualKeyword._async << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "aw"
    -1, 513, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "awa"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 540, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "awai"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 567, -1, -1, -1, -1, -1, -1,
    // "await"
    ContextualKeyword._await << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "b"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 621, -1, -1, -1, -1, -1, -1, -1, -1,
    // "br"
    -1, -1, -1, -1, -1, 648, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "bre"
    -1, 675, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "brea"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 702, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "break"
    (TokenType._break << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "c"
    -1, 756, -1, -1, -1, -1, -1, -1, 918, -1, -1, -1, 1053, -1, -1, 1161, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "ca"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 783, 837, -1, -1, -1, -1, -1, -1,
    // "cas"
    -1, -1, -1, -1, -1, 810, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "case"
    (TokenType._case << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "cat"
    -1, -1, -1, 864, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "catc"
    -1, -1, -1, -1, -1, -1, -1, -1, 891, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "catch"
    (TokenType._catch << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "ch"
    -1, -1, -1, -1, -1, 945, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "che"
    -1, -1, -1, 972, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "chec"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 999, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "check"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1026, -1, -1, -1, -1, -1, -1, -1,
    // "checks"
    ContextualKeyword._checks << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "cl"
    -1, 1080, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "cla"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1107, -1, -1, -1, -1, -1, -1, -1,
    // "clas"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1134, -1, -1, -1, -1, -1, -1, -1,
    // "class"
    (TokenType._class << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "co"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1188, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "con"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1215, 1431, -1, -1, -1, -1, -1, -1,
    // "cons"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1242, -1, -1, -1, -1, -1, -1,
    // "const"
    (TokenType._const << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1269, -1, -1, -1, -1, -1, -1, -1, -1,
    // "constr"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1296, -1, -1, -1, -1, -1,
    // "constru"
    -1, -1, -1, 1323, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "construc"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1350, -1, -1, -1, -1, -1, -1,
    // "construct"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1377, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "constructo"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1404, -1, -1, -1, -1, -1, -1, -1, -1,
    // "constructor"
    ContextualKeyword._constructor << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "cont"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 1458, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "conti"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1485, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "contin"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1512, -1, -1, -1, -1, -1,
    // "continu"
    -1, -1, -1, -1, -1, 1539, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "continue"
    (TokenType._continue << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "d"
    -1, -1, -1, -1, -1, 1593, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2160, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "de"
    -1, -1, 1620, 1782, -1, -1, 1917, -1, -1, -1, -1, -1, 2052, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "deb"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1647, -1, -1, -1, -1, -1,
    // "debu"
    -1, -1, -1, -1, -1, -1, -1, 1674, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "debug"
    -1, -1, -1, -1, -1, -1, -1, 1701, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "debugg"
    -1, -1, -1, -1, -1, 1728, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "debugge"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1755, -1, -1, -1, -1, -1, -1, -1, -1,
    // "debugger"
    (TokenType._debugger << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "dec"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1809, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "decl"
    -1, 1836, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "decla"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1863, -1, -1, -1, -1, -1, -1, -1, -1,
    // "declar"
    -1, -1, -1, -1, -1, 1890, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "declare"
    ContextualKeyword._declare << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "def"
    -1, 1944, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "defa"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1971, -1, -1, -1, -1, -1,
    // "defau"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1998, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "defaul"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2025, -1, -1, -1, -1, -1, -1,
    // "default"
    (TokenType._default << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "del"
    -1, -1, -1, -1, -1, 2079, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "dele"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2106, -1, -1, -1, -1, -1, -1,
    // "delet"
    -1, -1, -1, -1, -1, 2133, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "delete"
    (TokenType._delete << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "do"
    (TokenType._do << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "e"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2214, -1, 2295, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2376, -1, -1,
    // "el"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2241, -1, -1, -1, -1, -1, -1, -1,
    // "els"
    -1, -1, -1, -1, -1, 2268, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "else"
    (TokenType._else << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "en"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2322, -1, -1, -1, -1, -1,
    // "enu"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2349, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "enum"
    ContextualKeyword._enum << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "ex"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2403, -1, -1, -1, 2538, -1, -1, -1, -1, -1, -1,
    // "exp"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2430, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "expo"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2457, -1, -1, -1, -1, -1, -1, -1, -1,
    // "expor"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2484, -1, -1, -1, -1, -1, -1,
    // "export"
    (TokenType._export << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2511, -1, -1, -1, -1, -1, -1, -1,
    // "exports"
    ContextualKeyword._exports << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "ext"
    -1, -1, -1, -1, -1, 2565, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "exte"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2592, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "exten"
    -1, -1, -1, -1, 2619, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "extend"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2646, -1, -1, -1, -1, -1, -1, -1,
    // "extends"
    (TokenType._extends << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "f"
    -1, 2700, -1, -1, -1, -1, -1, -1, -1, 2808, -1, -1, -1, -1, -1, 2970, -1, -1, 3024, -1, -1, 3105, -1, -1, -1, -1, -1,
    // "fa"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2727, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "fal"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2754, -1, -1, -1, -1, -1, -1, -1,
    // "fals"
    -1, -1, -1, -1, -1, 2781, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "false"
    (TokenType._false << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "fi"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2835, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "fin"
    -1, 2862, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "fina"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2889, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "final"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2916, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "finall"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2943, -1,
    // "finally"
    (TokenType._finally << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "fo"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2997, -1, -1, -1, -1, -1, -1, -1, -1,
    // "for"
    (TokenType._for << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "fr"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3051, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "fro"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3078, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "from"
    ContextualKeyword._from << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "fu"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3132, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "fun"
    -1, -1, -1, 3159, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "func"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3186, -1, -1, -1, -1, -1, -1,
    // "funct"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 3213, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "functi"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3240, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "functio"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3267, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "function"
    (TokenType._function << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "g"
    -1, -1, -1, -1, -1, 3321, -1, -1, -1, -1, -1, -1, 3375, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "ge"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3348, -1, -1, -1, -1, -1, -1,
    // "get"
    ContextualKeyword._get << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "gl"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3402, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "glo"
    -1, -1, 3429, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "glob"
    -1, 3456, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "globa"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3483, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "global"
    ContextualKeyword._global << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "i"
    -1, -1, -1, -1, -1, -1, 3537, -1, -1, -1, -1, -1, -1, 3564, 3888, -1, -1, -1, -1, 4401, -1, -1, -1, -1, -1, -1, -1,
    // "if"
    (TokenType._if << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "im"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3591, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "imp"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3618, -1, -1, 3807, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "impl"
    -1, -1, -1, -1, -1, 3645, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "imple"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3672, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "implem"
    -1, -1, -1, -1, -1, 3699, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "impleme"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3726, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "implemen"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3753, -1, -1, -1, -1, -1, -1,
    // "implement"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3780, -1, -1, -1, -1, -1, -1, -1,
    // "implements"
    ContextualKeyword._implements << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "impo"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3834, -1, -1, -1, -1, -1, -1, -1, -1,
    // "impor"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3861, -1, -1, -1, -1, -1, -1,
    // "import"
    (TokenType._import << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "in"
    (TokenType._in << 1) + 1, -1, -1, -1, -1, -1, 3915, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3996, 4212, -1, -1, -1, -1, -1, -1,
    // "inf"
    -1, -1, -1, -1, -1, 3942, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "infe"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3969, -1, -1, -1, -1, -1, -1, -1, -1,
    // "infer"
    ContextualKeyword._infer << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "ins"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4023, -1, -1, -1, -1, -1, -1,
    // "inst"
    -1, 4050, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "insta"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4077, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "instan"
    -1, -1, -1, 4104, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "instanc"
    -1, -1, -1, -1, -1, 4131, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "instance"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4158, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "instanceo"
    -1, -1, -1, -1, -1, -1, 4185, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "instanceof"
    (TokenType._instanceof << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "int"
    -1, -1, -1, -1, -1, 4239, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "inte"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4266, -1, -1, -1, -1, -1, -1, -1, -1,
    // "inter"
    -1, -1, -1, -1, -1, -1, 4293, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "interf"
    -1, 4320, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "interfa"
    -1, -1, -1, 4347, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "interfac"
    -1, -1, -1, -1, -1, 4374, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "interface"
    ContextualKeyword._interface << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "is"
    ContextualKeyword._is << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "k"
    -1, -1, -1, -1, -1, 4455, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "ke"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4482, -1,
    // "key"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4509, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "keyo"
    -1, -1, -1, -1, -1, -1, 4536, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "keyof"
    ContextualKeyword._keyof << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "l"
    -1, -1, -1, -1, -1, 4590, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "le"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4617, -1, -1, -1, -1, -1, -1,
    // "let"
    (TokenType._let << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "m"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 4671, -1, -1, -1, -1, -1, 4806, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "mi"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4698, -1, -1,
    // "mix"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 4725, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "mixi"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4752, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "mixin"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4779, -1, -1, -1, -1, -1, -1, -1,
    // "mixins"
    ContextualKeyword._mixins << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "mo"
    -1, -1, -1, -1, 4833, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "mod"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4860, -1, -1, -1, -1, -1,
    // "modu"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4887, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "modul"
    -1, -1, -1, -1, -1, 4914, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "module"
    ContextualKeyword._module << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "n"
    -1, 4968, -1, -1, -1, 5184, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5238, -1, -1, -1, -1, -1,
    // "na"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4995, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "nam"
    -1, -1, -1, -1, -1, 5022, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "name"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5049, -1, -1, -1, -1, -1, -1, -1,
    // "names"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5076, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "namesp"
    -1, 5103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "namespa"
    -1, -1, -1, 5130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "namespac"
    -1, -1, -1, -1, -1, 5157, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "namespace"
    ContextualKeyword._namespace << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "ne"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5211, -1, -1, -1,
    // "new"
    (TokenType._new << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "nu"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5265, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "nul"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5292, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "null"
    (TokenType._null << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "o"
    -1, -1, -1, -1, -1, -1, 5346, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5373, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "of"
    ContextualKeyword._of << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "op"
    -1, 5400, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "opa"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5427, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "opaq"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5454, -1, -1, -1, -1, -1,
    // "opaqu"
    -1, -1, -1, -1, -1, 5481, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "opaque"
    ContextualKeyword._opaque << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "p"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5535, -1, -1, 5913, -1, -1, -1, -1, -1,
    // "pr"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 5562, -1, -1, -1, -1, -1, 5697, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "pri"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5589, -1, -1, -1, -1,
    // "priv"
    -1, 5616, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "priva"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5643, -1, -1, -1, -1, -1, -1,
    // "privat"
    -1, -1, -1, -1, -1, 5670, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "private"
    ContextualKeyword._private << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "pro"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5724, -1, -1, -1, -1, -1, -1,
    // "prot"
    -1, -1, -1, -1, -1, 5751, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5886, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "prote"
    -1, -1, -1, 5778, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "protec"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5805, -1, -1, -1, -1, -1, -1,
    // "protect"
    -1, -1, -1, -1, -1, 5832, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "protecte"
    -1, -1, -1, -1, 5859, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "protected"
    ContextualKeyword._protected << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "proto"
    ContextualKeyword._proto << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "pu"
    -1, -1, 5940, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "pub"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5967, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "publ"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 5994, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "publi"
    -1, -1, -1, 6021, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "public"
    ContextualKeyword._public << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "r"
    -1, -1, -1, -1, -1, 6075, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "re"
    -1, 6102, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6264, -1, -1, 6399, -1, -1, -1, -1, -1, -1,
    // "rea"
    -1, -1, -1, -1, 6129, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "read"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6156, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "reado"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6183, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "readon"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6210, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "readonl"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6237, -1,
    // "readonly"
    ContextualKeyword._readonly << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "req"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6291, -1, -1, -1, -1, -1,
    // "requ"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6318, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "requi"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6345, -1, -1, -1, -1, -1, -1, -1, -1,
    // "requir"
    -1, -1, -1, -1, -1, 6372, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "require"
    ContextualKeyword._require << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "ret"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6426, -1, -1, -1, -1, -1,
    // "retu"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6453, -1, -1, -1, -1, -1, -1, -1, -1,
    // "retur"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6480, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "return"
    (TokenType._return << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "s"
    -1, -1, -1, -1, -1, 6534, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6588, 6723, -1, 6831, -1, -1, -1,
    // "se"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6561, -1, -1, -1, -1, -1, -1,
    // "set"
    ContextualKeyword._set << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "st"
    -1, 6615, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "sta"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6642, -1, -1, -1, -1, -1, -1,
    // "stat"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6669, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "stati"
    -1, -1, -1, 6696, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "static"
    ContextualKeyword._static << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "su"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6750, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "sup"
    -1, -1, -1, -1, -1, 6777, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "supe"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6804, -1, -1, -1, -1, -1, -1, -1, -1,
    // "super"
    (TokenType._super << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "sw"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 6858, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "swi"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6885, -1, -1, -1, -1, -1, -1,
    // "swit"
    -1, -1, -1, 6912, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "switc"
    -1, -1, -1, -1, -1, -1, -1, -1, 6939, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "switch"
    (TokenType._switch << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "t"
    -1, -1, -1, -1, -1, -1, -1, -1, 6993, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7155, -1, -1, -1, -1, -1, -1, 7263, -1,
    // "th"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 7020, -1, -1, -1, -1, -1, -1, -1, -1, 7074, -1, -1, -1, -1, -1, -1, -1, -1,
    // "thi"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7047, -1, -1, -1, -1, -1, -1, -1,
    // "this"
    (TokenType._this << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "thr"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "thro"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7128, -1, -1, -1,
    // "throw"
    (TokenType._throw << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "tr"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7182, -1, -1, -1, 7236, -1,
    // "tru"
    -1, -1, -1, -1, -1, 7209, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "true"
    (TokenType._true << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "try"
    (TokenType._try << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "ty"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7290, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "typ"
    -1, -1, -1, -1, -1, 7317, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "type"
    ContextualKeyword._type << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7344, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "typeo"
    -1, -1, -1, -1, -1, -1, 7371, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "typeof"
    (TokenType._typeof << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "u"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7425, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "un"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 7452, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "uni"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7479, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "uniq"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7506, -1, -1, -1, -1, -1,
    // "uniqu"
    -1, -1, -1, -1, -1, 7533, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "unique"
    ContextualKeyword._unique << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "v"
    -1, 7587, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7641, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "va"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7614, -1, -1, -1, -1, -1, -1, -1, -1,
    // "var"
    (TokenType._var << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "vo"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 7668, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "voi"
    -1, -1, -1, -1, 7695, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "void"
    (TokenType._void << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "w"
    -1, -1, -1, -1, -1, -1, -1, -1, 7749, 7857, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "wh"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 7776, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "whi"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7803, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "whil"
    -1, -1, -1, -1, -1, 7830, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "while"
    (TokenType._while << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "wi"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7884, -1, -1, -1, -1, -1, -1,
    // "wit"
    -1, -1, -1, -1, -1, -1, -1, -1, 7911, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "with"
    (TokenType._with << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "y"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 7965, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "yi"
    -1, -1, -1, -1, -1, 7992, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "yie"
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8019, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "yiel"
    -1, -1, -1, -1, 8046, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // "yield"
    (TokenType._yield << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
]);

/**
 * Read an identifier, producing either a name token or matching on one of the existing keywords.
 * For performance, we pre-generate big decision tree that we traverse. Each node represents a
 * prefix and has 27 values, where the first value is the token or contextual token, if any (-1 if
 * not), and the other 26 values are the transitions to other nodes, or -1 to stop.
 */
function readWord() {
    let treePos = 0;
    let code = 0;
    let pos = state.pos;
    while (pos < input.length) {
        code = input.charCodeAt(pos);
        if (code < charCodes.lowercaseA || code > charCodes.lowercaseZ) {
            break;
        }
        const next = READ_WORD_TREE[treePos + (code - charCodes.lowercaseA) + 1];
        if (next === -1) {
            break;
        }
        else {
            treePos = next;
            pos++;
        }
    }
    const keywordValue = READ_WORD_TREE[treePos];
    if (keywordValue > -1 && !IS_IDENTIFIER_CHAR[code]) {
        state.pos = pos;
        if (keywordValue & 1) {
            finishToken(keywordValue >>> 1);
        }
        else {
            finishToken(TokenType.name, keywordValue >>> 1);
        }
        return;
    }
    while (pos < input.length) {
        const ch = input.charCodeAt(pos);
        if (IS_IDENTIFIER_CHAR[ch]) {
            pos++;
        }
        else if (ch === charCodes.backslash) {
            // \u
            pos += 2;
            if (input.charCodeAt(pos) === charCodes.leftCurlyBrace) {
                while (pos < input.length && input.charCodeAt(pos) !== charCodes.rightCurlyBrace) {
                    pos++;
                }
                pos++;
            }
        }
        else if (ch === charCodes.atSign && input.charCodeAt(pos + 1) === charCodes.atSign) {
            pos += 2;
        }
        else {
            break;
        }
    }
    state.pos = pos;
    finishToken(TokenType.name);
}

/* eslint max-len: 0 */
var IdentifierRole;
(function (IdentifierRole) {
    IdentifierRole[IdentifierRole["Access"] = 0] = "Access";
    IdentifierRole[IdentifierRole["ExportAccess"] = 1] = "ExportAccess";
    IdentifierRole[IdentifierRole["TopLevelDeclaration"] = 2] = "TopLevelDeclaration";
    IdentifierRole[IdentifierRole["FunctionScopedDeclaration"] = 3] = "FunctionScopedDeclaration";
    IdentifierRole[IdentifierRole["BlockScopedDeclaration"] = 4] = "BlockScopedDeclaration";
    IdentifierRole[IdentifierRole["ObjectShorthandTopLevelDeclaration"] = 5] = "ObjectShorthandTopLevelDeclaration";
    IdentifierRole[IdentifierRole["ObjectShorthandFunctionScopedDeclaration"] = 6] = "ObjectShorthandFunctionScopedDeclaration";
    IdentifierRole[IdentifierRole["ObjectShorthandBlockScopedDeclaration"] = 7] = "ObjectShorthandBlockScopedDeclaration";
    IdentifierRole[IdentifierRole["ObjectShorthand"] = 8] = "ObjectShorthand";
    // Any identifier bound in an import statement, e.g. both A and b from
    // `import A, * as b from 'A';`
    IdentifierRole[IdentifierRole["ImportDeclaration"] = 9] = "ImportDeclaration";
    IdentifierRole[IdentifierRole["ObjectKey"] = 10] = "ObjectKey";
    // The `foo` in `import {foo as bar} from "./abc";`.
    IdentifierRole[IdentifierRole["ImportAccess"] = 11] = "ImportAccess";
})(IdentifierRole || (IdentifierRole = {}));
function isNonTopLevelDeclaration(token) {
    const role = token.identifierRole;
    return (role === IdentifierRole.FunctionScopedDeclaration ||
        role === IdentifierRole.BlockScopedDeclaration ||
        role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration ||
        role === IdentifierRole.ObjectShorthandBlockScopedDeclaration);
}
function isTopLevelDeclaration(token) {
    const role = token.identifierRole;
    return (role === IdentifierRole.TopLevelDeclaration ||
        role === IdentifierRole.ObjectShorthandTopLevelDeclaration ||
        role === IdentifierRole.ImportDeclaration);
}
function isBlockScopedDeclaration(token) {
    const role = token.identifierRole;
    // Treat top-level declarations as block scope since the distinction doesn't matter here.
    return (role === IdentifierRole.TopLevelDeclaration ||
        role === IdentifierRole.BlockScopedDeclaration ||
        role === IdentifierRole.ObjectShorthandTopLevelDeclaration ||
        role === IdentifierRole.ObjectShorthandBlockScopedDeclaration);
}
function isFunctionScopedDeclaration(token) {
    const role = token.identifierRole;
    return (role === IdentifierRole.FunctionScopedDeclaration ||
        role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration);
}
// Object type used to represent tokens. Note that normally, tokens
// simply exist as properties on the parser object. This is only
// used for the onToken callback and the external tokenizer.
class Token {
    constructor() {
        this.type = state.type;
        this.contextualKeyword = state.contextualKeyword;
        this.start = state.start;
        this.end = state.end;
        this.scopeDepth = state.scopeDepth;
        this.isType = state.isType;
        this.identifierRole = null;
        this.shadowsGlobal = false;
        this.isAsyncOperation = false;
        this.contextId = null;
        this.rhsEndIndex = null;
        this.isExpression = false;
        this.numNullishCoalesceStarts = 0;
        this.numNullishCoalesceEnds = 0;
        this.isOptionalChainStart = false;
        this.isOptionalChainEnd = false;
        this.subscriptStartIndex = null;
        this.nullishStartIndex = null;
    }
}
// ## Tokenizer
// Move to the next token
function next() {
    state.tokens.push(new Token());
    nextToken();
}
// Call instead of next when inside a template, since that needs to be handled differently.
function nextTemplateToken() {
    state.tokens.push(new Token());
    state.start = state.pos;
    readTmplToken();
}
// The tokenizer never parses regexes by default. Instead, the parser is responsible for
// instructing it to parse a regex when we see a slash at the start of an expression.
function retokenizeSlashAsRegex() {
    if (state.type === TokenType.assign) {
        --state.pos;
    }
    readRegexp();
}
function pushTypeContext(existingTokensInType) {
    for (let i = state.tokens.length - existingTokensInType; i < state.tokens.length; i++) {
        state.tokens[i].isType = true;
    }
    const oldIsType = state.isType;
    state.isType = true;
    return oldIsType;
}
function popTypeContext(oldIsType) {
    state.isType = oldIsType;
}
function eat(type) {
    if (match(type)) {
        next();
        return true;
    }
    else {
        return false;
    }
}
function match(type) {
    return state.type === type;
}
function lookaheadType() {
    const snapshot = state.snapshot();
    next();
    const type = state.type;
    state.restoreFromSnapshot(snapshot);
    return type;
}
class TypeAndKeyword {
    constructor(type, contextualKeyword) {
        this.type = type;
        this.contextualKeyword = contextualKeyword;
    }
}
function lookaheadTypeAndKeyword() {
    const snapshot = state.snapshot();
    next();
    const type = state.type;
    const contextualKeyword = state.contextualKeyword;
    state.restoreFromSnapshot(snapshot);
    return new TypeAndKeyword(type, contextualKeyword);
}
function nextTokenStart() {
    return nextTokenStartSince(state.pos);
}
function nextTokenStartSince(pos) {
    skipWhiteSpace.lastIndex = pos;
    const skip = skipWhiteSpace.exec(input);
    return pos + skip[0].length;
}
function lookaheadCharCode() {
    return input.charCodeAt(nextTokenStart());
}
// Read a single token, updating the parser object's token-related
// properties.
function nextToken() {
    skipSpace();
    state.start = state.pos;
    if (state.pos >= input.length) {
        const tokens = state.tokens;
        // We normally run past the end a bit, but if we're way past the end, avoid an infinite loop.
        // Also check the token positions rather than the types since sometimes we rewrite the token
        // type to something else.
        if (tokens.length >= 2 &&
            tokens[tokens.length - 1].start >= input.length &&
            tokens[tokens.length - 2].start >= input.length) {
            unexpected("Unexpectedly reached the end of input.");
        }
        finishToken(TokenType.eof);
        return;
    }
    readToken(input.charCodeAt(state.pos));
}
function readToken(code) {
    // Identifier or keyword. '\uXXXX' sequences are allowed in
    // identifiers, so '\' also dispatches to that.
    if (IS_IDENTIFIER_START[code] ||
        code === charCodes.backslash ||
        (code === charCodes.atSign && input.charCodeAt(state.pos + 1) === charCodes.atSign)) {
        readWord();
    }
    else {
        getTokenFromCode(code);
    }
}
function skipBlockComment() {
    while (input.charCodeAt(state.pos) !== charCodes.asterisk ||
        input.charCodeAt(state.pos + 1) !== charCodes.slash) {
        state.pos++;
        if (state.pos > input.length) {
            unexpected("Unterminated comment", state.pos - 2);
            return;
        }
    }
    state.pos += 2;
}
function skipLineComment(startSkip) {
    let ch = input.charCodeAt((state.pos += startSkip));
    if (state.pos < input.length) {
        while (ch !== charCodes.lineFeed &&
            ch !== charCodes.carriageReturn &&
            ch !== charCodes.lineSeparator &&
            ch !== charCodes.paragraphSeparator &&
            ++state.pos < input.length) {
            ch = input.charCodeAt(state.pos);
        }
    }
}
// Called at the start of the parse and after every token. Skips
// whitespace and comments.
function skipSpace() {
    while (state.pos < input.length) {
        const ch = input.charCodeAt(state.pos);
        switch (ch) {
            case charCodes.carriageReturn:
                if (input.charCodeAt(state.pos + 1) === charCodes.lineFeed) {
                    ++state.pos;
                }
            case charCodes.lineFeed:
            case charCodes.lineSeparator:
            case charCodes.paragraphSeparator:
                ++state.pos;
                break;
            case charCodes.slash:
                switch (input.charCodeAt(state.pos + 1)) {
                    case charCodes.asterisk:
                        state.pos += 2;
                        skipBlockComment();
                        break;
                    case charCodes.slash:
                        skipLineComment(2);
                        break;
                    default:
                        return;
                }
                break;
            default:
                if (IS_WHITESPACE[ch]) {
                    ++state.pos;
                }
                else {
                    return;
                }
        }
    }
}
// Called at the end of every token. Sets various fields, and skips the space after the token, so
// that the next one's `start` will point at the right position.
function finishToken(type, contextualKeyword = ContextualKeyword.NONE) {
    state.end = state.pos;
    state.type = type;
    state.contextualKeyword = contextualKeyword;
}
// ### Token reading
// This is the function that is called to fetch the next token. It
// is somewhat obscure, because it works in character codes rather
// than characters, and because operator parsing has been inlined
// into it.
//
// All in the name of speed.
function readToken_dot() {
    const nextChar = input.charCodeAt(state.pos + 1);
    if (nextChar >= charCodes.digit0 && nextChar <= charCodes.digit9) {
        readNumber(true);
        return;
    }
    if (nextChar === charCodes.dot && input.charCodeAt(state.pos + 2) === charCodes.dot) {
        state.pos += 3;
        finishToken(TokenType.ellipsis);
    }
    else {
        ++state.pos;
        finishToken(TokenType.dot);
    }
}
function readToken_slash() {
    const nextChar = input.charCodeAt(state.pos + 1);
    if (nextChar === charCodes.equalsTo) {
        finishOp(TokenType.assign, 2);
    }
    else {
        finishOp(TokenType.slash, 1);
    }
}
function readToken_mult_modulo(code) {
    // '%*'
    let tokenType = code === charCodes.asterisk ? TokenType.star : TokenType.modulo;
    let width = 1;
    let nextChar = input.charCodeAt(state.pos + 1);
    // Exponentiation operator **
    if (code === charCodes.asterisk && nextChar === charCodes.asterisk) {
        width++;
        nextChar = input.charCodeAt(state.pos + 2);
        tokenType = TokenType.exponent;
    }
    // Match *= or %=, disallowing *=> which can be valid in flow.
    if (nextChar === charCodes.equalsTo &&
        input.charCodeAt(state.pos + 2) !== charCodes.greaterThan) {
        width++;
        tokenType = TokenType.assign;
    }
    finishOp(tokenType, width);
}
function readToken_pipe_amp(code) {
    // '|&'
    const nextChar = input.charCodeAt(state.pos + 1);
    if (nextChar === code) {
        if (input.charCodeAt(state.pos + 2) === charCodes.equalsTo) {
            // ||= or &&=
            finishOp(TokenType.assign, 3);
        }
        else {
            // || or &&
            finishOp(code === charCodes.verticalBar ? TokenType.logicalOR : TokenType.logicalAND, 2);
        }
        return;
    }
    if (code === charCodes.verticalBar) {
        // '|>'
        if (nextChar === charCodes.greaterThan) {
            finishOp(TokenType.pipeline, 2);
            return;
        }
        else if (nextChar === charCodes.rightCurlyBrace) {
            // '|}'
            finishOp(TokenType.braceBarR, 2);
            return;
        }
    }
    if (nextChar === charCodes.equalsTo) {
        finishOp(TokenType.assign, 2);
        return;
    }
    finishOp(code === charCodes.verticalBar ? TokenType.bitwiseOR : TokenType.bitwiseAND, 1);
}
function readToken_caret() {
    // '^'
    const nextChar = input.charCodeAt(state.pos + 1);
    if (nextChar === charCodes.equalsTo) {
        finishOp(TokenType.assign, 2);
    }
    else {
        finishOp(TokenType.bitwiseXOR, 1);
    }
}
function readToken_plus_min(code) {
    // '+-'
    const nextChar = input.charCodeAt(state.pos + 1);
    if (nextChar === code) {
        // Tentatively call this a prefix operator, but it might be changed to postfix later.
        finishOp(TokenType.preIncDec, 2);
        return;
    }
    if (nextChar === charCodes.equalsTo) {
        finishOp(TokenType.assign, 2);
    }
    else if (code === charCodes.plusSign) {
        finishOp(TokenType.plus, 1);
    }
    else {
        finishOp(TokenType.minus, 1);
    }
}
// '<>'
function readToken_lt_gt(code) {
    const nextChar = input.charCodeAt(state.pos + 1);
    if (nextChar === code) {
        const size = code === charCodes.greaterThan && input.charCodeAt(state.pos + 2) === charCodes.greaterThan
            ? 3
            : 2;
        if (input.charCodeAt(state.pos + size) === charCodes.equalsTo) {
            finishOp(TokenType.assign, size + 1);
            return;
        }
        // Avoid right-shift for things like Array<Array<string>>.
        if (code === charCodes.greaterThan && state.isType) {
            finishOp(TokenType.greaterThan, 1);
            return;
        }
        finishOp(TokenType.bitShift, size);
        return;
    }
    if (nextChar === charCodes.equalsTo) {
        // <= | >=
        finishOp(TokenType.relationalOrEqual, 2);
    }
    else if (code === charCodes.lessThan) {
        finishOp(TokenType.lessThan, 1);
    }
    else {
        finishOp(TokenType.greaterThan, 1);
    }
}
function readToken_eq_excl(code) {
    // '=!'
    const nextChar = input.charCodeAt(state.pos + 1);
    if (nextChar === charCodes.equalsTo) {
        finishOp(TokenType.equality, input.charCodeAt(state.pos + 2) === charCodes.equalsTo ? 3 : 2);
        return;
    }
    if (code === charCodes.equalsTo && nextChar === charCodes.greaterThan) {
        // '=>'
        state.pos += 2;
        finishToken(TokenType.arrow);
        return;
    }
    finishOp(code === charCodes.equalsTo ? TokenType.eq : TokenType.bang, 1);
}
function readToken_question() {
    // '?'
    const nextChar = input.charCodeAt(state.pos + 1);
    const nextChar2 = input.charCodeAt(state.pos + 2);
    if (nextChar === charCodes.questionMark && !state.isType) {
        if (nextChar2 === charCodes.equalsTo) {
            // '??='
            finishOp(TokenType.assign, 3);
        }
        else {
            // '??'
            finishOp(TokenType.nullishCoalescing, 2);
        }
    }
    else if (nextChar === charCodes.dot &&
        !(nextChar2 >= charCodes.digit0 && nextChar2 <= charCodes.digit9)) {
        // '.' not followed by a number
        state.pos += 2;
        finishToken(TokenType.questionDot);
    }
    else {
        ++state.pos;
        finishToken(TokenType.question);
    }
}
function getTokenFromCode(code) {
    switch (code) {
        case charCodes.numberSign:
            ++state.pos;
            finishToken(TokenType.hash);
            return;
        // The interpretation of a dot depends on whether it is followed
        // by a digit or another two dots.
        case charCodes.dot:
            readToken_dot();
            return;
        // Punctuation tokens.
        case charCodes.leftParenthesis:
            ++state.pos;
            finishToken(TokenType.parenL);
            return;
        case charCodes.rightParenthesis:
            ++state.pos;
            finishToken(TokenType.parenR);
            return;
        case charCodes.semicolon:
            ++state.pos;
            finishToken(TokenType.semi);
            return;
        case charCodes.comma:
            ++state.pos;
            finishToken(TokenType.comma);
            return;
        case charCodes.leftSquareBracket:
            ++state.pos;
            finishToken(TokenType.bracketL);
            return;
        case charCodes.rightSquareBracket:
            ++state.pos;
            finishToken(TokenType.bracketR);
            return;
        case charCodes.leftCurlyBrace:
            ++state.pos;
            finishToken(TokenType.braceL);
            return;
        case charCodes.rightCurlyBrace:
            ++state.pos;
            finishToken(TokenType.braceR);
            return;
        case charCodes.colon:
            if (input.charCodeAt(state.pos + 1) === charCodes.colon) {
                finishOp(TokenType.doubleColon, 2);
            }
            else {
                ++state.pos;
                finishToken(TokenType.colon);
            }
            return;
        case charCodes.questionMark:
            readToken_question();
            return;
        case charCodes.atSign:
            ++state.pos;
            finishToken(TokenType.at);
            return;
        case charCodes.graveAccent:
            ++state.pos;
            finishToken(TokenType.backQuote);
            return;
        case charCodes.digit0: {
            const nextChar = input.charCodeAt(state.pos + 1);
            // '0x', '0X', '0o', '0O', '0b', '0B'
            if (nextChar === charCodes.lowercaseX ||
                nextChar === charCodes.uppercaseX ||
                nextChar === charCodes.lowercaseO ||
                nextChar === charCodes.uppercaseO ||
                nextChar === charCodes.lowercaseB ||
                nextChar === charCodes.uppercaseB) {
                readRadixNumber();
                return;
            }
        }
        // Anything else beginning with a digit is an integer, octal
        // number, or float.
        case charCodes.digit1:
        case charCodes.digit2:
        case charCodes.digit3:
        case charCodes.digit4:
        case charCodes.digit5:
        case charCodes.digit6:
        case charCodes.digit7:
        case charCodes.digit8:
        case charCodes.digit9:
            readNumber(false);
            return;
        // Quotes produce strings.
        case charCodes.quotationMark:
        case charCodes.apostrophe:
            readString(code);
            return;
        // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is
        // often referred to. `finishOp` simply skips the amount of
        // characters it is given as second argument, and returns a token
        // of the type given by its first argument.
        case charCodes.slash:
            readToken_slash();
            return;
        case charCodes.percentSign:
        case charCodes.asterisk:
            readToken_mult_modulo(code);
            return;
        case charCodes.verticalBar:
        case charCodes.ampersand:
            readToken_pipe_amp(code);
            return;
        case charCodes.caret:
            readToken_caret();
            return;
        case charCodes.plusSign:
        case charCodes.dash:
            readToken_plus_min(code);
            return;
        case charCodes.lessThan:
        case charCodes.greaterThan:
            readToken_lt_gt(code);
            return;
        case charCodes.equalsTo:
        case charCodes.exclamationMark:
            readToken_eq_excl(code);
            return;
        case charCodes.tilde:
            finishOp(TokenType.tilde, 1);
            return;
    }
    unexpected(`Unexpected character '${String.fromCharCode(code)}'`, state.pos);
}
function finishOp(type, size) {
    state.pos += size;
    finishToken(type);
}
function readRegexp() {
    const start = state.pos;
    let escaped = false;
    let inClass = false;
    for (;;) {
        if (state.pos >= input.length) {
            unexpected("Unterminated regular expression", start);
            return;
        }
        const code = input.charCodeAt(state.pos);
        if (escaped) {
            escaped = false;
        }
        else {
            if (code === charCodes.leftSquareBracket) {
                inClass = true;
            }
            else if (code === charCodes.rightSquareBracket && inClass) {
                inClass = false;
            }
            else if (code === charCodes.slash && !inClass) {
                break;
            }
            escaped = code === charCodes.backslash;
        }
        ++state.pos;
    }
    ++state.pos;
    // Need to use `skipWord` because '\uXXXX' sequences are allowed here (don't ask).
    skipWord();
    finishToken(TokenType.regexp);
}
// Read an integer. We allow any valid digit, including hex digits, plus numeric separators, and
// stop at any other character.
function readInt() {
    while (true) {
        const code = input.charCodeAt(state.pos);
        if ((code >= charCodes.digit0 && code <= charCodes.digit9) ||
            (code >= charCodes.lowercaseA && code <= charCodes.lowercaseF) ||
            (code >= charCodes.uppercaseA && code <= charCodes.uppercaseF) ||
            code === charCodes.underscore) {
            state.pos++;
        }
        else {
            break;
        }
    }
}
function readRadixNumber() {
    let isBigInt = false;
    const start = state.pos;
    state.pos += 2; // 0x
    readInt();
    const nextChar = input.charCodeAt(state.pos);
    if (nextChar === charCodes.lowercaseN) {
        ++state.pos;
        isBigInt = true;
    }
    else if (nextChar === charCodes.lowercaseM) {
        unexpected("Invalid decimal", start);
    }
    if (isBigInt) {
        finishToken(TokenType.bigint);
        return;
    }
    finishToken(TokenType.num);
}
// Read an integer, octal integer, or floating-point number.
function readNumber(startsWithDot) {
    let isBigInt = false;
    let isDecimal = false;
    if (!startsWithDot) {
        readInt();
    }
    let nextChar = input.charCodeAt(state.pos);
    if (nextChar === charCodes.dot) {
        ++state.pos;
        readInt();
        nextChar = input.charCodeAt(state.pos);
    }
    if (nextChar === charCodes.uppercaseE || nextChar === charCodes.lowercaseE) {
        nextChar = input.charCodeAt(++state.pos);
        if (nextChar === charCodes.plusSign || nextChar === charCodes.dash) {
            ++state.pos;
        }
        readInt();
        nextChar = input.charCodeAt(state.pos);
    }
    if (nextChar === charCodes.lowercaseN) {
        ++state.pos;
        isBigInt = true;
    }
    else if (nextChar === charCodes.lowercaseM) {
        ++state.pos;
        isDecimal = true;
    }
    if (isBigInt) {
        finishToken(TokenType.bigint);
        return;
    }
    if (isDecimal) {
        finishToken(TokenType.decimal);
        return;
    }
    finishToken(TokenType.num);
}
function readString(quote) {
    state.pos++;
    for (;;) {
        if (state.pos >= input.length) {
            unexpected("Unterminated string constant");
            return;
        }
        const ch = input.charCodeAt(state.pos);
        if (ch === charCodes.backslash) {
            state.pos++;
        }
        else if (ch === quote) {
            break;
        }
        state.pos++;
    }
    state.pos++;
    finishToken(TokenType.string);
}
// Reads template string tokens.
function readTmplToken() {
    for (;;) {
        if (state.pos >= input.length) {
            unexpected("Unterminated template");
            return;
        }
        const ch = input.charCodeAt(state.pos);
        if (ch === charCodes.graveAccent ||
            (ch === charCodes.dollarSign && input.charCodeAt(state.pos + 1) === charCodes.leftCurlyBrace)) {
            if (state.pos === state.start && match(TokenType.template)) {
                if (ch === charCodes.dollarSign) {
                    state.pos += 2;
                    finishToken(TokenType.dollarBraceL);
                    return;
                }
                else {
                    ++state.pos;
                    finishToken(TokenType.backQuote);
                    return;
                }
            }
            finishToken(TokenType.template);
            return;
        }
        if (ch === charCodes.backslash) {
            state.pos++;
        }
        state.pos++;
    }
}
// Skip to the end of the current word. Note that this is the same as the snippet at the end of
// readWord, but calling skipWord from readWord seems to slightly hurt performance from some rough
// measurements.
function skipWord() {
    while (state.pos < input.length) {
        const ch = input.charCodeAt(state.pos);
        if (IS_IDENTIFIER_CHAR[ch]) {
            state.pos++;
        }
        else if (ch === charCodes.backslash) {
            // \u
            state.pos += 2;
            if (input.charCodeAt(state.pos) === charCodes.leftCurlyBrace) {
                while (state.pos < input.length &&
                    input.charCodeAt(state.pos) !== charCodes.rightCurlyBrace) {
                    state.pos++;
                }
                state.pos++;
            }
        }
        else {
            break;
        }
    }
}

/**
 * Traverse the given tokens and modify them if necessary to indicate that some names shadow global
 * variables.
 */
function identifyShadowedGlobals(tokens, scopes, globalNames) {
    if (!hasShadowedGlobals(tokens, globalNames)) {
        return;
    }
    markShadowedGlobals(tokens, scopes, globalNames);
}
/**
 * We can do a fast up-front check to see if there are any declarations to global names. If not,
 * then there's no point in computing scope assignments.
 */
// Exported for testing.
function hasShadowedGlobals(tokens, globalNames) {
    for (const token of tokens.tokens) {
        if (token.type === TokenType.name &&
            isNonTopLevelDeclaration(token) &&
            globalNames.has(tokens.identifierNameForToken(token))) {
            return true;
        }
    }
    return false;
}
function markShadowedGlobals(tokens, scopes, globalNames) {
    const scopeStack = [];
    let scopeIndex = scopes.length - 1;
    // Scopes were generated at completion time, so they're sorted by end index, so we can maintain a
    // good stack by going backwards through them.
    for (let i = tokens.tokens.length - 1;; i--) {
        while (scopeStack.length > 0 && scopeStack[scopeStack.length - 1].startTokenIndex === i + 1) {
            scopeStack.pop();
        }
        while (scopeIndex >= 0 && scopes[scopeIndex].endTokenIndex === i + 1) {
            scopeStack.push(scopes[scopeIndex]);
            scopeIndex--;
        }
        // Process scopes after the last iteration so we can make sure we pop all of them.
        if (i < 0) {
            break;
        }
        const token = tokens.tokens[i];
        const name = tokens.identifierNameForToken(token);
        if (scopeStack.length > 1 && token.type === TokenType.name && globalNames.has(name)) {
            if (isBlockScopedDeclaration(token)) {
                markShadowedForScope(scopeStack[scopeStack.length - 1], tokens, name);
            }
            else if (isFunctionScopedDeclaration(token)) {
                let stackIndex = scopeStack.length - 1;
                while (stackIndex > 0 && !scopeStack[stackIndex].isFunctionScope) {
                    stackIndex--;
                }
                if (stackIndex < 0) {
                    throw new Error("Did not find parent function scope.");
                }
                markShadowedForScope(scopeStack[stackIndex], tokens, name);
            }
        }
    }
    if (scopeStack.length > 0) {
        throw new Error("Expected empty scope stack after processing file.");
    }
}
function markShadowedForScope(scope, tokens, name) {
    for (let i = scope.startTokenIndex; i < scope.endTokenIndex; i++) {
        const token = tokens.tokens[i];
        if (token.type === TokenType.name && tokens.identifierNameForToken(token) === name) {
            token.shadowsGlobal = true;
        }
    }
}

/**
 * Get all identifier names in the code, in order, including duplicates.
 */
function getIdentifierNames(code, tokens) {
    const names = [];
    for (const token of tokens) {
        if (token.type === TokenType.name) {
            names.push(code.slice(token.start, token.end));
        }
    }
    return names;
}

class NameManager {
    constructor(code, tokens) {
        this.usedNames = new Set();
        this.usedNames = new Set(getIdentifierNames(code, tokens));
    }
    claimFreeName(name) {
        const newName = this.findFreeName(name);
        this.usedNames.add(newName);
        return newName;
    }
    findFreeName(name) {
        if (!this.usedNames.has(name)) {
            return name;
        }
        let suffixNum = 2;
        while (this.usedNames.has(name + String(suffixNum))) {
            suffixNum++;
        }
        return name + String(suffixNum);
    }
}

// Reads inline JSX contents token.
function jsxReadToken() {
    for (;;) {
        if (state.pos >= input.length) {
            unexpected("Unterminated JSX contents");
            return;
        }
        const ch = input.charCodeAt(state.pos);
        switch (ch) {
            case charCodes.lessThan:
            case charCodes.leftCurlyBrace:
                if (state.pos === state.start) {
                    if (ch === charCodes.lessThan) {
                        state.pos++;
                        finishToken(TokenType.jsxTagStart);
                        return;
                    }
                    getTokenFromCode(ch);
                    return;
                }
                finishToken(TokenType.jsxText);
                return;
            default:
                state.pos++;
        }
    }
}
function jsxReadString(quote) {
    state.pos++;
    for (;;) {
        if (state.pos >= input.length) {
            unexpected("Unterminated string constant");
            return;
        }
        const ch = input.charCodeAt(state.pos);
        if (ch === quote) {
            state.pos++;
            break;
        }
        state.pos++;
    }
    finishToken(TokenType.string);
}
// Read a JSX identifier (valid tag or attribute name).
//
// Optimized version since JSX identifiers can't contain
// escape characters and so can be read as single slice.
// Also assumes that first character was already checked
// by isIdentifierStart in readToken.
function jsxReadWord() {
    let ch;
    do {
        if (state.pos > input.length) {
            unexpected("Unexpectedly reached the end of input.");
            return;
        }
        ch = input.charCodeAt(++state.pos);
    } while (IS_IDENTIFIER_CHAR[ch] || ch === charCodes.dash);
    finishToken(TokenType.jsxName);
}
// Parse next token as JSX identifier
function jsxParseIdentifier() {
    nextJSXTagToken();
}
// Parse namespaced identifier.
function jsxParseNamespacedName(identifierRole) {
    jsxParseIdentifier();
    if (!eat(TokenType.colon)) {
        // Plain identifier, so this is an access.
        state.tokens[state.tokens.length - 1].identifierRole = identifierRole;
        return;
    }
    // Process the second half of the namespaced name.
    jsxParseIdentifier();
}
// Parses element name in any form - namespaced, member
// or single identifier.
function jsxParseElementName() {
    jsxParseNamespacedName(IdentifierRole.Access);
    while (match(TokenType.dot)) {
        nextJSXTagToken();
        jsxParseIdentifier();
    }
}
// Parses any type of JSX attribute value.
function jsxParseAttributeValue() {
    switch (state.type) {
        case TokenType.braceL:
            next();
            jsxParseExpressionContainer();
            nextJSXTagToken();
            return;
        case TokenType.jsxTagStart:
            jsxParseElement();
            nextJSXTagToken();
            return;
        case TokenType.string:
            nextJSXTagToken();
            return;
        default:
            unexpected("JSX value should be either an expression or a quoted JSX text");
    }
}
// Parse JSX spread child, after already processing the {
// Does not parse the closing }
function jsxParseSpreadChild() {
    expect(TokenType.ellipsis);
    parseExpression();
}
// Parses JSX expression enclosed into curly brackets, after already processing the {
// Does not parse the closing }
function jsxParseExpressionContainer() {
    if (match(TokenType.braceR)) ;
    else {
        parseExpression();
    }
}
// Parses following JSX attribute name-value pair.
function jsxParseAttribute() {
    if (eat(TokenType.braceL)) {
        expect(TokenType.ellipsis);
        parseMaybeAssign();
        // }
        nextJSXTagToken();
        return;
    }
    jsxParseNamespacedName(IdentifierRole.ObjectKey);
    if (match(TokenType.eq)) {
        nextJSXTagToken();
        jsxParseAttributeValue();
    }
}
// Parses JSX opening tag starting after "<".
// Returns true if the tag was self-closing.
// Does not parse the last token.
function jsxParseOpeningElement() {
    if (match(TokenType.jsxTagEnd)) {
        // This is an open-fragment.
        return false;
    }
    jsxParseElementName();
    tsTryParseJSXTypeArgument();
    while (!match(TokenType.slash) && !match(TokenType.jsxTagEnd) && !state.error) {
        jsxParseAttribute();
    }
    const isSelfClosing = match(TokenType.slash);
    if (isSelfClosing) {
        // /
        nextJSXTagToken();
    }
    return isSelfClosing;
}
// Parses JSX closing tag starting after "</".
// Does not parse the last token.
function jsxParseClosingElement() {
    if (match(TokenType.jsxTagEnd)) {
        // Fragment syntax, so we immediately have a tag end.
        return;
    }
    jsxParseElementName();
}
// Parses entire JSX element, including its opening tag
// (starting after "<"), attributes, contents and closing tag.
// Does not parse the last token.
function jsxParseElementAt() {
    const isSelfClosing = jsxParseOpeningElement();
    if (!isSelfClosing) {
        nextJSXExprToken();
        while (true) {
            switch (state.type) {
                case TokenType.jsxTagStart:
                    nextJSXTagToken();
                    if (match(TokenType.slash)) {
                        nextJSXTagToken();
                        jsxParseClosingElement();
                        return;
                    }
                    jsxParseElementAt();
                    nextJSXExprToken();
                    break;
                case TokenType.jsxText:
                    nextJSXExprToken();
                    break;
                case TokenType.braceL:
                    next();
                    if (match(TokenType.ellipsis)) {
                        jsxParseSpreadChild();
                        nextJSXExprToken();
                    }
                    else {
                        jsxParseExpressionContainer();
                        nextJSXExprToken();
                    }
                    break;
                // istanbul ignore next - should never happen
                default:
                    unexpected();
                    return;
            }
        }
    }
}
// Parses entire JSX element from current position.
// Does not parse the last token.
function jsxParseElement() {
    nextJSXTagToken();
    jsxParseElementAt();
}
// ==================================
// Overrides
// ==================================
function nextJSXTagToken() {
    state.tokens.push(new Token());
    skipSpace();
    state.start = state.pos;
    const code = input.charCodeAt(state.pos);
    if (IS_IDENTIFIER_START[code]) {
        jsxReadWord();
    }
    else if (code === charCodes.quotationMark || code === charCodes.apostrophe) {
        jsxReadString(code);
    }
    else {
        // The following tokens are just one character each.
        ++state.pos;
        switch (code) {
            case charCodes.greaterThan:
                finishToken(TokenType.jsxTagEnd);
                break;
            case charCodes.lessThan:
                finishToken(TokenType.jsxTagStart);
                break;
            case charCodes.slash:
                finishToken(TokenType.slash);
                break;
            case charCodes.equalsTo:
                finishToken(TokenType.eq);
                break;
            case charCodes.leftCurlyBrace:
                finishToken(TokenType.braceL);
                break;
            case charCodes.dot:
                finishToken(TokenType.dot);
                break;
            case charCodes.colon:
                finishToken(TokenType.colon);
                break;
            default:
                unexpected();
        }
    }
}
function nextJSXExprToken() {
    state.tokens.push(new Token());
    state.start = state.pos;
    jsxReadToken();
}

/**
 * Common parser code for TypeScript and Flow.
 */
// An apparent conditional expression could actually be an optional parameter in an arrow function.
function typedParseConditional(noIn) {
    // If we see ?:, this can't possibly be a valid conditional. typedParseParenItem will be called
    // later to finish off the arrow parameter. We also need to handle bare ? tokens for optional
    // parameters without type annotations, i.e. ?, and ?) .
    if (match(TokenType.question)) {
        const nextType = lookaheadType();
        if (nextType === TokenType.colon || nextType === TokenType.comma || nextType === TokenType.parenR) {
            return;
        }
    }
    baseParseConditional(noIn);
}
// Note: These "type casts" are *not* valid TS expressions.
// But we parse them here and change them when completing the arrow function.
function typedParseParenItem() {
    if (eat(TokenType.question)) {
        state.tokens[state.tokens.length - 1].isType = true;
    }
    if (match(TokenType.colon)) {
        tsParseTypeAnnotation();
    }
}

function parseSpread() {
    next();
    parseMaybeAssign(false);
}
function parseRest(isBlockScope) {
    next();
    parseBindingAtom(isBlockScope);
}
function parseBindingIdentifier(isBlockScope) {
    parseIdentifier();
    markPriorBindingIdentifier(isBlockScope);
}
function parseImportedIdentifier() {
    parseIdentifier();
    state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ImportDeclaration;
}
function markPriorBindingIdentifier(isBlockScope) {
    let identifierRole;
    if (state.scopeDepth === 0) {
        identifierRole = IdentifierRole.TopLevelDeclaration;
    }
    else if (isBlockScope) {
        identifierRole = IdentifierRole.BlockScopedDeclaration;
    }
    else {
        identifierRole = IdentifierRole.FunctionScopedDeclaration;
    }
    state.tokens[state.tokens.length - 1].identifierRole = identifierRole;
}
// Parses lvalue (assignable) atom.
function parseBindingAtom(isBlockScope) {
    switch (state.type) {
        case TokenType._this: {
            // In TypeScript, "this" may be the name of a parameter, so allow it.
            const oldIsType = pushTypeContext(0);
            next();
            popTypeContext(oldIsType);
            return;
        }
        case TokenType._yield:
        case TokenType.name: {
            state.type = TokenType.name;
            parseBindingIdentifier(isBlockScope);
            return;
        }
        case TokenType.bracketL: {
            next();
            parseBindingList(TokenType.bracketR, isBlockScope, true /* allowEmpty */);
            return;
        }
        case TokenType.braceL:
            parseObj(true, isBlockScope);
            return;
        default:
            unexpected();
    }
}
function parseBindingList(close, isBlockScope, allowEmpty = false, allowModifiers = false, contextId = 0) {
    let first = true;
    let hasRemovedComma = false;
    const firstItemTokenIndex = state.tokens.length;
    while (!eat(close) && !state.error) {
        if (first) {
            first = false;
        }
        else {
            expect(TokenType.comma);
            state.tokens[state.tokens.length - 1].contextId = contextId;
            // After a "this" type in TypeScript, we need to set the following comma (if any) to also be
            // a type token so that it will be removed.
            if (!hasRemovedComma && state.tokens[firstItemTokenIndex].isType) {
                state.tokens[state.tokens.length - 1].isType = true;
                hasRemovedComma = true;
            }
        }
        if (allowEmpty && match(TokenType.comma)) ;
        else if (eat(close)) {
            break;
        }
        else if (match(TokenType.ellipsis)) {
            parseRest(isBlockScope);
            parseAssignableListItemTypes();
            // Support rest element trailing commas allowed by TypeScript <2.9.
            eat(TokenType.comma);
            expect(close);
            break;
        }
        else {
            parseAssignableListItem(allowModifiers, isBlockScope);
        }
    }
}
function parseAssignableListItem(allowModifiers, isBlockScope) {
    if (allowModifiers) {
        tsParseAccessModifier();
        tsParseModifier([ContextualKeyword._readonly]);
    }
    parseMaybeDefault(isBlockScope);
    parseAssignableListItemTypes();
    parseMaybeDefault(isBlockScope, true /* leftAlreadyParsed */);
}
function parseAssignableListItemTypes() {
    tsParseAssignableListItemTypes();
}
// Parses assignment pattern around given atom if possible.
function parseMaybeDefault(isBlockScope, leftAlreadyParsed = false) {
    if (!leftAlreadyParsed) {
        parseBindingAtom(isBlockScope);
    }
    if (!eat(TokenType.eq)) {
        return;
    }
    const eqIndex = state.tokens.length - 1;
    parseMaybeAssign();
    state.tokens[eqIndex].rhsEndIndex = state.tokens.length;
}

/* eslint max-len: 0 */
class StopState {
    constructor(stop) {
        this.stop = stop;
    }
}
// ### Expression parsing
// These nest, from the most general expression type at the top to
// 'atomic', nondivisible expression types at the bottom. Most of
// the functions will simply let the function (s) below them parse,
// and, *if* the syntactic construct they handle is present, wrap
// the AST node that the inner parser gave them in another node.
function parseExpression(noIn = false) {
    parseMaybeAssign(noIn);
    if (match(TokenType.comma)) {
        while (eat(TokenType.comma)) {
            parseMaybeAssign(noIn);
        }
    }
}
/**
 * noIn is used when parsing a for loop so that we don't interpret a following "in" as the binary
 * operatior.
 * isWithinParens is used to indicate that we're parsing something that might be a comma expression
 * or might be an arrow function or might be a Flow type assertion (which requires explicit parens).
 * In these cases, we should allow : and ?: after the initial "left" part.
 */
function parseMaybeAssign(noIn = false, isWithinParens = false) {
    return tsParseMaybeAssign(noIn, isWithinParens);
}
// Parse an assignment expression. This includes applications of
// operators like `+=`.
// Returns true if the expression was an arrow function.
function baseParseMaybeAssign(noIn, isWithinParens) {
    if (match(TokenType._yield)) {
        parseYield();
        return false;
    }
    if (match(TokenType.parenL) || match(TokenType.name) || match(TokenType._yield)) {
        state.potentialArrowAt = state.start;
    }
    const wasArrow = parseMaybeConditional(noIn);
    if (isWithinParens) {
        parseParenItem();
    }
    if (state.type & TokenType.IS_ASSIGN) {
        next();
        parseMaybeAssign(noIn);
        return false;
    }
    return wasArrow;
}
// Parse a ternary conditional (`?:`) operator.
// Returns true if the expression was an arrow function.
function parseMaybeConditional(noIn) {
    const wasArrow = parseExprOps(noIn);
    if (wasArrow) {
        return true;
    }
    parseConditional(noIn);
    return false;
}
function parseConditional(noIn) {
    typedParseConditional(noIn);
}
function baseParseConditional(noIn) {
    if (eat(TokenType.question)) {
        parseMaybeAssign();
        expect(TokenType.colon);
        parseMaybeAssign(noIn);
    }
}
// Start the precedence parser.
// Returns true if this was an arrow function
function parseExprOps(noIn) {
    const startTokenIndex = state.tokens.length;
    const wasArrow = parseMaybeUnary();
    if (wasArrow) {
        return true;
    }
    parseExprOp(startTokenIndex, -1, noIn);
    return false;
}
// Parse binary operators with the operator precedence parsing
// algorithm. `left` is the left-hand side of the operator.
// `minPrec` provides context that allows the function to stop and
// defer further parser to one of its callers when it encounters an
// operator that has a lower precedence than the set it is parsing.
function parseExprOp(startTokenIndex, minPrec, noIn) {
    if ((TokenType._in & TokenType.PRECEDENCE_MASK) > minPrec &&
        !hasPrecedingLineBreak() &&
        eatContextual(ContextualKeyword._as)) {
        state.tokens[state.tokens.length - 1].type = TokenType._as;
        const oldIsType = pushTypeContext(1);
        tsParseType();
        popTypeContext(oldIsType);
        parseExprOp(startTokenIndex, minPrec, noIn);
        return;
    }
    const prec = state.type & TokenType.PRECEDENCE_MASK;
    if (prec > 0 && (!noIn || !match(TokenType._in))) {
        if (prec > minPrec) {
            const op = state.type;
            next();
            if (op === TokenType.nullishCoalescing) {
                state.tokens[state.tokens.length - 1].nullishStartIndex = startTokenIndex;
            }
            const rhsStartTokenIndex = state.tokens.length;
            parseMaybeUnary();
            // Extend the right operand of this operator if possible.
            parseExprOp(rhsStartTokenIndex, op & TokenType.IS_RIGHT_ASSOCIATIVE ? prec - 1 : prec, noIn);
            if (op === TokenType.nullishCoalescing) {
                state.tokens[startTokenIndex].numNullishCoalesceStarts++;
                state.tokens[state.tokens.length - 1].numNullishCoalesceEnds++;
            }
            // Continue with any future operator holding this expression as the left operand.
            parseExprOp(startTokenIndex, minPrec, noIn);
        }
    }
}
// Parse unary operators, both prefix and postfix.
// Returns true if this was an arrow function.
function parseMaybeUnary() {
    if (!isJSXEnabled && eat(TokenType.lessThan)) {
        tsParseTypeAssertion();
        return false;
    }
    if (state.type & TokenType.IS_PREFIX) {
        next();
        parseMaybeUnary();
        return false;
    }
    const wasArrow = parseExprSubscripts();
    if (wasArrow) {
        return true;
    }
    while (state.type & TokenType.IS_POSTFIX && !canInsertSemicolon()) {
        // The tokenizer calls everything a preincrement, so make it a postincrement when
        // we see it in that context.
        if (state.type === TokenType.preIncDec) {
            state.type = TokenType.postIncDec;
        }
        next();
    }
    return false;
}
// Parse call, dot, and `[]`-subscript expressions.
// Returns true if this was an arrow function.
function parseExprSubscripts() {
    const startTokenIndex = state.tokens.length;
    const wasArrow = parseExprAtom();
    if (wasArrow) {
        return true;
    }
    parseSubscripts(startTokenIndex);
    // If there was any optional chain operation, the start token would be marked
    // as such, so also mark the end now.
    if (state.tokens.length > startTokenIndex && state.tokens[startTokenIndex].isOptionalChainStart) {
        state.tokens[state.tokens.length - 1].isOptionalChainEnd = true;
    }
    return false;
}
function parseSubscripts(startTokenIndex, noCalls = false) {
    baseParseSubscripts(startTokenIndex, noCalls);
}
function baseParseSubscripts(startTokenIndex, noCalls = false) {
    const stopState = new StopState(false);
    do {
        parseSubscript(startTokenIndex, noCalls, stopState);
    } while (!stopState.stop && !state.error);
}
function parseSubscript(startTokenIndex, noCalls, stopState) {
    tsParseSubscript(startTokenIndex, noCalls, stopState);
}
/** Set 'state.stop = true' to indicate that we should stop parsing subscripts. */
function baseParseSubscript(startTokenIndex, noCalls, stopState) {
    if (!noCalls && eat(TokenType.doubleColon)) {
        parseNoCallExpr();
        stopState.stop = true;
        // Propagate startTokenIndex so that `a::b?.()` will keep `a` as the first token. We may want
        // to revisit this in the future when fully supporting bind syntax.
        parseSubscripts(startTokenIndex, noCalls);
    }
    else if (match(TokenType.questionDot)) {
        state.tokens[startTokenIndex].isOptionalChainStart = true;
        if (noCalls && lookaheadType() === TokenType.parenL) {
            stopState.stop = true;
            return;
        }
        next();
        state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;
        if (eat(TokenType.bracketL)) {
            parseExpression();
            expect(TokenType.bracketR);
        }
        else if (eat(TokenType.parenL)) {
            parseCallExpressionArguments();
        }
        else {
            parseMaybePrivateName();
        }
    }
    else if (eat(TokenType.dot)) {
        state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;
        parseMaybePrivateName();
    }
    else if (eat(TokenType.bracketL)) {
        state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;
        parseExpression();
        expect(TokenType.bracketR);
    }
    else if (!noCalls && match(TokenType.parenL)) {
        if (atPossibleAsync()) {
            // We see "async", but it's possible it's a usage of the name "async". Parse as if it's a
            // function call, and if we see an arrow later, backtrack and re-parse as a parameter list.
            const snapshot = state.snapshot();
            const asyncStartTokenIndex = state.tokens.length;
            next();
            state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;
            const callContextId = getNextContextId();
            state.tokens[state.tokens.length - 1].contextId = callContextId;
            parseCallExpressionArguments();
            state.tokens[state.tokens.length - 1].contextId = callContextId;
            if (shouldParseAsyncArrow()) {
                // We hit an arrow, so backtrack and start again parsing function parameters.
                state.restoreFromSnapshot(snapshot);
                stopState.stop = true;
                state.scopeDepth++;
                parseFunctionParams();
                parseAsyncArrowFromCallExpression(asyncStartTokenIndex);
            }
        }
        else {
            next();
            state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;
            const callContextId = getNextContextId();
            state.tokens[state.tokens.length - 1].contextId = callContextId;
            parseCallExpressionArguments();
            state.tokens[state.tokens.length - 1].contextId = callContextId;
        }
    }
    else if (match(TokenType.backQuote)) {
        // Tagged template expression.
        parseTemplate();
    }
    else {
        stopState.stop = true;
    }
}
function atPossibleAsync() {
    // This was made less strict than the original version to avoid passing around nodes, but it
    // should be safe to have rare false positives here.
    return (state.tokens[state.tokens.length - 1].contextualKeyword === ContextualKeyword._async &&
        !canInsertSemicolon());
}
function parseCallExpressionArguments() {
    let first = true;
    while (!eat(TokenType.parenR) && !state.error) {
        if (first) {
            first = false;
        }
        else {
            expect(TokenType.comma);
            if (eat(TokenType.parenR)) {
                break;
            }
        }
        parseExprListItem(false);
    }
}
function shouldParseAsyncArrow() {
    return match(TokenType.colon) || match(TokenType.arrow);
}
function parseAsyncArrowFromCallExpression(startTokenIndex) {
    tsStartParseAsyncArrowFromCallExpression();
    expect(TokenType.arrow);
    parseArrowExpression(startTokenIndex);
}
// Parse a no-call expression (like argument of `new` or `::` operators).
function parseNoCallExpr() {
    const startTokenIndex = state.tokens.length;
    parseExprAtom();
    parseSubscripts(startTokenIndex, true);
}
// Parse an atomic expression — either a single token that is an
// expression, an expression started by a keyword like `function` or
// `new`, or an expression wrapped in punctuation like `()`, `[]`,
// or `{}`.
// Returns true if the parsed expression was an arrow function.
function parseExprAtom() {
    if (eat(TokenType.modulo)) {
        // V8 intrinsic expression. Just parse the identifier, and the function invocation is parsed
        // naturally.
        parseIdentifier();
        return false;
    }
    if (match(TokenType.jsxText)) {
        parseLiteral();
        return false;
    }
    else if (match(TokenType.lessThan) && isJSXEnabled) {
        state.type = TokenType.jsxTagStart;
        jsxParseElement();
        next();
        return false;
    }
    const canBeArrow = state.potentialArrowAt === state.start;
    switch (state.type) {
        case TokenType.slash:
        case TokenType.assign:
            retokenizeSlashAsRegex();
        // Fall through.
        case TokenType._super:
        case TokenType._this:
        case TokenType.regexp:
        case TokenType.num:
        case TokenType.bigint:
        case TokenType.decimal:
        case TokenType.string:
        case TokenType._null:
        case TokenType._true:
        case TokenType._false:
            next();
            return false;
        case TokenType._import:
            next();
            if (match(TokenType.dot)) {
                // import.meta
                state.tokens[state.tokens.length - 1].type = TokenType.name;
                next();
                parseIdentifier();
            }
            return false;
        case TokenType.name: {
            const startTokenIndex = state.tokens.length;
            const functionStart = state.start;
            const contextualKeyword = state.contextualKeyword;
            parseIdentifier();
            if (contextualKeyword === ContextualKeyword._await) {
                parseAwait();
                return false;
            }
            else if (contextualKeyword === ContextualKeyword._async &&
                match(TokenType._function) &&
                !canInsertSemicolon()) {
                next();
                parseFunction(functionStart, false);
                return false;
            }
            else if (canBeArrow &&
                !canInsertSemicolon() &&
                contextualKeyword === ContextualKeyword._async &&
                match(TokenType.name)) {
                state.scopeDepth++;
                parseBindingIdentifier(false);
                expect(TokenType.arrow);
                // let foo = async bar => {};
                parseArrowExpression(startTokenIndex);
                return true;
            }
            if (canBeArrow && !canInsertSemicolon() && match(TokenType.arrow)) {
                state.scopeDepth++;
                markPriorBindingIdentifier(false);
                expect(TokenType.arrow);
                parseArrowExpression(startTokenIndex);
                return true;
            }
            state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.Access;
            return false;
        }
        case TokenType._do: {
            next();
            parseBlock();
            return false;
        }
        case TokenType.parenL: {
            const wasArrow = parseParenAndDistinguishExpression(canBeArrow);
            return wasArrow;
        }
        case TokenType.bracketL:
            next();
            parseExprList(TokenType.bracketR, true);
            return false;
        case TokenType.braceL:
            parseObj(false, false);
            return false;
        case TokenType._function:
            parseFunctionExpression();
            return false;
        case TokenType.at:
            parseDecorators();
        // Fall through.
        case TokenType._class:
            parseClass(false);
            return false;
        case TokenType._new:
            parseNew();
            return false;
        case TokenType.backQuote:
            parseTemplate();
            return false;
        case TokenType.doubleColon: {
            next();
            parseNoCallExpr();
            return false;
        }
        case TokenType.hash: {
            const code = lookaheadCharCode();
            if (IS_IDENTIFIER_START[code] || code === charCodes.backslash) {
                parseMaybePrivateName();
            }
            else {
                next();
            }
            // Smart pipeline topic reference.
            return false;
        }
        default:
            unexpected();
            return false;
    }
}
function parseMaybePrivateName() {
    eat(TokenType.hash);
    parseIdentifier();
}
function parseFunctionExpression() {
    const functionStart = state.start;
    parseIdentifier();
    if (eat(TokenType.dot)) {
        // function.sent
        parseIdentifier();
    }
    parseFunction(functionStart, false);
}
function parseLiteral() {
    next();
}
function parseParenExpression() {
    expect(TokenType.parenL);
    parseExpression();
    expect(TokenType.parenR);
}
// Returns true if this was an arrow expression.
function parseParenAndDistinguishExpression(canBeArrow) {
    // Assume this is a normal parenthesized expression, but if we see an arrow, we'll bail and
    // start over as a parameter list.
    const snapshot = state.snapshot();
    const startTokenIndex = state.tokens.length;
    expect(TokenType.parenL);
    let first = true;
    while (!match(TokenType.parenR) && !state.error) {
        if (first) {
            first = false;
        }
        else {
            expect(TokenType.comma);
            if (match(TokenType.parenR)) {
                break;
            }
        }
        if (match(TokenType.ellipsis)) {
            parseRest(false /* isBlockScope */);
            parseParenItem();
            break;
        }
        else {
            parseMaybeAssign(false, true);
        }
    }
    expect(TokenType.parenR);
    if (canBeArrow && shouldParseArrow()) {
        const wasArrow = parseArrow();
        if (wasArrow) {
            // It was an arrow function this whole time, so start over and parse it as params so that we
            // get proper token annotations.
            state.restoreFromSnapshot(snapshot);
            state.scopeDepth++;
            // Don't specify a context ID because arrow functions don't need a context ID.
            parseFunctionParams();
            parseArrow();
            parseArrowExpression(startTokenIndex);
            return true;
        }
    }
    return false;
}
function shouldParseArrow() {
    return match(TokenType.colon) || !canInsertSemicolon();
}
// Returns whether there was an arrow token.
function parseArrow() {
    return tsParseArrow();
}
function parseParenItem() {
    typedParseParenItem();
}
// New's precedence is slightly tricky. It must allow its argument to
// be a `[]` or dot subscript expression, but not a call — at least,
// not without wrapping it in parentheses. Thus, it uses the noCalls
// argument to parseSubscripts to prevent it from consuming the
// argument list.
function parseNew() {
    expect(TokenType._new);
    if (eat(TokenType.dot)) {
        // new.target
        parseIdentifier();
        return;
    }
    parseNoCallExpr();
    eat(TokenType.questionDot);
    parseNewArguments();
}
function parseNewArguments() {
    tsStartParseNewArguments();
    if (eat(TokenType.parenL)) {
        parseExprList(TokenType.parenR);
    }
}
function parseTemplate() {
    // Finish `, read quasi
    nextTemplateToken();
    // Finish quasi, read ${
    nextTemplateToken();
    while (!match(TokenType.backQuote) && !state.error) {
        expect(TokenType.dollarBraceL);
        parseExpression();
        // Finish }, read quasi
        nextTemplateToken();
        // Finish quasi, read either ${ or `
        nextTemplateToken();
    }
    next();
}
// Parse an object literal or binding pattern.
function parseObj(isPattern, isBlockScope) {
    // Attach a context ID to the object open and close brace and each object key.
    const contextId = getNextContextId();
    let first = true;
    next();
    state.tokens[state.tokens.length - 1].contextId = contextId;
    while (!eat(TokenType.braceR) && !state.error) {
        if (first) {
            first = false;
        }
        else {
            expect(TokenType.comma);
            if (eat(TokenType.braceR)) {
                break;
            }
        }
        let isGenerator = false;
        if (match(TokenType.ellipsis)) {
            const previousIndex = state.tokens.length;
            parseSpread();
            if (isPattern) {
                // Mark role when the only thing being spread over is an identifier.
                if (state.tokens.length === previousIndex + 2) {
                    markPriorBindingIdentifier(isBlockScope);
                }
                if (eat(TokenType.braceR)) {
                    break;
                }
            }
            continue;
        }
        if (!isPattern) {
            isGenerator = eat(TokenType.star);
        }
        if (!isPattern && isContextual(ContextualKeyword._async)) {
            if (isGenerator)
                unexpected();
            parseIdentifier();
            if (match(TokenType.colon) ||
                match(TokenType.parenL) ||
                match(TokenType.braceR) ||
                match(TokenType.eq) ||
                match(TokenType.comma)) ;
            else {
                if (match(TokenType.star)) {
                    next();
                    isGenerator = true;
                }
                parsePropertyName(contextId);
            }
        }
        else {
            parsePropertyName(contextId);
        }
        parseObjPropValue(isPattern, isBlockScope, contextId);
    }
    state.tokens[state.tokens.length - 1].contextId = contextId;
}
function isGetterOrSetterMethod(isPattern) {
    // We go off of the next and don't bother checking if the node key is actually "get" or "set".
    // This lets us avoid generating a node, and should only make the validation worse.
    return (!isPattern &&
        (match(TokenType.string) || // get "string"() {}
            match(TokenType.num) || // get 1() {}
            match(TokenType.bracketL) || // get ["string"]() {}
            match(TokenType.name) || // get foo() {}
            !!(state.type & TokenType.IS_KEYWORD)) // get debugger() {}
    );
}
// Returns true if this was a method.
function parseObjectMethod(isPattern, objectContextId) {
    // We don't need to worry about modifiers because object methods can't have optional bodies, so
    // the start will never be used.
    const functionStart = state.start;
    if (match(TokenType.parenL)) {
        if (isPattern)
            unexpected();
        parseMethod(functionStart, /* isConstructor */ false);
        return true;
    }
    if (isGetterOrSetterMethod(isPattern)) {
        parsePropertyName(objectContextId);
        parseMethod(functionStart, /* isConstructor */ false);
        return true;
    }
    return false;
}
function parseObjectProperty(isPattern, isBlockScope) {
    if (eat(TokenType.colon)) {
        if (isPattern) {
            parseMaybeDefault(isBlockScope);
        }
        else {
            parseMaybeAssign(false);
        }
        return;
    }
    // Since there's no colon, we assume this is an object shorthand.
    // If we're in a destructuring, we've now discovered that the key was actually an assignee, so
    // we need to tag it as a declaration with the appropriate scope. Otherwise, we might need to
    // transform it on access, so mark it as a normal object shorthand.
    let identifierRole;
    if (isPattern) {
        if (state.scopeDepth === 0) {
            identifierRole = IdentifierRole.ObjectShorthandTopLevelDeclaration;
        }
        else if (isBlockScope) {
            identifierRole = IdentifierRole.ObjectShorthandBlockScopedDeclaration;
        }
        else {
            identifierRole = IdentifierRole.ObjectShorthandFunctionScopedDeclaration;
        }
    }
    else {
        identifierRole = IdentifierRole.ObjectShorthand;
    }
    state.tokens[state.tokens.length - 1].identifierRole = identifierRole;
    // Regardless of whether we know this to be a pattern or if we're in an ambiguous context, allow
    // parsing as if there's a default value.
    parseMaybeDefault(isBlockScope, true);
}
function parseObjPropValue(isPattern, isBlockScope, objectContextId) {
    tsStartParseObjPropValue();
    const wasMethod = parseObjectMethod(isPattern, objectContextId);
    if (!wasMethod) {
        parseObjectProperty(isPattern, isBlockScope);
    }
}
function parsePropertyName(objectContextId) {
    if (eat(TokenType.bracketL)) {
        state.tokens[state.tokens.length - 1].contextId = objectContextId;
        parseMaybeAssign();
        expect(TokenType.bracketR);
        state.tokens[state.tokens.length - 1].contextId = objectContextId;
    }
    else {
        if (match(TokenType.num) || match(TokenType.string) || match(TokenType.bigint) || match(TokenType.decimal)) {
            parseExprAtom();
        }
        else {
            parseMaybePrivateName();
        }
        state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ObjectKey;
        state.tokens[state.tokens.length - 1].contextId = objectContextId;
    }
}
// Parse object or class method.
function parseMethod(functionStart, isConstructor) {
    const funcContextId = getNextContextId();
    state.scopeDepth++;
    const startTokenIndex = state.tokens.length;
    const allowModifiers = isConstructor; // For TypeScript parameter properties
    parseFunctionParams(allowModifiers, funcContextId);
    parseFunctionBodyAndFinish(functionStart, funcContextId);
    const endTokenIndex = state.tokens.length;
    state.scopes.push(new Scope(startTokenIndex, endTokenIndex, true));
    state.scopeDepth--;
}
// Parse arrow function expression.
// If the parameters are provided, they will be converted to an
// assignable list.
function parseArrowExpression(startTokenIndex) {
    parseFunctionBody(true);
    const endTokenIndex = state.tokens.length;
    state.scopes.push(new Scope(startTokenIndex, endTokenIndex, true));
    state.scopeDepth--;
}
function parseFunctionBodyAndFinish(functionStart, funcContextId = 0) {
    tsParseFunctionBodyAndFinish(functionStart, funcContextId);
}
function parseFunctionBody(allowExpression, funcContextId = 0) {
    const isExpression = allowExpression && !match(TokenType.braceL);
    if (isExpression) {
        parseMaybeAssign();
    }
    else {
        parseBlock(true /* isFunctionScope */, funcContextId);
    }
}
// Parses a comma-separated list of expressions, and returns them as
// an array. `close` is the token type that ends the list, and
// `allowEmpty` can be turned on to allow subsequent commas with
// nothing in between them to be parsed as `null` (which is needed
// for array literals).
function parseExprList(close, allowEmpty = false) {
    let first = true;
    while (!eat(close) && !state.error) {
        if (first) {
            first = false;
        }
        else {
            expect(TokenType.comma);
            if (eat(close))
                break;
        }
        parseExprListItem(allowEmpty);
    }
}
function parseExprListItem(allowEmpty) {
    if (allowEmpty && match(TokenType.comma)) ;
    else if (match(TokenType.ellipsis)) {
        parseSpread();
        parseParenItem();
    }
    else if (match(TokenType.question)) {
        // Partial function application proposal.
        next();
    }
    else {
        parseMaybeAssign(false, true);
    }
}
// Parse the next token as an identifier.
function parseIdentifier() {
    next();
    state.tokens[state.tokens.length - 1].type = TokenType.name;
}
// Parses await expression inside async function.
function parseAwait() {
    parseMaybeUnary();
}
// Parses yield expression inside generator.
function parseYield() {
    next();
    if (!match(TokenType.semi) && !canInsertSemicolon()) {
        eat(TokenType.star);
        parseMaybeAssign();
    }
}

function tsIsIdentifier() {
    // TODO: actually a bit more complex in TypeScript, but shouldn't matter.
    // See https://github.com/Microsoft/TypeScript/issues/15008
    return match(TokenType.name);
}
function isLiteralPropertyName() {
    return (match(TokenType.name) ||
        Boolean(state.type & TokenType.IS_KEYWORD) ||
        match(TokenType.string) ||
        match(TokenType.num) ||
        match(TokenType.bigint) ||
        match(TokenType.decimal));
}
function tsNextTokenCanFollowModifier() {
    // Note: TypeScript's implementation is much more complicated because
    // more things are considered modifiers there.
    // This implementation only handles modifiers not handled by babylon itself. And "static".
    // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...
    const snapshot = state.snapshot();
    next();
    const canFollowModifier = (match(TokenType.bracketL) ||
        match(TokenType.braceL) ||
        match(TokenType.star) ||
        match(TokenType.ellipsis) ||
        match(TokenType.hash) ||
        isLiteralPropertyName()) &&
        !hasPrecedingLineBreak();
    if (canFollowModifier) {
        return true;
    }
    else {
        state.restoreFromSnapshot(snapshot);
        return false;
    }
}
/** Parses a modifier matching one the given modifier names. */
function tsParseModifier(allowedModifiers) {
    if (!match(TokenType.name)) {
        return null;
    }
    const modifier = state.contextualKeyword;
    if (allowedModifiers.indexOf(modifier) !== -1 && tsNextTokenCanFollowModifier()) {
        switch (modifier) {
            case ContextualKeyword._readonly:
                state.tokens[state.tokens.length - 1].type = TokenType._readonly;
                break;
            case ContextualKeyword._abstract:
                state.tokens[state.tokens.length - 1].type = TokenType._abstract;
                break;
            case ContextualKeyword._static:
                state.tokens[state.tokens.length - 1].type = TokenType._static;
                break;
            case ContextualKeyword._public:
                state.tokens[state.tokens.length - 1].type = TokenType._public;
                break;
            case ContextualKeyword._private:
                state.tokens[state.tokens.length - 1].type = TokenType._private;
                break;
            case ContextualKeyword._protected:
                state.tokens[state.tokens.length - 1].type = TokenType._protected;
                break;
            case ContextualKeyword._declare:
                state.tokens[state.tokens.length - 1].type = TokenType._declare;
                break;
        }
        return modifier;
    }
    return null;
}
function tsParseEntityName() {
    parseIdentifier();
    while (eat(TokenType.dot)) {
        parseIdentifier();
    }
}
function tsParseTypeReference() {
    tsParseEntityName();
    if (!hasPrecedingLineBreak() && match(TokenType.lessThan)) {
        tsParseTypeArguments();
    }
}
function tsParseThisTypePredicate() {
    next();
    tsParseTypeAnnotation();
}
function tsParseThisTypeNode() {
    next();
}
function tsParseTypeQuery() {
    expect(TokenType._typeof);
    if (match(TokenType._import)) {
        tsParseImportType();
    }
    else {
        tsParseEntityName();
    }
}
function tsParseImportType() {
    expect(TokenType._import);
    expect(TokenType.parenL);
    expect(TokenType.string);
    expect(TokenType.parenR);
    if (eat(TokenType.dot)) {
        tsParseEntityName();
    }
    if (match(TokenType.lessThan)) {
        tsParseTypeArguments();
    }
}
function tsParseTypeParameter() {
    parseIdentifier();
    if (eat(TokenType._extends)) {
        tsParseType();
    }
    if (eat(TokenType.eq)) {
        tsParseType();
    }
}
function tsTryParseTypeParameters() {
    if (match(TokenType.lessThan)) {
        tsParseTypeParameters();
    }
}
function tsParseTypeParameters() {
    const oldIsType = pushTypeContext(0);
    if (match(TokenType.lessThan) || match(TokenType.typeParameterStart)) {
        next();
    }
    else {
        unexpected();
    }
    while (!eat(TokenType.greaterThan) && !state.error) {
        tsParseTypeParameter();
        eat(TokenType.comma);
    }
    popTypeContext(oldIsType);
}
// Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,
// but here it's always false, because this is only used for types.
function tsFillSignature(returnToken) {
    // Arrow fns *must* have return token (`=>`). Normal functions can omit it.
    const returnTokenRequired = returnToken === TokenType.arrow;
    tsTryParseTypeParameters();
    expect(TokenType.parenL);
    // Create a scope even though we're doing type parsing so we don't accidentally
    // treat params as top-level bindings.
    state.scopeDepth++;
    tsParseBindingListForSignature(false /* isBlockScope */);
    state.scopeDepth--;
    if (returnTokenRequired) {
        tsParseTypeOrTypePredicateAnnotation(returnToken);
    }
    else if (match(returnToken)) {
        tsParseTypeOrTypePredicateAnnotation(returnToken);
    }
}
function tsParseBindingListForSignature(isBlockScope) {
    parseBindingList(TokenType.parenR, isBlockScope);
}
function tsParseTypeMemberSemicolon() {
    if (!eat(TokenType.comma)) {
        semicolon();
    }
}
function tsParseSignatureMember() {
    tsFillSignature(TokenType.colon);
    tsParseTypeMemberSemicolon();
}
function tsIsUnambiguouslyIndexSignature() {
    const snapshot = state.snapshot();
    next(); // Skip '{'
    const isIndexSignature = eat(TokenType.name) && match(TokenType.colon);
    state.restoreFromSnapshot(snapshot);
    return isIndexSignature;
}
function tsTryParseIndexSignature() {
    if (!(match(TokenType.bracketL) && tsIsUnambiguouslyIndexSignature())) {
        return false;
    }
    const oldIsType = pushTypeContext(0);
    expect(TokenType.bracketL);
    parseIdentifier();
    tsParseTypeAnnotation();
    expect(TokenType.bracketR);
    tsTryParseTypeAnnotation();
    tsParseTypeMemberSemicolon();
    popTypeContext(oldIsType);
    return true;
}
function tsParsePropertyOrMethodSignature(isReadonly) {
    eat(TokenType.question);
    if (!isReadonly && (match(TokenType.parenL) || match(TokenType.lessThan))) {
        tsFillSignature(TokenType.colon);
        tsParseTypeMemberSemicolon();
    }
    else {
        tsTryParseTypeAnnotation();
        tsParseTypeMemberSemicolon();
    }
}
function tsParseTypeMember() {
    if (match(TokenType.parenL) || match(TokenType.lessThan)) {
        // call signature
        tsParseSignatureMember();
        return;
    }
    if (match(TokenType._new)) {
        next();
        if (match(TokenType.parenL) || match(TokenType.lessThan)) {
            // constructor signature
            tsParseSignatureMember();
        }
        else {
            tsParsePropertyOrMethodSignature(false);
        }
        return;
    }
    const readonly = !!tsParseModifier([ContextualKeyword._readonly]);
    const found = tsTryParseIndexSignature();
    if (found) {
        return;
    }
    parsePropertyName(-1 /* Types don't need context IDs. */);
    tsParsePropertyOrMethodSignature(readonly);
}
function tsParseTypeLiteral() {
    tsParseObjectTypeMembers();
}
function tsParseObjectTypeMembers() {
    expect(TokenType.braceL);
    while (!eat(TokenType.braceR) && !state.error) {
        tsParseTypeMember();
    }
}
function tsLookaheadIsStartOfMappedType() {
    const snapshot = state.snapshot();
    const isStartOfMappedType = tsIsStartOfMappedType();
    state.restoreFromSnapshot(snapshot);
    return isStartOfMappedType;
}
function tsIsStartOfMappedType() {
    next();
    if (eat(TokenType.plus) || eat(TokenType.minus)) {
        return isContextual(ContextualKeyword._readonly);
    }
    if (isContextual(ContextualKeyword._readonly)) {
        next();
    }
    if (!match(TokenType.bracketL)) {
        return false;
    }
    next();
    if (!tsIsIdentifier()) {
        return false;
    }
    next();
    return match(TokenType._in);
}
function tsParseMappedTypeParameter() {
    parseIdentifier();
    expect(TokenType._in);
    tsParseType();
}
function tsParseMappedType() {
    expect(TokenType.braceL);
    if (match(TokenType.plus) || match(TokenType.minus)) {
        next();
        expectContextual(ContextualKeyword._readonly);
    }
    else {
        eatContextual(ContextualKeyword._readonly);
    }
    expect(TokenType.bracketL);
    tsParseMappedTypeParameter();
    if (eatContextual(ContextualKeyword._as)) {
        tsParseType();
    }
    expect(TokenType.bracketR);
    if (match(TokenType.plus) || match(TokenType.minus)) {
        next();
        expect(TokenType.question);
    }
    else {
        eat(TokenType.question);
    }
    tsTryParseType();
    semicolon();
    expect(TokenType.braceR);
}
function tsParseTupleType() {
    expect(TokenType.bracketL);
    while (!eat(TokenType.bracketR) && !state.error) {
        // Do not validate presence of either none or only labeled elements
        tsParseTupleElementType();
        eat(TokenType.comma);
    }
}
function tsParseTupleElementType() {
    // parses `...TsType[]`
    if (eat(TokenType.ellipsis)) {
        tsParseType();
    }
    else {
        // parses `TsType?`
        tsParseType();
        eat(TokenType.question);
    }
    // The type we parsed above was actually a label
    if (eat(TokenType.colon)) {
        // Labeled tuple types must affix the label with `...` or `?`, so no need to handle those here
        tsParseType();
    }
}
function tsParseParenthesizedType() {
    expect(TokenType.parenL);
    tsParseType();
    expect(TokenType.parenR);
}
function tsParseTemplateLiteralType() {
    // Finish `, read quasi
    nextTemplateToken();
    // Finish quasi, read ${
    nextTemplateToken();
    while (!match(TokenType.backQuote) && !state.error) {
        expect(TokenType.dollarBraceL);
        tsParseType();
        // Finish }, read quasi
        nextTemplateToken();
        // Finish quasi, read either ${ or `
        nextTemplateToken();
    }
    next();
}
var FunctionType;
(function (FunctionType) {
    FunctionType[FunctionType["TSFunctionType"] = 0] = "TSFunctionType";
    FunctionType[FunctionType["TSConstructorType"] = 1] = "TSConstructorType";
})(FunctionType || (FunctionType = {}));
function tsParseFunctionOrConstructorType(type) {
    if (type === FunctionType.TSConstructorType) {
        expect(TokenType._new);
    }
    tsFillSignature(TokenType.arrow);
}
function tsParseNonArrayType() {
    switch (state.type) {
        case TokenType.name:
            tsParseTypeReference();
            return;
        case TokenType._void:
        case TokenType._null:
            next();
            return;
        case TokenType.string:
        case TokenType.num:
        case TokenType.bigint:
        case TokenType.decimal:
        case TokenType._true:
        case TokenType._false:
            parseLiteral();
            return;
        case TokenType.minus:
            next();
            parseLiteral();
            return;
        case TokenType._this: {
            tsParseThisTypeNode();
            if (isContextual(ContextualKeyword._is) && !hasPrecedingLineBreak()) {
                tsParseThisTypePredicate();
            }
            return;
        }
        case TokenType._typeof:
            tsParseTypeQuery();
            return;
        case TokenType._import:
            tsParseImportType();
            return;
        case TokenType.braceL:
            if (tsLookaheadIsStartOfMappedType()) {
                tsParseMappedType();
            }
            else {
                tsParseTypeLiteral();
            }
            return;
        case TokenType.bracketL:
            tsParseTupleType();
            return;
        case TokenType.parenL:
            tsParseParenthesizedType();
            return;
        case TokenType.backQuote:
            tsParseTemplateLiteralType();
            return;
        default:
            if (state.type & TokenType.IS_KEYWORD) {
                next();
                state.tokens[state.tokens.length - 1].type = TokenType.name;
                return;
            }
            break;
    }
    unexpected();
}
function tsParseArrayTypeOrHigher() {
    tsParseNonArrayType();
    while (!hasPrecedingLineBreak() && eat(TokenType.bracketL)) {
        if (!eat(TokenType.bracketR)) {
            // If we hit ] immediately, this is an array type, otherwise it's an indexed access type.
            tsParseType();
            expect(TokenType.bracketR);
        }
    }
}
function tsParseInferType() {
    expectContextual(ContextualKeyword._infer);
    parseIdentifier();
}
function tsParseTypeOperatorOrHigher() {
    if (isContextual(ContextualKeyword._keyof) ||
        isContextual(ContextualKeyword._unique) ||
        isContextual(ContextualKeyword._readonly)) {
        next();
        tsParseTypeOperatorOrHigher();
    }
    else if (isContextual(ContextualKeyword._infer)) {
        tsParseInferType();
    }
    else {
        tsParseArrayTypeOrHigher();
    }
}
function tsParseIntersectionTypeOrHigher() {
    eat(TokenType.bitwiseAND);
    tsParseTypeOperatorOrHigher();
    if (match(TokenType.bitwiseAND)) {
        while (eat(TokenType.bitwiseAND)) {
            tsParseTypeOperatorOrHigher();
        }
    }
}
function tsParseUnionTypeOrHigher() {
    eat(TokenType.bitwiseOR);
    tsParseIntersectionTypeOrHigher();
    if (match(TokenType.bitwiseOR)) {
        while (eat(TokenType.bitwiseOR)) {
            tsParseIntersectionTypeOrHigher();
        }
    }
}
function tsIsStartOfFunctionType() {
    if (match(TokenType.lessThan)) {
        return true;
    }
    return match(TokenType.parenL) && tsLookaheadIsUnambiguouslyStartOfFunctionType();
}
function tsSkipParameterStart() {
    if (match(TokenType.name) || match(TokenType._this)) {
        next();
        return true;
    }
    // If this is a possible array/object destructure, walk to the matching bracket/brace.
    // The next token after will tell us definitively whether this is a function param.
    if (match(TokenType.braceL) || match(TokenType.bracketL)) {
        let depth = 1;
        next();
        while (depth > 0 && !state.error) {
            if (match(TokenType.braceL) || match(TokenType.bracketL)) {
                depth++;
            }
            else if (match(TokenType.braceR) || match(TokenType.bracketR)) {
                depth--;
            }
            next();
        }
        return true;
    }
    return false;
}
function tsLookaheadIsUnambiguouslyStartOfFunctionType() {
    const snapshot = state.snapshot();
    const isUnambiguouslyStartOfFunctionType = tsIsUnambiguouslyStartOfFunctionType();
    state.restoreFromSnapshot(snapshot);
    return isUnambiguouslyStartOfFunctionType;
}
function tsIsUnambiguouslyStartOfFunctionType() {
    next();
    if (match(TokenType.parenR) || match(TokenType.ellipsis)) {
        // ( )
        // ( ...
        return true;
    }
    if (tsSkipParameterStart()) {
        if (match(TokenType.colon) || match(TokenType.comma) || match(TokenType.question) || match(TokenType.eq)) {
            // ( xxx :
            // ( xxx ,
            // ( xxx ?
            // ( xxx =
            return true;
        }
        if (match(TokenType.parenR)) {
            next();
            if (match(TokenType.arrow)) {
                // ( xxx ) =>
                return true;
            }
        }
    }
    return false;
}
function tsParseTypeOrTypePredicateAnnotation(returnToken) {
    const oldIsType = pushTypeContext(0);
    expect(returnToken);
    const finishedReturn = tsParseTypePredicateOrAssertsPrefix();
    if (!finishedReturn) {
        tsParseType();
    }
    popTypeContext(oldIsType);
}
function tsTryParseTypeOrTypePredicateAnnotation() {
    if (match(TokenType.colon)) {
        tsParseTypeOrTypePredicateAnnotation(TokenType.colon);
    }
}
function tsTryParseTypeAnnotation() {
    if (match(TokenType.colon)) {
        tsParseTypeAnnotation();
    }
}
function tsTryParseType() {
    if (eat(TokenType.colon)) {
        tsParseType();
    }
}
/**
 * Detect a few special return syntax cases: `x is T`, `asserts x`, `asserts x is T`,
 * `asserts this is T`.
 *
 * Returns true if we parsed the return type, false if there's still a type to be parsed.
 */
function tsParseTypePredicateOrAssertsPrefix() {
    const snapshot = state.snapshot();
    if (isContextual(ContextualKeyword._asserts) && !hasPrecedingLineBreak()) {
        // Normally this is `asserts x is T`, but at this point, it might be `asserts is T` (a user-
        // defined type guard on the `asserts` variable) or just a type called `asserts`.
        next();
        if (eatContextual(ContextualKeyword._is)) {
            // If we see `asserts is`, then this must be of the form `asserts is T`, since
            // `asserts is is T` isn't valid.
            tsParseType();
            return true;
        }
        else if (tsIsIdentifier() || match(TokenType._this)) {
            next();
            if (eatContextual(ContextualKeyword._is)) {
                // If we see `is`, then this is `asserts x is T`. Otherwise, it's `asserts x`.
                tsParseType();
            }
            return true;
        }
        else {
            // Regular type, so bail out and start type parsing from scratch.
            state.restoreFromSnapshot(snapshot);
            return false;
        }
    }
    else if (tsIsIdentifier() || match(TokenType._this)) {
        // This is a regular identifier, which may or may not have "is" after it.
        next();
        if (isContextual(ContextualKeyword._is) && !hasPrecedingLineBreak()) {
            next();
            tsParseType();
            return true;
        }
        else {
            // Regular type, so bail out and start type parsing from scratch.
            state.restoreFromSnapshot(snapshot);
            return false;
        }
    }
    return false;
}
function tsParseTypeAnnotation() {
    const oldIsType = pushTypeContext(0);
    expect(TokenType.colon);
    tsParseType();
    popTypeContext(oldIsType);
}
function tsParseType() {
    tsParseNonConditionalType();
    if (hasPrecedingLineBreak() || !eat(TokenType._extends)) {
        return;
    }
    // extends type
    tsParseNonConditionalType();
    expect(TokenType.question);
    // true type
    tsParseType();
    expect(TokenType.colon);
    // false type
    tsParseType();
}
function tsParseNonConditionalType() {
    if (tsIsStartOfFunctionType()) {
        tsParseFunctionOrConstructorType(FunctionType.TSFunctionType);
        return;
    }
    if (match(TokenType._new)) {
        // As in `new () => Date`
        tsParseFunctionOrConstructorType(FunctionType.TSConstructorType);
        return;
    }
    tsParseUnionTypeOrHigher();
}
function tsParseTypeAssertion() {
    const oldIsType = pushTypeContext(1);
    tsParseType();
    expect(TokenType.greaterThan);
    popTypeContext(oldIsType);
    parseMaybeUnary();
}
function tsTryParseJSXTypeArgument() {
    if (eat(TokenType.jsxTagStart)) {
        state.tokens[state.tokens.length - 1].type = TokenType.typeParameterStart;
        const oldIsType = pushTypeContext(1);
        while (!match(TokenType.greaterThan) && !state.error) {
            tsParseType();
            eat(TokenType.comma);
        }
        // Process >, but the one after needs to be parsed JSX-style.
        nextJSXTagToken();
        popTypeContext(oldIsType);
    }
}
function tsParseHeritageClause() {
    while (!match(TokenType.braceL) && !state.error) {
        tsParseExpressionWithTypeArguments();
        eat(TokenType.comma);
    }
}
function tsParseExpressionWithTypeArguments() {
    // Note: TS uses parseLeftHandSideExpressionOrHigher,
    // then has grammar errors later if it's not an EntityName.
    tsParseEntityName();
    if (match(TokenType.lessThan)) {
        tsParseTypeArguments();
    }
}
function tsParseInterfaceDeclaration() {
    parseBindingIdentifier(false);
    tsTryParseTypeParameters();
    if (eat(TokenType._extends)) {
        tsParseHeritageClause();
    }
    tsParseObjectTypeMembers();
}
function tsParseTypeAliasDeclaration() {
    parseBindingIdentifier(false);
    tsTryParseTypeParameters();
    expect(TokenType.eq);
    tsParseType();
    semicolon();
}
function tsParseEnumMember() {
    // Computed property names are grammar errors in an enum, so accept just string literal or identifier.
    if (match(TokenType.string)) {
        parseLiteral();
    }
    else {
        parseIdentifier();
    }
    if (eat(TokenType.eq)) {
        const eqIndex = state.tokens.length - 1;
        parseMaybeAssign();
        state.tokens[eqIndex].rhsEndIndex = state.tokens.length;
    }
}
function tsParseEnumDeclaration() {
    parseBindingIdentifier(false);
    expect(TokenType.braceL);
    while (!eat(TokenType.braceR) && !state.error) {
        tsParseEnumMember();
        eat(TokenType.comma);
    }
}
function tsParseModuleBlock() {
    expect(TokenType.braceL);
    parseBlockBody(/* end */ TokenType.braceR);
}
function tsParseModuleOrNamespaceDeclaration() {
    parseBindingIdentifier(false);
    if (eat(TokenType.dot)) {
        tsParseModuleOrNamespaceDeclaration();
    }
    else {
        tsParseModuleBlock();
    }
}
function tsParseAmbientExternalModuleDeclaration() {
    if (isContextual(ContextualKeyword._global)) {
        parseIdentifier();
    }
    else if (match(TokenType.string)) {
        parseExprAtom();
    }
    else {
        unexpected();
    }
    if (match(TokenType.braceL)) {
        tsParseModuleBlock();
    }
    else {
        semicolon();
    }
}
function tsParseImportEqualsDeclaration() {
    parseImportedIdentifier();
    expect(TokenType.eq);
    tsParseModuleReference();
    semicolon();
}
function tsIsExternalModuleReference() {
    return isContextual(ContextualKeyword._require) && lookaheadType() === TokenType.parenL;
}
function tsParseModuleReference() {
    if (tsIsExternalModuleReference()) {
        tsParseExternalModuleReference();
    }
    else {
        tsParseEntityName();
    }
}
function tsParseExternalModuleReference() {
    expectContextual(ContextualKeyword._require);
    expect(TokenType.parenL);
    if (!match(TokenType.string)) {
        unexpected();
    }
    parseLiteral();
    expect(TokenType.parenR);
}
// Utilities
// Returns true if a statement matched.
function tsTryParseDeclare() {
    if (isLineTerminator()) {
        return false;
    }
    switch (state.type) {
        case TokenType._function: {
            const oldIsType = pushTypeContext(1);
            next();
            // We don't need to precisely get the function start here, since it's only used to mark
            // the function as a type if it's bodiless, and it's already a type here.
            const functionStart = state.start;
            parseFunction(functionStart, /* isStatement */ true);
            popTypeContext(oldIsType);
            return true;
        }
        case TokenType._class: {
            const oldIsType = pushTypeContext(1);
            parseClass(/* isStatement */ true, /* optionalId */ false);
            popTypeContext(oldIsType);
            return true;
        }
        case TokenType._const: {
            if (match(TokenType._const) && isLookaheadContextual(ContextualKeyword._enum)) {
                const oldIsType = pushTypeContext(1);
                // `const enum = 0;` not allowed because "enum" is a strict mode reserved word.
                expect(TokenType._const);
                expectContextual(ContextualKeyword._enum);
                state.tokens[state.tokens.length - 1].type = TokenType._enum;
                tsParseEnumDeclaration();
                popTypeContext(oldIsType);
                return true;
            }
        }
        // falls through
        case TokenType._var:
        case TokenType._let: {
            const oldIsType = pushTypeContext(1);
            parseVarStatement(state.type);
            popTypeContext(oldIsType);
            return true;
        }
        case TokenType.name: {
            const oldIsType = pushTypeContext(1);
            const contextualKeyword = state.contextualKeyword;
            let matched = false;
            if (contextualKeyword === ContextualKeyword._global) {
                tsParseAmbientExternalModuleDeclaration();
                matched = true;
            }
            else {
                matched = tsParseDeclaration(contextualKeyword, /* isBeforeToken */ true);
            }
            popTypeContext(oldIsType);
            return matched;
        }
        default:
            return false;
    }
}
// Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.
// Returns true if it matched a declaration.
function tsTryParseExportDeclaration() {
    return tsParseDeclaration(state.contextualKeyword, /* isBeforeToken */ true);
}
// Returns true if it matched a statement.
function tsParseExpressionStatement(contextualKeyword) {
    switch (contextualKeyword) {
        case ContextualKeyword._declare: {
            const declareTokenIndex = state.tokens.length - 1;
            const matched = tsTryParseDeclare();
            if (matched) {
                state.tokens[declareTokenIndex].type = TokenType._declare;
                return true;
            }
            break;
        }
        case ContextualKeyword._global:
            // `global { }` (with no `declare`) may appear inside an ambient module declaration.
            // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past "global".
            if (match(TokenType.braceL)) {
                tsParseModuleBlock();
                return true;
            }
            break;
        default:
            return tsParseDeclaration(contextualKeyword, /* isBeforeToken */ false);
    }
    return false;
}
// Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.
// Returns true if it matched a declaration.
function tsParseDeclaration(contextualKeyword, isBeforeToken) {
    switch (contextualKeyword) {
        case ContextualKeyword._abstract:
            if (tsCheckLineTerminatorAndMatch(TokenType._class, isBeforeToken)) {
                if (isBeforeToken)
                    next();
                state.tokens[state.tokens.length - 1].type = TokenType._abstract;
                parseClass(/* isStatement */ true, /* optionalId */ false);
                return true;
            }
            break;
        case ContextualKeyword._enum:
            if (tsCheckLineTerminatorAndMatch(TokenType.name, isBeforeToken)) {
                if (isBeforeToken)
                    next();
                state.tokens[state.tokens.length - 1].type = TokenType._enum;
                tsParseEnumDeclaration();
                return true;
            }
            break;
        case ContextualKeyword._interface:
            if (tsCheckLineTerminatorAndMatch(TokenType.name, isBeforeToken)) {
                // `next` is true in "export" and "declare" contexts, so we want to remove that token
                // as well.
                const oldIsType = pushTypeContext(1);
                if (isBeforeToken)
                    next();
                tsParseInterfaceDeclaration();
                popTypeContext(oldIsType);
                return true;
            }
            break;
        case ContextualKeyword._module:
            if (isBeforeToken)
                next();
            if (match(TokenType.string)) {
                const oldIsType = pushTypeContext(isBeforeToken ? 2 : 1);
                tsParseAmbientExternalModuleDeclaration();
                popTypeContext(oldIsType);
                return true;
            }
            else if (tsCheckLineTerminatorAndMatch(TokenType.name, isBeforeToken)) {
                const oldIsType = pushTypeContext(isBeforeToken ? 2 : 1);
                if (isBeforeToken)
                    next();
                tsParseModuleOrNamespaceDeclaration();
                popTypeContext(oldIsType);
                return true;
            }
            break;
        case ContextualKeyword._namespace:
            if (tsCheckLineTerminatorAndMatch(TokenType.name, isBeforeToken)) {
                const oldIsType = pushTypeContext(1);
                if (isBeforeToken)
                    next();
                tsParseModuleOrNamespaceDeclaration();
                popTypeContext(oldIsType);
                return true;
            }
            break;
        case ContextualKeyword._type:
            if (tsCheckLineTerminatorAndMatch(TokenType.name, isBeforeToken)) {
                const oldIsType = pushTypeContext(1);
                if (isBeforeToken)
                    next();
                tsParseTypeAliasDeclaration();
                popTypeContext(oldIsType);
                return true;
            }
            break;
    }
    return false;
}
function tsCheckLineTerminatorAndMatch(tokenType, isBeforeToken) {
    return !isLineTerminator() && (isBeforeToken || match(tokenType));
}
// Returns true if there was a generic async arrow function.
function tsTryParseGenericAsyncArrowFunction() {
    const snapshot = state.snapshot();
    tsParseTypeParameters();
    parseFunctionParams();
    tsTryParseTypeOrTypePredicateAnnotation();
    expect(TokenType.arrow);
    if (state.error) {
        state.restoreFromSnapshot(snapshot);
        return false;
    }
    parseFunctionBody(true);
    return true;
}
function tsParseTypeArguments() {
    const oldIsType = pushTypeContext(0);
    expect(TokenType.lessThan);
    while (!eat(TokenType.greaterThan) && !state.error) {
        tsParseType();
        eat(TokenType.comma);
    }
    popTypeContext(oldIsType);
}
function tsIsDeclarationStart() {
    if (match(TokenType.name)) {
        switch (state.contextualKeyword) {
            case ContextualKeyword._abstract:
            case ContextualKeyword._declare:
            case ContextualKeyword._enum:
            case ContextualKeyword._interface:
            case ContextualKeyword._module:
            case ContextualKeyword._namespace:
            case ContextualKeyword._type:
                return true;
        }
    }
    return false;
}
// ======================================================
// OVERRIDES
// ======================================================
function tsParseFunctionBodyAndFinish(functionStart, funcContextId) {
    // For arrow functions, `parseArrow` handles the return type itself.
    if (match(TokenType.colon)) {
        tsParseTypeOrTypePredicateAnnotation(TokenType.colon);
    }
    // The original code checked the node type to make sure this function type allows a missing
    // body, but we skip that to avoid sending around the node type. We instead just use the
    // allowExpressionBody boolean to make sure it's not an arrow function.
    if (!match(TokenType.braceL) && isLineTerminator()) {
        // Retroactively mark the function declaration as a type.
        let i = state.tokens.length - 1;
        while (i >= 0 &&
            (state.tokens[i].start >= functionStart ||
                state.tokens[i].type === TokenType._default ||
                state.tokens[i].type === TokenType._export)) {
            state.tokens[i].isType = true;
            i--;
        }
        return;
    }
    parseFunctionBody(false, funcContextId);
}
function tsParseSubscript(startTokenIndex, noCalls, stopState) {
    if (!hasPrecedingLineBreak() && eat(TokenType.bang)) {
        state.tokens[state.tokens.length - 1].type = TokenType.nonNullAssertion;
        return;
    }
    if (match(TokenType.lessThan)) {
        // There are number of things we are going to "maybe" parse, like type arguments on
        // tagged template expressions. If any of them fail, walk it back and continue.
        const snapshot = state.snapshot();
        if (!noCalls && atPossibleAsync()) {
            // Almost certainly this is a generic async function `async <T>() => ...
            // But it might be a call with a type argument `async<T>();`
            const asyncArrowFn = tsTryParseGenericAsyncArrowFunction();
            if (asyncArrowFn) {
                return;
            }
        }
        tsParseTypeArguments();
        if (!noCalls && eat(TokenType.parenL)) {
            // With f<T>(), the subscriptStartIndex marker is on the ( token.
            state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;
            parseCallExpressionArguments();
        }
        else if (match(TokenType.backQuote)) {
            // Tagged template with a type argument.
            parseTemplate();
        }
        else {
            unexpected();
        }
        if (state.error) {
            state.restoreFromSnapshot(snapshot);
        }
        else {
            return;
        }
    }
    else if (!noCalls && match(TokenType.questionDot) && lookaheadType() === TokenType.lessThan) {
        // If we see f?.<, then this must be an optional call with a type argument.
        next();
        state.tokens[startTokenIndex].isOptionalChainStart = true;
        // With f?.<T>(), the subscriptStartIndex marker is on the ?. token.
        state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;
        tsParseTypeArguments();
        expect(TokenType.parenL);
        parseCallExpressionArguments();
    }
    baseParseSubscript(startTokenIndex, noCalls, stopState);
}
function tsStartParseNewArguments() {
    if (match(TokenType.lessThan)) {
        // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.
        const snapshot = state.snapshot();
        state.type = TokenType.typeParameterStart;
        tsParseTypeArguments();
        if (!match(TokenType.parenL)) {
            unexpected();
        }
        if (state.error) {
            state.restoreFromSnapshot(snapshot);
        }
    }
}
function tsTryParseExport() {
    if (match(TokenType._import)) {
        // `export import A = B;`
        expect(TokenType._import);
        tsParseImportEqualsDeclaration();
        return true;
    }
    else if (eat(TokenType.eq)) {
        // `export = x;`
        parseExpression();
        semicolon();
        return true;
    }
    else if (eatContextual(ContextualKeyword._as)) {
        // `export as namespace A;`
        // See `parseNamespaceExportDeclaration` in TypeScript's own parser
        expectContextual(ContextualKeyword._namespace);
        parseIdentifier();
        semicolon();
        return true;
    }
    else {
        if (isContextual(ContextualKeyword._type) && lookaheadType() === TokenType.braceL) {
            next();
        }
        return false;
    }
}
function tsTryParseExportDefaultExpression() {
    if (isContextual(ContextualKeyword._abstract) && lookaheadType() === TokenType._class) {
        state.type = TokenType._abstract;
        next(); // Skip "abstract"
        parseClass(true, true);
        return true;
    }
    if (isContextual(ContextualKeyword._interface)) {
        // Make sure "export default" are considered type tokens so the whole thing is removed.
        const oldIsType = pushTypeContext(2);
        tsParseDeclaration(ContextualKeyword._interface, true);
        popTypeContext(oldIsType);
        return true;
    }
    return false;
}
function tsTryParseStatementContent() {
    if (state.type === TokenType._const) {
        const ahead = lookaheadTypeAndKeyword();
        if (ahead.type === TokenType.name && ahead.contextualKeyword === ContextualKeyword._enum) {
            expect(TokenType._const);
            expectContextual(ContextualKeyword._enum);
            state.tokens[state.tokens.length - 1].type = TokenType._enum;
            tsParseEnumDeclaration();
            return true;
        }
    }
    return false;
}
function tsParseAccessModifier() {
    tsParseModifier([
        ContextualKeyword._public,
        ContextualKeyword._protected,
        ContextualKeyword._private,
    ]);
}
function tsTryParseClassMemberWithIsStatic(isStatic, classContextId) {
    let isAbstract = false;
    let isReadonly = false;
    while (true) {
        const mod = tsParseModifier([
            ContextualKeyword._abstract,
            ContextualKeyword._readonly,
            ContextualKeyword._declare,
        ]);
        if (mod == null) {
            break;
        }
        if (mod === ContextualKeyword._readonly) {
            isReadonly = true;
        }
        if (mod === ContextualKeyword._abstract) {
            isAbstract = true;
        }
    }
    // We no longer check for public/private/etc, but tsTryParseIndexSignature should just return
    // false in that case for valid code.
    if (!isAbstract && !isStatic) {
        const found = tsTryParseIndexSignature();
        if (found) {
            return true;
        }
    }
    if (isReadonly) {
        // Must be a property (if not an index signature).
        parseClassPropertyName(classContextId);
        parsePostMemberNameModifiers();
        parseClassProperty();
        return true;
    }
    return false;
}
// Note: The reason we do this in `parseIdentifierStatement` and not `parseStatement`
// is that e.g. `type()` is valid JS, so we must try parsing that first.
// If it's really a type, we will parse `type` as the statement, and can correct it here
// by parsing the rest.
function tsParseIdentifierStatement(contextualKeyword) {
    const matched = tsParseExpressionStatement(contextualKeyword);
    if (!matched) {
        semicolon();
    }
}
function tsParseExportDeclaration() {
    // "export declare" is equivalent to just "export".
    const isDeclare = eatContextual(ContextualKeyword._declare);
    if (isDeclare) {
        state.tokens[state.tokens.length - 1].type = TokenType._declare;
    }
    let matchedDeclaration = false;
    if (match(TokenType.name)) {
        if (isDeclare) {
            const oldIsType = pushTypeContext(2);
            matchedDeclaration = tsTryParseExportDeclaration();
            popTypeContext(oldIsType);
        }
        else {
            matchedDeclaration = tsTryParseExportDeclaration();
        }
    }
    if (!matchedDeclaration) {
        if (isDeclare) {
            const oldIsType = pushTypeContext(2);
            parseStatement(true);
            popTypeContext(oldIsType);
        }
        else {
            parseStatement(true);
        }
    }
}
function tsAfterParseClassSuper(hasSuper) {
    if (hasSuper && match(TokenType.lessThan)) {
        tsParseTypeArguments();
    }
    if (eatContextual(ContextualKeyword._implements)) {
        state.tokens[state.tokens.length - 1].type = TokenType._implements;
        const oldIsType = pushTypeContext(1);
        tsParseHeritageClause();
        popTypeContext(oldIsType);
    }
}
function tsStartParseObjPropValue() {
    tsTryParseTypeParameters();
}
function tsStartParseFunctionParams() {
    tsTryParseTypeParameters();
}
// `let x: number;`
function tsAfterParseVarHead() {
    const oldIsType = pushTypeContext(0);
    eat(TokenType.bang);
    tsTryParseTypeAnnotation();
    popTypeContext(oldIsType);
}
// parse the return type of an async arrow function - let foo = (async (): number => {});
function tsStartParseAsyncArrowFromCallExpression() {
    if (match(TokenType.colon)) {
        tsParseTypeAnnotation();
    }
}
// Returns true if the expression was an arrow function.
function tsParseMaybeAssign(noIn, isWithinParens) {
    // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.
    if (isJSXEnabled) {
        return tsParseMaybeAssignWithJSX(noIn, isWithinParens);
    }
    else {
        return tsParseMaybeAssignWithoutJSX(noIn, isWithinParens);
    }
}
function tsParseMaybeAssignWithJSX(noIn, isWithinParens) {
    if (!match(TokenType.lessThan)) {
        return baseParseMaybeAssign(noIn, isWithinParens);
    }
    // Prefer to parse JSX if possible. But may be an arrow fn.
    const snapshot = state.snapshot();
    let wasArrow = baseParseMaybeAssign(noIn, isWithinParens);
    if (state.error) {
        state.restoreFromSnapshot(snapshot);
    }
    else {
        return wasArrow;
    }
    // Otherwise, try as type-parameterized arrow function.
    state.type = TokenType.typeParameterStart;
    // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.
    tsParseTypeParameters();
    wasArrow = baseParseMaybeAssign(noIn, isWithinParens);
    if (!wasArrow) {
        unexpected();
    }
    return wasArrow;
}
function tsParseMaybeAssignWithoutJSX(noIn, isWithinParens) {
    if (!match(TokenType.lessThan)) {
        return baseParseMaybeAssign(noIn, isWithinParens);
    }
    const snapshot = state.snapshot();
    // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.
    tsParseTypeParameters();
    const wasArrow = baseParseMaybeAssign(noIn, isWithinParens);
    if (!wasArrow) {
        unexpected();
    }
    if (state.error) {
        state.restoreFromSnapshot(snapshot);
    }
    else {
        return wasArrow;
    }
    // Try parsing a type cast instead of an arrow function.
    // This will start with a type assertion (via parseMaybeUnary).
    // But don't directly call `tsParseTypeAssertion` because we want to handle any binary after it.
    return baseParseMaybeAssign(noIn, isWithinParens);
}
function tsParseArrow() {
    if (match(TokenType.colon)) {
        // This is different from how the TS parser does it.
        // TS uses lookahead. Babylon parses it as a parenthesized expression and converts.
        const snapshot = state.snapshot();
        tsParseTypeOrTypePredicateAnnotation(TokenType.colon);
        if (canInsertSemicolon())
            unexpected();
        if (!match(TokenType.arrow))
            unexpected();
        if (state.error) {
            state.restoreFromSnapshot(snapshot);
        }
    }
    return eat(TokenType.arrow);
}
// Allow type annotations inside of a parameter list.
function tsParseAssignableListItemTypes() {
    const oldIsType = pushTypeContext(0);
    eat(TokenType.question);
    tsTryParseTypeAnnotation();
    popTypeContext(oldIsType);
}
function tsParseMaybeDecoratorArguments() {
    if (match(TokenType.lessThan)) {
        tsParseTypeArguments();
    }
    baseParseMaybeDecoratorArguments();
}

/* eslint max-len: 0 */
function parseTopLevel() {
    parseBlockBody(TokenType.eof);
    state.scopes.push(new Scope(0, state.tokens.length, true));
    if (state.scopeDepth !== 0) {
        throw new Error(`Invalid scope depth at end of file: ${state.scopeDepth}`);
    }
    return new File(state.tokens, state.scopes);
}
// Parse a single statement.
//
// If expecting a statement and finding a slash operator, parse a
// regular expression literal. This is to handle cases like
// `if (foo) /blah/.exec(foo)`, where looking at the previous token
// does not help.
function parseStatement(declaration) {
    if (match(TokenType.at)) {
        parseDecorators();
    }
    parseStatementContent(declaration);
}
function parseStatementContent(declaration) {
    if (tsTryParseStatementContent()) {
        return;
    }
    const starttype = state.type;
    // Most types of statements are recognized by the keyword they
    // start with. Many are trivial to parse, some require a bit of
    // complexity.
    switch (starttype) {
        case TokenType._break:
        case TokenType._continue:
            parseBreakContinueStatement();
            return;
        case TokenType._debugger:
            parseDebuggerStatement();
            return;
        case TokenType._do:
            parseDoStatement();
            return;
        case TokenType._for:
            parseForStatement();
            return;
        case TokenType._function:
            if (lookaheadType() === TokenType.dot)
                break;
            if (!declaration)
                unexpected();
            parseFunctionStatement();
            return;
        case TokenType._class:
            if (!declaration)
                unexpected();
            parseClass(true);
            return;
        case TokenType._if:
            parseIfStatement();
            return;
        case TokenType._return:
            parseReturnStatement();
            return;
        case TokenType._switch:
            parseSwitchStatement();
            return;
        case TokenType._throw:
            parseThrowStatement();
            return;
        case TokenType._try:
            parseTryStatement();
            return;
        case TokenType._let:
        case TokenType._const:
            if (!declaration)
                unexpected(); // NOTE: falls through to _var
        case TokenType._var:
            parseVarStatement(starttype);
            return;
        case TokenType._while:
            parseWhileStatement();
            return;
        case TokenType.braceL:
            parseBlock();
            return;
        case TokenType.semi:
            parseEmptyStatement();
            return;
        case TokenType._export:
        case TokenType._import: {
            const nextType = lookaheadType();
            if (nextType === TokenType.parenL || nextType === TokenType.dot) {
                break;
            }
            next();
            if (starttype === TokenType._import) {
                parseImport();
            }
            else {
                parseExport();
            }
            return;
        }
        case TokenType.name:
            if (state.contextualKeyword === ContextualKeyword._async) {
                const functionStart = state.start;
                // peek ahead and see if next token is a function
                const snapshot = state.snapshot();
                next();
                if (match(TokenType._function) && !canInsertSemicolon()) {
                    expect(TokenType._function);
                    parseFunction(functionStart, true);
                    return;
                }
                else {
                    state.restoreFromSnapshot(snapshot);
                }
            }
    }
    // If the statement does not start with a statement keyword or a
    // brace, it's an ExpressionStatement or LabeledStatement. We
    // simply start parsing an expression, and afterwards, if the
    // next token is a colon and the expression was a simple
    // Identifier node, we switch to interpreting it as a label.
    const initialTokensLength = state.tokens.length;
    parseExpression();
    let simpleName = null;
    if (state.tokens.length === initialTokensLength + 1) {
        const token = state.tokens[state.tokens.length - 1];
        if (token.type === TokenType.name) {
            simpleName = token.contextualKeyword;
        }
    }
    if (simpleName == null) {
        semicolon();
        return;
    }
    if (eat(TokenType.colon)) {
        parseLabeledStatement();
    }
    else {
        // This was an identifier, so we might want to handle flow/typescript-specific cases.
        parseIdentifierStatement(simpleName);
    }
}
function parseDecorators() {
    while (match(TokenType.at)) {
        parseDecorator();
    }
}
function parseDecorator() {
    next();
    if (eat(TokenType.parenL)) {
        parseExpression();
        expect(TokenType.parenR);
    }
    else {
        parseIdentifier();
        while (eat(TokenType.dot)) {
            parseIdentifier();
        }
    }
    parseMaybeDecoratorArguments();
}
function parseMaybeDecoratorArguments() {
    tsParseMaybeDecoratorArguments();
}
function baseParseMaybeDecoratorArguments() {
    if (eat(TokenType.parenL)) {
        parseCallExpressionArguments();
    }
}
function parseBreakContinueStatement() {
    next();
    if (!isLineTerminator()) {
        parseIdentifier();
        semicolon();
    }
}
function parseDebuggerStatement() {
    next();
    semicolon();
}
function parseDoStatement() {
    next();
    parseStatement(false);
    expect(TokenType._while);
    parseParenExpression();
    eat(TokenType.semi);
}
function parseForStatement() {
    state.scopeDepth++;
    const startTokenIndex = state.tokens.length;
    parseAmbiguousForStatement();
    const endTokenIndex = state.tokens.length;
    state.scopes.push(new Scope(startTokenIndex, endTokenIndex, false));
    state.scopeDepth--;
}
// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
// loop is non-trivial. Basically, we have to parse the init `var`
// statement or expression, disallowing the `in` operator (see
// the second parameter to `parseExpression`), and then check
// whether the next token is `in` or `of`. When there is no init
// part (semicolon immediately after the opening parenthesis), it
// is a regular `for` loop.
function parseAmbiguousForStatement() {
    next();
    let forAwait = false;
    if (isContextual(ContextualKeyword._await)) {
        forAwait = true;
        next();
    }
    expect(TokenType.parenL);
    if (match(TokenType.semi)) {
        if (forAwait) {
            unexpected();
        }
        parseFor();
        return;
    }
    if (match(TokenType._var) || match(TokenType._let) || match(TokenType._const)) {
        const varKind = state.type;
        next();
        parseVar(true, varKind);
        if (match(TokenType._in) || isContextual(ContextualKeyword._of)) {
            parseForIn(forAwait);
            return;
        }
        parseFor();
        return;
    }
    parseExpression(true);
    if (match(TokenType._in) || isContextual(ContextualKeyword._of)) {
        parseForIn(forAwait);
        return;
    }
    if (forAwait) {
        unexpected();
    }
    parseFor();
}
function parseFunctionStatement() {
    const functionStart = state.start;
    next();
    parseFunction(functionStart, true);
}
function parseIfStatement() {
    next();
    parseParenExpression();
    parseStatement(false);
    if (eat(TokenType._else)) {
        parseStatement(false);
    }
}
function parseReturnStatement() {
    next();
    // In `return` (and `break`/`continue`), the keywords with
    // optional arguments, we eagerly look for a semicolon or the
    // possibility to insert one.
    if (!isLineTerminator()) {
        parseExpression();
        semicolon();
    }
}
function parseSwitchStatement() {
    next();
    parseParenExpression();
    state.scopeDepth++;
    const startTokenIndex = state.tokens.length;
    expect(TokenType.braceL);
    // Don't bother validation; just go through any sequence of cases, defaults, and statements.
    while (!match(TokenType.braceR) && !state.error) {
        if (match(TokenType._case) || match(TokenType._default)) {
            const isCase = match(TokenType._case);
            next();
            if (isCase) {
                parseExpression();
            }
            expect(TokenType.colon);
        }
        else {
            parseStatement(true);
        }
    }
    next(); // Closing brace
    const endTokenIndex = state.tokens.length;
    state.scopes.push(new Scope(startTokenIndex, endTokenIndex, false));
    state.scopeDepth--;
}
function parseThrowStatement() {
    next();
    parseExpression();
    semicolon();
}
function parseCatchClauseParam() {
    parseBindingAtom(true /* isBlockScope */);
    tsTryParseTypeAnnotation();
}
function parseTryStatement() {
    next();
    parseBlock();
    if (match(TokenType._catch)) {
        next();
        let catchBindingStartTokenIndex = null;
        if (match(TokenType.parenL)) {
            state.scopeDepth++;
            catchBindingStartTokenIndex = state.tokens.length;
            expect(TokenType.parenL);
            parseCatchClauseParam();
            expect(TokenType.parenR);
        }
        parseBlock();
        if (catchBindingStartTokenIndex != null) {
            // We need a special scope for the catch binding which includes the binding itself and the
            // catch block.
            const endTokenIndex = state.tokens.length;
            state.scopes.push(new Scope(catchBindingStartTokenIndex, endTokenIndex, false));
            state.scopeDepth--;
        }
    }
    if (eat(TokenType._finally)) {
        parseBlock();
    }
}
function parseVarStatement(kind) {
    next();
    parseVar(false, kind);
    semicolon();
}
function parseWhileStatement() {
    next();
    parseParenExpression();
    parseStatement(false);
}
function parseEmptyStatement() {
    next();
}
function parseLabeledStatement() {
    parseStatement(true);
}
/**
 * Parse a statement starting with an identifier of the given name. Subclasses match on the name
 * to handle statements like "declare".
 */
function parseIdentifierStatement(contextualKeyword) {
    tsParseIdentifierStatement(contextualKeyword);
}
// Parse a semicolon-enclosed block of statements.
function parseBlock(isFunctionScope = false, contextId = 0) {
    const startTokenIndex = state.tokens.length;
    state.scopeDepth++;
    expect(TokenType.braceL);
    if (contextId) {
        state.tokens[state.tokens.length - 1].contextId = contextId;
    }
    parseBlockBody(TokenType.braceR);
    if (contextId) {
        state.tokens[state.tokens.length - 1].contextId = contextId;
    }
    const endTokenIndex = state.tokens.length;
    state.scopes.push(new Scope(startTokenIndex, endTokenIndex, isFunctionScope));
    state.scopeDepth--;
}
function parseBlockBody(end) {
    while (!eat(end) && !state.error) {
        parseStatement(true);
    }
}
// Parse a regular `for` loop. The disambiguation code in
// `parseStatement` will already have parsed the init statement or
// expression.
function parseFor() {
    expect(TokenType.semi);
    if (!match(TokenType.semi)) {
        parseExpression();
    }
    expect(TokenType.semi);
    if (!match(TokenType.parenR)) {
        parseExpression();
    }
    expect(TokenType.parenR);
    parseStatement(false);
}
// Parse a `for`/`in` and `for`/`of` loop, which are almost
// same from parser's perspective.
function parseForIn(forAwait) {
    if (forAwait) {
        eatContextual(ContextualKeyword._of);
    }
    else {
        next();
    }
    parseExpression();
    expect(TokenType.parenR);
    parseStatement(false);
}
// Parse a list of variable declarations.
function parseVar(isFor, kind) {
    while (true) {
        const isBlockScope = kind === TokenType._const || kind === TokenType._let;
        parseVarHead(isBlockScope);
        if (eat(TokenType.eq)) {
            const eqIndex = state.tokens.length - 1;
            parseMaybeAssign(isFor);
            state.tokens[eqIndex].rhsEndIndex = state.tokens.length;
        }
        if (!eat(TokenType.comma)) {
            break;
        }
    }
}
function parseVarHead(isBlockScope) {
    parseBindingAtom(isBlockScope);
    tsAfterParseVarHead();
}
// Parse a function declaration or literal (depending on the
// `isStatement` parameter).
function parseFunction(functionStart, isStatement, optionalId = false) {
    if (match(TokenType.star)) {
        next();
    }
    if (isStatement && !optionalId && !match(TokenType.name) && !match(TokenType._yield)) {
        unexpected();
    }
    let nameScopeStartTokenIndex = null;
    if (match(TokenType.name)) {
        // Expression-style functions should limit their name's scope to the function body, so we make
        // a new function scope to enforce that.
        if (!isStatement) {
            nameScopeStartTokenIndex = state.tokens.length;
            state.scopeDepth++;
        }
        parseBindingIdentifier(false);
    }
    const startTokenIndex = state.tokens.length;
    state.scopeDepth++;
    parseFunctionParams();
    parseFunctionBodyAndFinish(functionStart);
    const endTokenIndex = state.tokens.length;
    // In addition to the block scope of the function body, we need a separate function-style scope
    // that includes the params.
    state.scopes.push(new Scope(startTokenIndex, endTokenIndex, true));
    state.scopeDepth--;
    if (nameScopeStartTokenIndex !== null) {
        state.scopes.push(new Scope(nameScopeStartTokenIndex, endTokenIndex, true));
        state.scopeDepth--;
    }
}
function parseFunctionParams(allowModifiers = false, funcContextId = 0) {
    tsStartParseFunctionParams();
    expect(TokenType.parenL);
    if (funcContextId) {
        state.tokens[state.tokens.length - 1].contextId = funcContextId;
    }
    parseBindingList(TokenType.parenR, false /* isBlockScope */, false /* allowEmpty */, allowModifiers, funcContextId);
    if (funcContextId) {
        state.tokens[state.tokens.length - 1].contextId = funcContextId;
    }
}
// Parse a class declaration or literal (depending on the
// `isStatement` parameter).
function parseClass(isStatement, optionalId = false) {
    // Put a context ID on the class keyword, the open-brace, and the close-brace, so that later
    // code can easily navigate to meaningful points on the class.
    const contextId = getNextContextId();
    next();
    state.tokens[state.tokens.length - 1].contextId = contextId;
    state.tokens[state.tokens.length - 1].isExpression = !isStatement;
    // Like with functions, we declare a special "name scope" from the start of the name to the end
    // of the class, but only with expression-style classes, to represent the fact that the name is
    // available to the body of the class but not an outer declaration.
    let nameScopeStartTokenIndex = null;
    if (!isStatement) {
        nameScopeStartTokenIndex = state.tokens.length;
        state.scopeDepth++;
    }
    parseClassId(isStatement, optionalId);
    parseClassSuper();
    const openBraceIndex = state.tokens.length;
    parseClassBody(contextId);
    if (state.error) {
        return;
    }
    state.tokens[openBraceIndex].contextId = contextId;
    state.tokens[state.tokens.length - 1].contextId = contextId;
    if (nameScopeStartTokenIndex !== null) {
        const endTokenIndex = state.tokens.length;
        state.scopes.push(new Scope(nameScopeStartTokenIndex, endTokenIndex, false));
        state.scopeDepth--;
    }
}
function isClassProperty() {
    return match(TokenType.eq) || match(TokenType.semi) || match(TokenType.braceR) || match(TokenType.bang) || match(TokenType.colon);
}
function isClassMethod() {
    return match(TokenType.parenL) || match(TokenType.lessThan);
}
function parseClassBody(classContextId) {
    expect(TokenType.braceL);
    while (!eat(TokenType.braceR) && !state.error) {
        if (eat(TokenType.semi)) {
            continue;
        }
        if (match(TokenType.at)) {
            parseDecorator();
            continue;
        }
        const memberStart = state.start;
        parseClassMember(memberStart, classContextId);
    }
}
function parseClassMember(memberStart, classContextId) {
    tsParseModifier([ContextualKeyword._declare]);
    tsParseAccessModifier();
    tsParseModifier([ContextualKeyword._declare]);
    let isStatic = false;
    if (match(TokenType.name) && state.contextualKeyword === ContextualKeyword._static) {
        parseIdentifier(); // eats 'static'
        if (isClassMethod()) {
            parseClassMethod(memberStart, /* isConstructor */ false);
            return;
        }
        else if (isClassProperty()) {
            parseClassProperty();
            return;
        }
        // otherwise something static
        state.tokens[state.tokens.length - 1].type = TokenType._static;
        isStatic = true;
        if (match(TokenType.braceL)) {
            // This is a static block. Mark the word "static" with the class context ID for class element
            // detection and parse as a regular block.
            state.tokens[state.tokens.length - 1].contextId = classContextId;
            parseBlock();
            return;
        }
    }
    parseClassMemberWithIsStatic(memberStart, isStatic, classContextId);
}
function parseClassMemberWithIsStatic(memberStart, isStatic, classContextId) {
    if (tsTryParseClassMemberWithIsStatic(isStatic, classContextId)) {
        return;
    }
    if (eat(TokenType.star)) {
        // a generator
        parseClassPropertyName(classContextId);
        parseClassMethod(memberStart, /* isConstructor */ false);
        return;
    }
    // Get the identifier name so we can tell if it's actually a keyword like "async", "get", or
    // "set".
    parseClassPropertyName(classContextId);
    let isConstructor = false;
    const token = state.tokens[state.tokens.length - 1];
    // We allow "constructor" as either an identifier or a string.
    if (token.contextualKeyword === ContextualKeyword._constructor) {
        isConstructor = true;
    }
    parsePostMemberNameModifiers();
    if (isClassMethod()) {
        parseClassMethod(memberStart, isConstructor);
    }
    else if (isClassProperty()) {
        parseClassProperty();
    }
    else if (token.contextualKeyword === ContextualKeyword._async && !isLineTerminator()) {
        state.tokens[state.tokens.length - 1].type = TokenType._async;
        // an async method
        const isGenerator = match(TokenType.star);
        if (isGenerator) {
            next();
        }
        // The so-called parsed name would have been "async": get the real name.
        parseClassPropertyName(classContextId);
        parsePostMemberNameModifiers();
        parseClassMethod(memberStart, false /* isConstructor */);
    }
    else if ((token.contextualKeyword === ContextualKeyword._get ||
        token.contextualKeyword === ContextualKeyword._set) &&
        !(isLineTerminator() && match(TokenType.star))) {
        if (token.contextualKeyword === ContextualKeyword._get) {
            state.tokens[state.tokens.length - 1].type = TokenType._get;
        }
        else {
            state.tokens[state.tokens.length - 1].type = TokenType._set;
        }
        // `get\n*` is an uninitialized property named 'get' followed by a generator.
        // a getter or setter
        // The so-called parsed name would have been "get/set": get the real name.
        parseClassPropertyName(classContextId);
        parseClassMethod(memberStart, /* isConstructor */ false);
    }
    else if (isLineTerminator()) {
        // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)
        parseClassProperty();
    }
    else {
        unexpected();
    }
}
function parseClassMethod(functionStart, isConstructor) {
    tsTryParseTypeParameters();
    parseMethod(functionStart, isConstructor);
}
// Return the name of the class property, if it is a simple identifier.
function parseClassPropertyName(classContextId) {
    parsePropertyName(classContextId);
}
function parsePostMemberNameModifiers() {
    const oldIsType = pushTypeContext(0);
    eat(TokenType.question);
    popTypeContext(oldIsType);
}
function parseClassProperty() {
    eat(TokenType.bang);
    tsTryParseTypeAnnotation();
    if (match(TokenType.eq)) {
        const equalsTokenIndex = state.tokens.length;
        next();
        parseMaybeAssign();
        state.tokens[equalsTokenIndex].rhsEndIndex = state.tokens.length;
    }
    semicolon();
}
function parseClassId(isStatement, optionalId = false) {
    if ((!isStatement || optionalId) && isContextual(ContextualKeyword._implements)) {
        return;
    }
    if (match(TokenType.name)) {
        parseBindingIdentifier(true);
    }
    tsTryParseTypeParameters();
}
// Returns true if there was a superclass.
function parseClassSuper() {
    let hasSuper = false;
    if (eat(TokenType._extends)) {
        parseExprSubscripts();
        hasSuper = true;
    }
    else {
        hasSuper = false;
    }
    tsAfterParseClassSuper(hasSuper);
}
// Parses module export declaration.
function parseExport() {
    const exportIndex = state.tokens.length - 1;
    if (tsTryParseExport()) {
        return;
    }
    // export * from '...'
    if (shouldParseExportStar()) {
        parseExportStar();
    }
    else if (isExportDefaultSpecifier()) {
        // export default from
        parseIdentifier();
        if (match(TokenType.comma) && lookaheadType() === TokenType.star) {
            expect(TokenType.comma);
            expect(TokenType.star);
            expectContextual(ContextualKeyword._as);
            parseIdentifier();
        }
        else {
            parseExportSpecifiersMaybe();
        }
        parseExportFrom();
    }
    else if (eat(TokenType._default)) {
        // export default ...
        parseExportDefaultExpression();
    }
    else if (shouldParseExportDeclaration()) {
        parseExportDeclaration();
    }
    else {
        // export { x, y as z } [from '...']
        parseExportSpecifiers();
        parseExportFrom();
    }
    state.tokens[exportIndex].rhsEndIndex = state.tokens.length;
}
function parseExportDefaultExpression() {
    if (tsTryParseExportDefaultExpression()) {
        return;
    }
    const functionStart = state.start;
    if (eat(TokenType._function)) {
        parseFunction(functionStart, true, true);
    }
    else if (isContextual(ContextualKeyword._async) && lookaheadType() === TokenType._function) {
        // async function declaration
        eatContextual(ContextualKeyword._async);
        eat(TokenType._function);
        parseFunction(functionStart, true, true);
    }
    else if (match(TokenType._class)) {
        parseClass(true, true);
    }
    else if (match(TokenType.at)) {
        parseDecorators();
        parseClass(true, true);
    }
    else {
        parseMaybeAssign();
        semicolon();
    }
}
function parseExportDeclaration() {
    tsParseExportDeclaration();
}
function isExportDefaultSpecifier() {
    if (tsIsDeclarationStart()) {
        return false;
    }
    if (match(TokenType.name)) {
        return state.contextualKeyword !== ContextualKeyword._async;
    }
    if (!match(TokenType._default)) {
        return false;
    }
    const _next = nextTokenStart();
    const lookahead = lookaheadTypeAndKeyword();
    const hasFrom = lookahead.type === TokenType.name && lookahead.contextualKeyword === ContextualKeyword._from;
    if (lookahead.type === TokenType.comma) {
        return true;
    }
    // lookahead again when `export default from` is seen
    if (hasFrom) {
        const nextAfterFrom = input.charCodeAt(nextTokenStartSince(_next + 4));
        return nextAfterFrom === charCodes.quotationMark || nextAfterFrom === charCodes.apostrophe;
    }
    return false;
}
function parseExportSpecifiersMaybe() {
    if (eat(TokenType.comma)) {
        parseExportSpecifiers();
    }
}
function parseExportFrom() {
    if (eatContextual(ContextualKeyword._from)) {
        parseExprAtom();
    }
    semicolon();
}
function shouldParseExportStar() {
    return match(TokenType.star);
}
function parseExportStar() {
    baseParseExportStar();
}
function baseParseExportStar() {
    expect(TokenType.star);
    if (isContextual(ContextualKeyword._as)) {
        parseExportNamespace();
    }
    else {
        parseExportFrom();
    }
}
function parseExportNamespace() {
    next();
    state.tokens[state.tokens.length - 1].type = TokenType._as;
    parseIdentifier();
    parseExportSpecifiersMaybe();
    parseExportFrom();
}
function shouldParseExportDeclaration() {
    return (tsIsDeclarationStart() ||
        state.type === TokenType._var ||
        state.type === TokenType._const ||
        state.type === TokenType._let ||
        state.type === TokenType._function ||
        state.type === TokenType._class ||
        isContextual(ContextualKeyword._async) ||
        match(TokenType.at));
}
// Parses a comma-separated list of module exports.
function parseExportSpecifiers() {
    let first = true;
    // export { x, y as z } [from '...']
    expect(TokenType.braceL);
    while (!eat(TokenType.braceR) && !state.error) {
        if (first) {
            first = false;
        }
        else {
            expect(TokenType.comma);
            if (eat(TokenType.braceR)) {
                break;
            }
        }
        parseIdentifier();
        state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ExportAccess;
        if (eatContextual(ContextualKeyword._as)) {
            parseIdentifier();
        }
    }
}
// Parses import declaration.
function parseImport() {
    if (match(TokenType.name) && lookaheadType() === TokenType.eq) {
        tsParseImportEqualsDeclaration();
        return;
    }
    eatContextual(ContextualKeyword._type);
    // import '...'
    if (match(TokenType.string)) {
        parseExprAtom();
    }
    else {
        parseImportSpecifiers();
        expectContextual(ContextualKeyword._from);
        parseExprAtom();
    }
    semicolon();
}
// eslint-disable-next-line no-unused-vars
function shouldParseDefaultImport() {
    return match(TokenType.name);
}
function parseImportSpecifierLocal() {
    parseImportedIdentifier();
}
// Parses a comma-separated list of module imports.
function parseImportSpecifiers() {
    let first = true;
    if (shouldParseDefaultImport()) {
        // import defaultObj, { x, y as z } from '...'
        parseImportSpecifierLocal();
        if (!eat(TokenType.comma))
            return;
    }
    if (match(TokenType.star)) {
        next();
        expectContextual(ContextualKeyword._as);
        parseImportSpecifierLocal();
        return;
    }
    expect(TokenType.braceL);
    while (!eat(TokenType.braceR) && !state.error) {
        if (first) {
            first = false;
        }
        else {
            // Detect an attempt to deep destructure
            if (eat(TokenType.colon)) {
                unexpected("ES2015 named imports do not destructure. Use another statement for destructuring after the import.");
            }
            expect(TokenType.comma);
            if (eat(TokenType.braceR)) {
                break;
            }
        }
        parseImportSpecifier();
    }
}
function parseImportSpecifier() {
    parseImportedIdentifier();
    if (isContextual(ContextualKeyword._as)) {
        state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ImportAccess;
        next();
        parseImportedIdentifier();
    }
}

function parseFile() {
    // If enabled, skip leading hashbang line.
    if (state.pos === 0 &&
        input.charCodeAt(0) === charCodes.numberSign &&
        input.charCodeAt(1) === charCodes.exclamationMark) {
        skipLineComment(2);
    }
    nextToken();
    return parseTopLevel();
}

class File {
    constructor(tokens, scopes) {
        this.tokens = tokens;
        this.scopes = scopes;
    }
}
function parse(input, isJSXEnabled) {
    initParser(input, isJSXEnabled);
    const result = parseFile();
    if (state.error) {
        throw augmentError(state.error);
    }
    return result;
}

/**
 * Determine whether this optional chain or nullish coalescing operation has any await statements in
 * it. If so, we'll need to transpile to an async operation.
 *
 * We compute this by walking the length of the operation and returning true if we see an await
 * keyword used as a real await (rather than an object key or property access). Nested optional
 * chain/nullish operations need to be tracked but don't silence await, but a nested async function
 * (or any other nested scope) will make the await not count.
 */
function isAsyncOperation(tokens) {
    let index = tokens.currentIndex();
    let depth = 0;
    const startToken = tokens.currentToken();
    do {
        const token = tokens.tokens[index];
        if (token.isOptionalChainStart) {
            depth++;
        }
        if (token.isOptionalChainEnd) {
            depth--;
        }
        depth += token.numNullishCoalesceStarts;
        depth -= token.numNullishCoalesceEnds;
        if (token.contextualKeyword === ContextualKeyword._await &&
            token.identifierRole == null &&
            token.scopeDepth === startToken.scopeDepth) {
            return true;
        }
        index += 1;
    } while (depth > 0 && index < tokens.tokens.length);
    return false;
}

class TokenProcessor {
    constructor(code, tokens, isFlowEnabled, helperManager) {
        this.code = code;
        this.tokens = tokens;
        this.isFlowEnabled = isFlowEnabled;
        this.helperManager = helperManager;
        this.resultCode = "";
        this.tokenIndex = 0;
    }
    /**
     * Make a new TokenProcessor for things like lookahead.
     */
    snapshot() {
        return { resultCode: this.resultCode, tokenIndex: this.tokenIndex };
    }
    restoreToSnapshot(snapshot) {
        this.resultCode = snapshot.resultCode;
        this.tokenIndex = snapshot.tokenIndex;
    }
    getResultCodeIndex() {
        return this.resultCode.length;
    }
    reset() {
        this.resultCode = "";
        this.tokenIndex = 0;
    }
    matchesContextualAtIndex(index, contextualKeyword) {
        return (this.matches1AtIndex(index, TokenType.name) &&
            this.tokens[index].contextualKeyword === contextualKeyword);
    }
    identifierNameAtIndex(index) {
        // TODO: We need to process escapes since technically you can have unicode escapes in variable
        // names.
        return this.identifierNameForToken(this.tokens[index]);
    }
    identifierName() {
        return this.identifierNameForToken(this.currentToken());
    }
    identifierNameForToken(token) {
        return this.code.slice(token.start, token.end);
    }
    rawCodeForToken(token) {
        return this.code.slice(token.start, token.end);
    }
    stringValueAtIndex(index) {
        return this.stringValueForToken(this.tokens[index]);
    }
    stringValue() {
        return this.stringValueForToken(this.currentToken());
    }
    stringValueForToken(token) {
        // This is used to identify when two imports are the same and to resolve TypeScript enum keys.
        // Ideally we'd process escapes within the strings, but for now we pretty much take the raw
        // code.
        return this.code.slice(token.start + 1, token.end - 1);
    }
    matches1AtIndex(index, t1) {
        return this.tokens[index].type === t1;
    }
    matches2AtIndex(index, t1, t2) {
        return this.tokens[index].type === t1 && this.tokens[index + 1].type === t2;
    }
    matches3AtIndex(index, t1, t2, t3) {
        return (this.tokens[index].type === t1 &&
            this.tokens[index + 1].type === t2 &&
            this.tokens[index + 2].type === t3);
    }
    matches1(t1) {
        return this.tokens[this.tokenIndex].type === t1;
    }
    matches2(t1, t2) {
        return this.tokens[this.tokenIndex].type === t1 && this.tokens[this.tokenIndex + 1].type === t2;
    }
    matches3(t1, t2, t3) {
        return (this.tokens[this.tokenIndex].type === t1 &&
            this.tokens[this.tokenIndex + 1].type === t2 &&
            this.tokens[this.tokenIndex + 2].type === t3);
    }
    matches4(t1, t2, t3, t4) {
        return (this.tokens[this.tokenIndex].type === t1 &&
            this.tokens[this.tokenIndex + 1].type === t2 &&
            this.tokens[this.tokenIndex + 2].type === t3 &&
            this.tokens[this.tokenIndex + 3].type === t4);
    }
    matches5(t1, t2, t3, t4, t5) {
        return (this.tokens[this.tokenIndex].type === t1 &&
            this.tokens[this.tokenIndex + 1].type === t2 &&
            this.tokens[this.tokenIndex + 2].type === t3 &&
            this.tokens[this.tokenIndex + 3].type === t4 &&
            this.tokens[this.tokenIndex + 4].type === t5);
    }
    matchesContextual(contextualKeyword) {
        return this.matchesContextualAtIndex(this.tokenIndex, contextualKeyword);
    }
    matchesContextIdAndLabel(type, contextId) {
        return this.matches1(type) && this.currentToken().contextId === contextId;
    }
    previousWhitespaceAndComments() {
        let whitespaceAndComments = this.code.slice(this.tokenIndex > 0 ? this.tokens[this.tokenIndex - 1].end : 0, this.tokenIndex < this.tokens.length ? this.tokens[this.tokenIndex].start : this.code.length);
        if (this.isFlowEnabled) {
            whitespaceAndComments = whitespaceAndComments.replace(/@flow/g, "");
        }
        return whitespaceAndComments;
    }
    replaceToken(newCode) {
        this.resultCode += this.previousWhitespaceAndComments();
        this.appendTokenPrefix();
        this.resultCode += newCode;
        this.appendTokenSuffix();
        this.tokenIndex++;
    }
    replaceTokenTrimmingLeftWhitespace(newCode) {
        this.resultCode += this.previousWhitespaceAndComments().replace(/[^\r\n]/g, "");
        this.appendTokenPrefix();
        this.resultCode += newCode;
        this.appendTokenSuffix();
        this.tokenIndex++;
    }
    removeInitialToken() {
        this.replaceToken("");
    }
    removeToken() {
        this.replaceTokenTrimmingLeftWhitespace("");
    }
    copyExpectedToken(tokenType) {
        if (this.tokens[this.tokenIndex].type !== tokenType) {
            throw new Error(`Expected token ${tokenType}`);
        }
        this.copyToken();
    }
    copyToken() {
        this.resultCode += this.previousWhitespaceAndComments();
        this.appendTokenPrefix();
        this.resultCode += this.code.slice(this.tokens[this.tokenIndex].start, this.tokens[this.tokenIndex].end);
        this.appendTokenSuffix();
        this.tokenIndex++;
    }
    copyTokenWithPrefix(prefix) {
        this.resultCode += this.previousWhitespaceAndComments();
        this.appendTokenPrefix();
        this.resultCode += prefix;
        this.resultCode += this.code.slice(this.tokens[this.tokenIndex].start, this.tokens[this.tokenIndex].end);
        this.appendTokenSuffix();
        this.tokenIndex++;
    }
    appendTokenPrefix() {
        const token = this.currentToken();
        if (token.numNullishCoalesceStarts || token.isOptionalChainStart) {
            token.isAsyncOperation = isAsyncOperation(this);
        }
        if (token.numNullishCoalesceStarts) {
            for (let i = 0; i < token.numNullishCoalesceStarts; i++) {
                if (token.isAsyncOperation) {
                    this.resultCode += "await ";
                    this.resultCode += this.helperManager.getHelperName("asyncNullishCoalesce");
                }
                else {
                    this.resultCode += this.helperManager.getHelperName("nullishCoalesce");
                }
                this.resultCode += "(";
            }
        }
        if (token.isOptionalChainStart) {
            if (token.isAsyncOperation) {
                this.resultCode += "await ";
            }
            if (this.tokenIndex > 0 && this.tokenAtRelativeIndex(-1).type === TokenType._delete) {
                if (token.isAsyncOperation) {
                    this.resultCode += this.helperManager.getHelperName("asyncOptionalChainDelete");
                }
                else {
                    this.resultCode += this.helperManager.getHelperName("optionalChainDelete");
                }
            }
            else if (token.isAsyncOperation) {
                this.resultCode += this.helperManager.getHelperName("asyncOptionalChain");
            }
            else {
                this.resultCode += this.helperManager.getHelperName("optionalChain");
            }
            this.resultCode += "([";
        }
    }
    appendTokenSuffix() {
        const token = this.currentToken();
        if (token.isOptionalChainEnd) {
            this.resultCode += "])";
        }
        if (token.numNullishCoalesceEnds) {
            for (let i = 0; i < token.numNullishCoalesceEnds; i++) {
                this.resultCode += "))";
            }
        }
    }
    appendCode(code) {
        this.resultCode += code;
    }
    currentToken() {
        return this.tokens[this.tokenIndex];
    }
    currentTokenCode() {
        const token = this.currentToken();
        return this.code.slice(token.start, token.end);
    }
    tokenAtRelativeIndex(relativeIndex) {
        return this.tokens[this.tokenIndex + relativeIndex];
    }
    currentIndex() {
        return this.tokenIndex;
    }
    /**
     * Move to the next token. Only suitable in preprocessing steps. When
     * generating new code, you should use copyToken or removeToken.
     */
    nextToken() {
        if (this.tokenIndex === this.tokens.length) {
            throw new Error("Unexpectedly reached end of input.");
        }
        this.tokenIndex++;
    }
    previousToken() {
        this.tokenIndex--;
    }
    finish() {
        if (this.tokenIndex !== this.tokens.length) {
            throw new Error("Tried to finish processing tokens before reaching the end.");
        }
        this.resultCode += this.previousWhitespaceAndComments();
        return this.resultCode;
    }
    isAtEnd() {
        return this.tokenIndex === this.tokens.length;
    }
}

/**
 * Get information about the class fields for this class, given a token processor pointing to the
 * open-brace at the start of the class.
 */
function getClassInfo(rootTransformer, tokens, nameManager) {
    const snapshot = tokens.snapshot();
    const headerInfo = processClassHeader(tokens);
    let constructorInitializerStatements = [];
    const instanceInitializerNames = [];
    const staticInitializerNames = [];
    let constructorInsertPos = null;
    const fields = [];
    const rangesToRemove = [];
    const classContextId = tokens.currentToken().contextId;
    if (classContextId == null) {
        throw new Error("Expected non-null class context ID on class open-brace.");
    }
    tokens.nextToken();
    while (!tokens.matchesContextIdAndLabel(TokenType.braceR, classContextId)) {
        if (tokens.matchesContextual(ContextualKeyword._constructor) && !tokens.currentToken().isType) {
            ({ constructorInitializerStatements, constructorInsertPos } = processConstructor(tokens));
        }
        else if (tokens.matches1(TokenType.semi)) {
            rangesToRemove.push({ start: tokens.currentIndex(), end: tokens.currentIndex() + 1 });
            tokens.nextToken();
        }
        else if (tokens.currentToken().isType) {
            tokens.nextToken();
        }
        else {
            // Either a method or a field. Skip to the identifier part.
            const statementStartIndex = tokens.currentIndex();
            let isStatic = false;
            let isESPrivate = false;
            while (isAccessModifier(tokens.currentToken())) {
                if (tokens.matches1(TokenType._static)) {
                    isStatic = true;
                }
                if (tokens.matches1(TokenType.hash)) {
                    isESPrivate = true;
                }
                tokens.nextToken();
            }
            if (isStatic && tokens.matches1(TokenType.braceL)) {
                // This is a static block, so don't process it in any special way.
                skipToNextClassElement(tokens, classContextId);
                continue;
            }
            if (isESPrivate) {
                // Sucrase doesn't attempt to transpile private fields; just leave them as-is.
                skipToNextClassElement(tokens, classContextId);
                continue;
            }
            if (tokens.matchesContextual(ContextualKeyword._constructor) &&
                !tokens.currentToken().isType) {
                ({ constructorInitializerStatements, constructorInsertPos } = processConstructor(tokens));
                continue;
            }
            const nameStartIndex = tokens.currentIndex();
            skipFieldName(tokens);
            if (tokens.matches1(TokenType.lessThan) || tokens.matches1(TokenType.parenL)) {
                // This is a method, so nothing to process.
                skipToNextClassElement(tokens, classContextId);
                continue;
            }
            // There might be a type annotation that we need to skip.
            while (tokens.currentToken().isType) {
                tokens.nextToken();
            }
            if (tokens.matches1(TokenType.eq)) {
                const equalsIndex = tokens.currentIndex();
                // This is an initializer, so we need to wrap in an initializer method.
                const valueEnd = tokens.currentToken().rhsEndIndex;
                if (valueEnd == null) {
                    throw new Error("Expected rhsEndIndex on class field assignment.");
                }
                tokens.nextToken();
                while (tokens.currentIndex() < valueEnd) {
                    rootTransformer.processToken();
                }
                let initializerName;
                if (isStatic) {
                    initializerName = nameManager.claimFreeName("__initStatic");
                    staticInitializerNames.push(initializerName);
                }
                else {
                    initializerName = nameManager.claimFreeName("__init");
                    instanceInitializerNames.push(initializerName);
                }
                // Fields start at the name, so `static x = 1;` has a field range of `x = 1;`.
                fields.push({
                    initializerName,
                    equalsIndex,
                    start: nameStartIndex,
                    end: tokens.currentIndex(),
                });
            }
            else {
                // This is just a declaration, so doesn't need to produce any code in the output.
                rangesToRemove.push({ start: statementStartIndex, end: tokens.currentIndex() });
            }
        }
    }
    tokens.restoreToSnapshot(snapshot);
    return {
        headerInfo,
        constructorInitializerStatements,
        instanceInitializerNames,
        staticInitializerNames,
        constructorInsertPos,
        fields,
        rangesToRemove,
    };
}
/**
 * Move the token processor to the next method/field in the class.
 *
 * To do that, we seek forward to the next start of a class name (either an open
 * bracket or an identifier, or the closing curly brace), then seek backward to
 * include any access modifiers.
 */
function skipToNextClassElement(tokens, classContextId) {
    tokens.nextToken();
    while (tokens.currentToken().contextId !== classContextId) {
        tokens.nextToken();
    }
    while (isAccessModifier(tokens.tokenAtRelativeIndex(-1))) {
        tokens.previousToken();
    }
}
function processClassHeader(tokens) {
    const classToken = tokens.currentToken();
    const contextId = classToken.contextId;
    if (contextId == null) {
        throw new Error("Expected context ID on class token.");
    }
    const isExpression = classToken.isExpression;
    if (isExpression == null) {
        throw new Error("Expected isExpression on class token.");
    }
    let className = null;
    let hasSuperclass = false;
    tokens.nextToken();
    if (tokens.matches1(TokenType.name)) {
        className = tokens.identifierName();
    }
    while (!tokens.matchesContextIdAndLabel(TokenType.braceL, contextId)) {
        // If this has a superclass, there will always be an `extends` token. If it doesn't have a
        // superclass, only type parameters and `implements` clauses can show up here, all of which
        // consist only of type tokens. A declaration like `class A<B extends C> {` should *not* count
        // as having a superclass.
        if (tokens.matches1(TokenType._extends) && !tokens.currentToken().isType) {
            hasSuperclass = true;
        }
        tokens.nextToken();
    }
    return { isExpression, className, hasSuperclass };
}
/**
 * Extract useful information out of a constructor, starting at the "constructor" name.
 */
function processConstructor(tokens) {
    const constructorInitializerStatements = [];
    tokens.nextToken();
    const constructorContextId = tokens.currentToken().contextId;
    if (constructorContextId == null) {
        throw new Error("Expected context ID on open-paren starting constructor params.");
    }
    // Advance through parameters looking for access modifiers.
    while (!tokens.matchesContextIdAndLabel(TokenType.parenR, constructorContextId)) {
        if (tokens.currentToken().contextId === constructorContextId) {
            // Current token is an open paren or comma just before a param, so check
            // that param for access modifiers.
            tokens.nextToken();
            if (isAccessModifier(tokens.currentToken())) {
                tokens.nextToken();
                while (isAccessModifier(tokens.currentToken())) {
                    tokens.nextToken();
                }
                const token = tokens.currentToken();
                if (token.type !== TokenType.name) {
                    throw new Error("Expected identifier after access modifiers in constructor arg.");
                }
                const name = tokens.identifierNameForToken(token);
                constructorInitializerStatements.push(`this.${name} = ${name}`);
            }
        }
        else {
            tokens.nextToken();
        }
    }
    // )
    tokens.nextToken();
    let constructorInsertPos = tokens.currentIndex();
    // Advance through body looking for a super call.
    let foundSuperCall = false;
    while (!tokens.matchesContextIdAndLabel(TokenType.braceR, constructorContextId)) {
        if (!foundSuperCall && tokens.matches2(TokenType._super, TokenType.parenL)) {
            tokens.nextToken();
            const superCallContextId = tokens.currentToken().contextId;
            if (superCallContextId == null) {
                throw new Error("Expected a context ID on the super call");
            }
            while (!tokens.matchesContextIdAndLabel(TokenType.parenR, superCallContextId)) {
                tokens.nextToken();
            }
            constructorInsertPos = tokens.currentIndex();
            foundSuperCall = true;
        }
        tokens.nextToken();
    }
    // }
    tokens.nextToken();
    return { constructorInitializerStatements, constructorInsertPos };
}
/**
 * Determine if this is any token that can go before the name in a method/field.
 */
function isAccessModifier(token) {
    return [
        TokenType._async,
        TokenType._get,
        TokenType._set,
        TokenType.plus,
        TokenType.minus,
        TokenType._readonly,
        TokenType._static,
        TokenType._public,
        TokenType._private,
        TokenType._protected,
        TokenType._abstract,
        TokenType.star,
        TokenType._declare,
        TokenType.hash,
    ].includes(token.type);
}
/**
 * The next token or set of tokens is either an identifier or an expression in square brackets, for
 * a method or field name.
 */
function skipFieldName(tokens) {
    if (tokens.matches1(TokenType.bracketL)) {
        const startToken = tokens.currentToken();
        const classContextId = startToken.contextId;
        if (classContextId == null) {
            throw new Error("Expected class context ID on computed name open bracket.");
        }
        while (!tokens.matchesContextIdAndLabel(TokenType.bracketR, classContextId)) {
            tokens.nextToken();
        }
        tokens.nextToken();
    }
    else {
        tokens.nextToken();
    }
}

function elideImportEquals(tokens) {
    // import
    tokens.removeInitialToken();
    // name
    tokens.removeToken();
    // =
    tokens.removeToken();
    // name or require
    tokens.removeToken();
    // Handle either `import A = require('A')` or `import A = B.C.D`.
    if (tokens.matches1(TokenType.parenL)) {
        // (
        tokens.removeToken();
        // path string
        tokens.removeToken();
        // )
        tokens.removeToken();
    }
    else {
        while (tokens.matches1(TokenType.dot)) {
            // .
            tokens.removeToken();
            // name
            tokens.removeToken();
        }
    }
}

const EMPTY_DECLARATION_INFO = {
    typeDeclarations: new Set(),
    valueDeclarations: new Set(),
};
/**
 * Get all top-level identifiers that should be preserved when exported in TypeScript.
 *
 * Examples:
 * - If an identifier is declared as `const x`, then `export {x}` should be preserved.
 * - If it's declared as `type x`, then `export {x}` should be removed.
 * - If it's declared as both `const x` and `type x`, then the export should be preserved.
 * - Classes and enums should be preserved (even though they also introduce types).
 * - Imported identifiers should be preserved since we don't have enough information to
 *   rule them out. --isolatedModules disallows re-exports, which catches errors here.
 */
function getDeclarationInfo(tokens) {
    const typeDeclarations = new Set();
    const valueDeclarations = new Set();
    for (let i = 0; i < tokens.tokens.length; i++) {
        const token = tokens.tokens[i];
        if (token.type === TokenType.name && isTopLevelDeclaration(token)) {
            if (token.isType) {
                typeDeclarations.add(tokens.identifierNameForToken(token));
            }
            else {
                valueDeclarations.add(tokens.identifierNameForToken(token));
            }
        }
    }
    return { typeDeclarations, valueDeclarations };
}

const entities = {
    quot: "\u0022",
    amp: "&",
    apos: "\u0027",
    lt: "<",
    gt: ">",
    nbsp: "\u00A0",
    iexcl: "\u00A1",
    cent: "\u00A2",
    pound: "\u00A3",
    curren: "\u00A4",
    yen: "\u00A5",
    brvbar: "\u00A6",
    sect: "\u00A7",
    uml: "\u00A8",
    copy: "\u00A9",
    ordf: "\u00AA",
    laquo: "\u00AB",
    not: "\u00AC",
    shy: "\u00AD",
    reg: "\u00AE",
    macr: "\u00AF",
    deg: "\u00B0",
    plusmn: "\u00B1",
    sup2: "\u00B2",
    sup3: "\u00B3",
    acute: "\u00B4",
    micro: "\u00B5",
    para: "\u00B6",
    middot: "\u00B7",
    cedil: "\u00B8",
    sup1: "\u00B9",
    ordm: "\u00BA",
    raquo: "\u00BB",
    frac14: "\u00BC",
    frac12: "\u00BD",
    frac34: "\u00BE",
    iquest: "\u00BF",
    Agrave: "\u00C0",
    Aacute: "\u00C1",
    Acirc: "\u00C2",
    Atilde: "\u00C3",
    Auml: "\u00C4",
    Aring: "\u00C5",
    AElig: "\u00C6",
    Ccedil: "\u00C7",
    Egrave: "\u00C8",
    Eacute: "\u00C9",
    Ecirc: "\u00CA",
    Euml: "\u00CB",
    Igrave: "\u00CC",
    Iacute: "\u00CD",
    Icirc: "\u00CE",
    Iuml: "\u00CF",
    ETH: "\u00D0",
    Ntilde: "\u00D1",
    Ograve: "\u00D2",
    Oacute: "\u00D3",
    Ocirc: "\u00D4",
    Otilde: "\u00D5",
    Ouml: "\u00D6",
    times: "\u00D7",
    Oslash: "\u00D8",
    Ugrave: "\u00D9",
    Uacute: "\u00DA",
    Ucirc: "\u00DB",
    Uuml: "\u00DC",
    Yacute: "\u00DD",
    THORN: "\u00DE",
    szlig: "\u00DF",
    agrave: "\u00E0",
    aacute: "\u00E1",
    acirc: "\u00E2",
    atilde: "\u00E3",
    auml: "\u00E4",
    aring: "\u00E5",
    aelig: "\u00E6",
    ccedil: "\u00E7",
    egrave: "\u00E8",
    eacute: "\u00E9",
    ecirc: "\u00EA",
    euml: "\u00EB",
    igrave: "\u00EC",
    iacute: "\u00ED",
    icirc: "\u00EE",
    iuml: "\u00EF",
    eth: "\u00F0",
    ntilde: "\u00F1",
    ograve: "\u00F2",
    oacute: "\u00F3",
    ocirc: "\u00F4",
    otilde: "\u00F5",
    ouml: "\u00F6",
    divide: "\u00F7",
    oslash: "\u00F8",
    ugrave: "\u00F9",
    uacute: "\u00FA",
    ucirc: "\u00FB",
    uuml: "\u00FC",
    yacute: "\u00FD",
    thorn: "\u00FE",
    yuml: "\u00FF",
    OElig: "\u0152",
    oelig: "\u0153",
    Scaron: "\u0160",
    scaron: "\u0161",
    Yuml: "\u0178",
    fnof: "\u0192",
    circ: "\u02C6",
    tilde: "\u02DC",
    Alpha: "\u0391",
    Beta: "\u0392",
    Gamma: "\u0393",
    Delta: "\u0394",
    Epsilon: "\u0395",
    Zeta: "\u0396",
    Eta: "\u0397",
    Theta: "\u0398",
    Iota: "\u0399",
    Kappa: "\u039A",
    Lambda: "\u039B",
    Mu: "\u039C",
    Nu: "\u039D",
    Xi: "\u039E",
    Omicron: "\u039F",
    Pi: "\u03A0",
    Rho: "\u03A1",
    Sigma: "\u03A3",
    Tau: "\u03A4",
    Upsilon: "\u03A5",
    Phi: "\u03A6",
    Chi: "\u03A7",
    Psi: "\u03A8",
    Omega: "\u03A9",
    alpha: "\u03B1",
    beta: "\u03B2",
    gamma: "\u03B3",
    delta: "\u03B4",
    epsilon: "\u03B5",
    zeta: "\u03B6",
    eta: "\u03B7",
    theta: "\u03B8",
    iota: "\u03B9",
    kappa: "\u03BA",
    lambda: "\u03BB",
    mu: "\u03BC",
    nu: "\u03BD",
    xi: "\u03BE",
    omicron: "\u03BF",
    pi: "\u03C0",
    rho: "\u03C1",
    sigmaf: "\u03C2",
    sigma: "\u03C3",
    tau: "\u03C4",
    upsilon: "\u03C5",
    phi: "\u03C6",
    chi: "\u03C7",
    psi: "\u03C8",
    omega: "\u03C9",
    thetasym: "\u03D1",
    upsih: "\u03D2",
    piv: "\u03D6",
    ensp: "\u2002",
    emsp: "\u2003",
    thinsp: "\u2009",
    zwnj: "\u200C",
    zwj: "\u200D",
    lrm: "\u200E",
    rlm: "\u200F",
    ndash: "\u2013",
    mdash: "\u2014",
    lsquo: "\u2018",
    rsquo: "\u2019",
    sbquo: "\u201A",
    ldquo: "\u201C",
    rdquo: "\u201D",
    bdquo: "\u201E",
    dagger: "\u2020",
    Dagger: "\u2021",
    bull: "\u2022",
    hellip: "\u2026",
    permil: "\u2030",
    prime: "\u2032",
    Prime: "\u2033",
    lsaquo: "\u2039",
    rsaquo: "\u203A",
    oline: "\u203E",
    frasl: "\u2044",
    euro: "\u20AC",
    image: "\u2111",
    weierp: "\u2118",
    real: "\u211C",
    trade: "\u2122",
    alefsym: "\u2135",
    larr: "\u2190",
    uarr: "\u2191",
    rarr: "\u2192",
    darr: "\u2193",
    harr: "\u2194",
    crarr: "\u21B5",
    lArr: "\u21D0",
    uArr: "\u21D1",
    rArr: "\u21D2",
    dArr: "\u21D3",
    hArr: "\u21D4",
    forall: "\u2200",
    part: "\u2202",
    exist: "\u2203",
    empty: "\u2205",
    nabla: "\u2207",
    isin: "\u2208",
    notin: "\u2209",
    ni: "\u220B",
    prod: "\u220F",
    sum: "\u2211",
    minus: "\u2212",
    lowast: "\u2217",
    radic: "\u221A",
    prop: "\u221D",
    infin: "\u221E",
    ang: "\u2220",
    and: "\u2227",
    or: "\u2228",
    cap: "\u2229",
    cup: "\u222A",
    int: "\u222B",
    there4: "\u2234",
    sim: "\u223C",
    cong: "\u2245",
    asymp: "\u2248",
    ne: "\u2260",
    equiv: "\u2261",
    le: "\u2264",
    ge: "\u2265",
    sub: "\u2282",
    sup: "\u2283",
    nsub: "\u2284",
    sube: "\u2286",
    supe: "\u2287",
    oplus: "\u2295",
    otimes: "\u2297",
    perp: "\u22A5",
    sdot: "\u22C5",
    lceil: "\u2308",
    rceil: "\u2309",
    lfloor: "\u230A",
    rfloor: "\u230B",
    lang: "\u2329",
    rang: "\u232A",
    loz: "\u25CA",
    spades: "\u2660",
    clubs: "\u2663",
    hearts: "\u2665",
    diams: "\u2666",
};

function getJSXPragmaInfo(options) {
    const [base, suffix] = splitPragma(options.jsxPragma || "React.createElement");
    const [fragmentBase, fragmentSuffix] = splitPragma(options.jsxFragmentPragma || "React.Fragment");
    return { base, suffix, fragmentBase, fragmentSuffix };
}
function splitPragma(pragma) {
    let dotIndex = pragma.indexOf(".");
    if (dotIndex === -1) {
        dotIndex = pragma.length;
    }
    return [pragma.slice(0, dotIndex), pragma.slice(dotIndex)];
}

class Transformer {
    getPrefixCode() {
        return "";
    }
    getHoistedCode() {
        return "";
    }
    getSuffixCode() {
        return "";
    }
}

const HEX_NUMBER = /^[\da-fA-F]+$/;
const DECIMAL_NUMBER = /^\d+$/;
class JSXTransformer extends Transformer {
    constructor(rootTransformer, tokens, importProcessor, nameManager, options) {
        super();
        this.rootTransformer = rootTransformer;
        this.tokens = tokens;
        this.importProcessor = importProcessor;
        this.nameManager = nameManager;
        this.options = options;
        this.lastLineNumber = 1;
        this.lastIndex = 0;
        this.filenameVarName = null;
        this.jsxPragmaInfo = getJSXPragmaInfo(options);
    }
    process() {
        if (this.tokens.matches1(TokenType.jsxTagStart)) {
            this.processJSXTag();
            return true;
        }
        return false;
    }
    getPrefixCode() {
        if (this.filenameVarName) {
            return `const ${this.filenameVarName} = ${JSON.stringify(this.options.filePath || "")};`;
        }
        else {
            return "";
        }
    }
    /**
     * Lazily calculate line numbers to avoid unneeded work. We assume this is always called in
     * increasing order by index.
     */
    getLineNumberForIndex(index) {
        const code = this.tokens.code;
        while (this.lastIndex < index && this.lastIndex < code.length) {
            if (code[this.lastIndex] === "\n") {
                this.lastLineNumber++;
            }
            this.lastIndex++;
        }
        return this.lastLineNumber;
    }
    getFilenameVarName() {
        if (!this.filenameVarName) {
            this.filenameVarName = this.nameManager.claimFreeName("_jsxFileName");
        }
        return this.filenameVarName;
    }
    processProps(firstTokenStart) {
        const lineNumber = this.getLineNumberForIndex(firstTokenStart);
        const devProps = this.options.production
            ? ""
            : `__self: this, __source: {fileName: ${this.getFilenameVarName()}, lineNumber: ${lineNumber}}`;
        if (!this.tokens.matches1(TokenType.jsxName) && !this.tokens.matches1(TokenType.braceL)) {
            if (devProps) {
                this.tokens.appendCode(`, {${devProps}}`);
            }
            else {
                this.tokens.appendCode(`, null`);
            }
            return;
        }
        this.tokens.appendCode(`, {`);
        while (true) {
            if (this.tokens.matches2(TokenType.jsxName, TokenType.eq)) {
                this.processPropKeyName();
                this.tokens.replaceToken(": ");
                if (this.tokens.matches1(TokenType.braceL)) {
                    this.tokens.replaceToken("");
                    this.rootTransformer.processBalancedCode();
                    this.tokens.replaceToken("");
                }
                else if (this.tokens.matches1(TokenType.jsxTagStart)) {
                    this.processJSXTag();
                }
                else {
                    this.processStringPropValue();
                }
            }
            else if (this.tokens.matches1(TokenType.jsxName)) {
                this.processPropKeyName();
                this.tokens.appendCode(": true");
            }
            else if (this.tokens.matches1(TokenType.braceL)) {
                this.tokens.replaceToken("");
                this.rootTransformer.processBalancedCode();
                this.tokens.replaceToken("");
            }
            else {
                break;
            }
            this.tokens.appendCode(",");
        }
        if (devProps) {
            this.tokens.appendCode(` ${devProps}}`);
        }
        else {
            this.tokens.appendCode("}");
        }
    }
    processPropKeyName() {
        const keyName = this.tokens.identifierName();
        if (keyName.includes("-")) {
            this.tokens.replaceToken(`'${keyName}'`);
        }
        else {
            this.tokens.copyToken();
        }
    }
    processStringPropValue() {
        const token = this.tokens.currentToken();
        const valueCode = this.tokens.code.slice(token.start + 1, token.end - 1);
        const replacementCode = formatJSXTextReplacement(valueCode);
        const literalCode = formatJSXStringValueLiteral(valueCode);
        this.tokens.replaceToken(literalCode + replacementCode);
    }
    /**
     * Process the first part of a tag, before any props.
     */
    processTagIntro() {
        // Walk forward until we see one of these patterns:
        // jsxName to start the first prop, preceded by another jsxName to end the tag name.
        // jsxName to start the first prop, preceded by greaterThan to end the type argument.
        // [open brace] to start the first prop.
        // [jsxTagEnd] to end the open-tag.
        // [slash, jsxTagEnd] to end the self-closing tag.
        let introEnd = this.tokens.currentIndex() + 1;
        while (this.tokens.tokens[introEnd].isType ||
            (!this.tokens.matches2AtIndex(introEnd - 1, TokenType.jsxName, TokenType.jsxName) &&
                !this.tokens.matches2AtIndex(introEnd - 1, TokenType.greaterThan, TokenType.jsxName) &&
                !this.tokens.matches1AtIndex(introEnd, TokenType.braceL) &&
                !this.tokens.matches1AtIndex(introEnd, TokenType.jsxTagEnd) &&
                !this.tokens.matches2AtIndex(introEnd, TokenType.slash, TokenType.jsxTagEnd))) {
            introEnd++;
        }
        if (introEnd === this.tokens.currentIndex() + 1) {
            const tagName = this.tokens.identifierName();
            if (startsWithLowerCase(tagName)) {
                this.tokens.replaceToken(`'${tagName}'`);
            }
        }
        while (this.tokens.currentIndex() < introEnd) {
            this.rootTransformer.processToken();
        }
    }
    processChildren() {
        while (true) {
            if (this.tokens.matches2(TokenType.jsxTagStart, TokenType.slash)) {
                // Closing tag, so no more children.
                return;
            }
            if (this.tokens.matches1(TokenType.braceL)) {
                if (this.tokens.matches2(TokenType.braceL, TokenType.braceR)) {
                    // Empty interpolations and comment-only interpolations are allowed
                    // and don't create an extra child arg.
                    this.tokens.replaceToken("");
                    this.tokens.replaceToken("");
                }
                else {
                    // Interpolated expression.
                    this.tokens.replaceToken(", ");
                    this.rootTransformer.processBalancedCode();
                    this.tokens.replaceToken("");
                }
            }
            else if (this.tokens.matches1(TokenType.jsxTagStart)) {
                // Child JSX element
                this.tokens.appendCode(", ");
                this.processJSXTag();
            }
            else if (this.tokens.matches1(TokenType.jsxText)) {
                this.processChildTextElement();
            }
            else {
                throw new Error("Unexpected token when processing JSX children.");
            }
        }
    }
    processChildTextElement() {
        const token = this.tokens.currentToken();
        const valueCode = this.tokens.code.slice(token.start, token.end);
        const replacementCode = formatJSXTextReplacement(valueCode);
        const literalCode = formatJSXTextLiteral(valueCode);
        if (literalCode === '""') {
            this.tokens.replaceToken(replacementCode);
        }
        else {
            this.tokens.replaceToken(`, ${literalCode}${replacementCode}`);
        }
    }
    processJSXTag() {
        const { jsxPragmaInfo } = this;
        const resolvedPragmaBaseName = jsxPragmaInfo.base;
        const firstTokenStart = this.tokens.currentToken().start;
        // First tag is always jsxTagStart.
        this.tokens.replaceToken(`${resolvedPragmaBaseName}${jsxPragmaInfo.suffix}(`);
        if (this.tokens.matches1(TokenType.jsxTagEnd)) {
            // Fragment syntax.
            const resolvedFragmentPragmaBaseName = jsxPragmaInfo.fragmentBase;
            this.tokens.replaceToken(`${resolvedFragmentPragmaBaseName}${jsxPragmaInfo.fragmentSuffix}, null`);
            // Tag with children.
            this.processChildren();
            while (!this.tokens.matches1(TokenType.jsxTagEnd)) {
                this.tokens.replaceToken("");
            }
            this.tokens.replaceToken(")");
        }
        else {
            // Normal open tag or self-closing tag.
            this.processTagIntro();
            this.processProps(firstTokenStart);
            if (this.tokens.matches2(TokenType.slash, TokenType.jsxTagEnd)) {
                // Self-closing tag.
                this.tokens.replaceToken("");
                this.tokens.replaceToken(")");
            }
            else if (this.tokens.matches1(TokenType.jsxTagEnd)) {
                this.tokens.replaceToken("");
                // Tag with children.
                this.processChildren();
                while (!this.tokens.matches1(TokenType.jsxTagEnd)) {
                    this.tokens.replaceToken("");
                }
                this.tokens.replaceToken(")");
            }
            else {
                throw new Error("Expected either /> or > at the end of the tag.");
            }
        }
    }
}
/**
 * Spec for identifiers: https://tc39.github.io/ecma262/#prod-IdentifierStart.
 *
 * Really only treat anything starting with a-z as tag names.  `_`, `$`, `é`
 * should be treated as copmonent names
 */
function startsWithLowerCase(s) {
    const firstChar = s.charCodeAt(0);
    return firstChar >= charCodes.lowercaseA && firstChar <= charCodes.lowercaseZ;
}
/**
 * Turn the given jsxText string into a JS string literal. Leading and trailing
 * whitespace on lines is removed, except immediately after the open-tag and
 * before the close-tag. Empty lines are completely removed, and spaces are
 * added between lines after that.
 *
 * We use JSON.stringify to introduce escape characters as necessary, and trim
 * the start and end of each line and remove blank lines.
 */
function formatJSXTextLiteral(text) {
    let result = "";
    let whitespace = "";
    let isInInitialLineWhitespace = false;
    let seenNonWhitespace = false;
    for (let i = 0; i < text.length; i++) {
        const c = text[i];
        if (c === " " || c === "\t" || c === "\r") {
            if (!isInInitialLineWhitespace) {
                whitespace += c;
            }
        }
        else if (c === "\n") {
            whitespace = "";
            isInInitialLineWhitespace = true;
        }
        else {
            if (seenNonWhitespace && isInInitialLineWhitespace) {
                result += " ";
            }
            result += whitespace;
            whitespace = "";
            if (c === "&") {
                const { entity, newI } = processEntity(text, i + 1);
                i = newI - 1;
                result += entity;
            }
            else {
                result += c;
            }
            seenNonWhitespace = true;
            isInInitialLineWhitespace = false;
        }
    }
    if (!isInInitialLineWhitespace) {
        result += whitespace;
    }
    return JSON.stringify(result);
}
/**
 * Produce the code that should be printed after the JSX text string literal,
 * with most content removed, but all newlines preserved and all spacing at the
 * end preserved.
 */
function formatJSXTextReplacement(text) {
    let numNewlines = 0;
    let numSpaces = 0;
    for (const c of text) {
        if (c === "\n") {
            numNewlines++;
            numSpaces = 0;
        }
        else if (c === " ") {
            numSpaces++;
        }
    }
    return "\n".repeat(numNewlines) + " ".repeat(numSpaces);
}
/**
 * Format a string in the value position of a JSX prop.
 *
 * Use the same implementation as convertAttribute from
 * babel-helper-builder-react-jsx.
 */
function formatJSXStringValueLiteral(text) {
    let result = "";
    for (let i = 0; i < text.length; i++) {
        const c = text[i];
        if (c === "\n") {
            if (/\s/.test(text[i + 1])) {
                result += " ";
                while (i < text.length && /\s/.test(text[i + 1])) {
                    i++;
                }
            }
            else {
                result += "\n";
            }
        }
        else if (c === "&") {
            const { entity, newI } = processEntity(text, i + 1);
            result += entity;
            i = newI - 1;
        }
        else {
            result += c;
        }
    }
    return JSON.stringify(result);
}
/**
 * Modified from jsxReadString in Babylon.
 */
function processEntity(text, indexAfterAmpersand) {
    let str = "";
    let count = 0;
    let entity;
    let i = indexAfterAmpersand;
    while (i < text.length && count++ < 10) {
        const ch = text[i];
        i++;
        if (ch === ";") {
            if (str[0] === "#") {
                if (str[1] === "x") {
                    str = str.substr(2);
                    if (HEX_NUMBER.test(str)) {
                        entity = String.fromCodePoint(parseInt(str, 16));
                    }
                }
                else {
                    str = str.substr(1);
                    if (DECIMAL_NUMBER.test(str)) {
                        entity = String.fromCodePoint(parseInt(str, 10));
                    }
                }
            }
            else {
                entity = entities[str];
            }
            break;
        }
        str += ch;
    }
    if (!entity) {
        return { entity: "&", newI: indexAfterAmpersand };
    }
    return { entity, newI: i };
}

function getNonTypeIdentifiers(tokens, options) {
    const jsxPragmaInfo = getJSXPragmaInfo(options);
    const nonTypeIdentifiers = new Set();
    for (let i = 0; i < tokens.tokens.length; i++) {
        const token = tokens.tokens[i];
        if (token.type === TokenType.name &&
            !token.isType &&
            (token.identifierRole === IdentifierRole.Access ||
                token.identifierRole === IdentifierRole.ObjectShorthand ||
                token.identifierRole === IdentifierRole.ExportAccess) &&
            !token.shadowsGlobal) {
            nonTypeIdentifiers.add(tokens.identifierNameForToken(token));
        }
        if (token.type === TokenType.jsxTagStart) {
            nonTypeIdentifiers.add(jsxPragmaInfo.base);
        }
        if (token.type === TokenType.jsxTagStart &&
            i + 1 < tokens.tokens.length &&
            tokens.tokens[i + 1].type === TokenType.jsxTagEnd) {
            nonTypeIdentifiers.add(jsxPragmaInfo.base);
            nonTypeIdentifiers.add(jsxPragmaInfo.fragmentBase);
        }
        if (token.type === TokenType.jsxName && token.identifierRole === IdentifierRole.Access) {
            const identifierName = tokens.identifierNameForToken(token);
            // Lower-case single-component tag names like "div" don't count.
            if (!startsWithLowerCase(identifierName) || tokens.tokens[i + 1].type === TokenType.dot) {
                nonTypeIdentifiers.add(tokens.identifierNameForToken(token));
            }
        }
    }
    return nonTypeIdentifiers;
}

/**
 * Common method sharing code between CJS and ESM cases, since they're the same here.
 */
function shouldElideDefaultExport(isTypeScriptTransformEnabled, tokens, declarationInfo) {
    if (!isTypeScriptTransformEnabled) {
        return false;
    }
    const exportToken = tokens.currentToken();
    if (exportToken.rhsEndIndex == null) {
        throw new Error("Expected non-null rhsEndIndex on export token.");
    }
    // The export must be of the form `export default a` or `export default a;`.
    const numTokens = exportToken.rhsEndIndex - tokens.currentIndex();
    if (numTokens !== 3 &&
        !(numTokens === 4 && tokens.matches1AtIndex(exportToken.rhsEndIndex - 1, TokenType.semi))) {
        return false;
    }
    const identifierToken = tokens.tokenAtRelativeIndex(2);
    if (identifierToken.type !== TokenType.name) {
        return false;
    }
    const exportedName = tokens.identifierNameForToken(identifierToken);
    return (declarationInfo.typeDeclarations.has(exportedName) &&
        !declarationInfo.valueDeclarations.has(exportedName));
}

/**
 * Class for editing import statements when we are keeping the code as ESM. We still need to remove
 * type-only imports in TypeScript and Flow.
 */
class ESMImportTransformer extends Transformer {
    constructor(tokens, nameManager, reactHotLoaderTransformer, isTypeScriptTransformEnabled, options) {
        super();
        this.tokens = tokens;
        this.nameManager = nameManager;
        this.reactHotLoaderTransformer = reactHotLoaderTransformer;
        this.isTypeScriptTransformEnabled = isTypeScriptTransformEnabled;
        this.keepUnusedImports = false;
        this.keepUnusedImports = options.keepUnusedImports ?? false;
        this.nonTypeIdentifiers = isTypeScriptTransformEnabled
            ? getNonTypeIdentifiers(tokens, options)
            : new Set();
        this.declarationInfo = isTypeScriptTransformEnabled
            ? getDeclarationInfo(tokens)
            : EMPTY_DECLARATION_INFO;
    }
    process() {
        // TypeScript `import foo = require('foo');` should always just be translated to plain require.
        if (this.tokens.matches3(TokenType._import, TokenType.name, TokenType.eq)) {
            return this.processImportEquals();
        }
        if (this.tokens.matches2(TokenType._export, TokenType.eq)) {
            this.tokens.replaceToken("module.exports");
            return true;
        }
        if (this.tokens.matches1(TokenType._import)) {
            return this.processImport();
        }
        if (this.tokens.matches2(TokenType._export, TokenType._default)) {
            return this.processExportDefault();
        }
        if (this.tokens.matches2(TokenType._export, TokenType.braceL)) {
            return this.processNamedExports();
        }
        if (this.tokens.matches3(TokenType._export, TokenType.name, TokenType.braceL) &&
            this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, ContextualKeyword._type)) {
            // TS `export type {` case: just remove the export entirely.
            this.tokens.removeInitialToken();
            while (!this.tokens.matches1(TokenType.braceR)) {
                this.tokens.removeToken();
            }
            this.tokens.removeToken();
            // Remove type re-export `... } from './T'`
            if (this.tokens.matchesContextual(ContextualKeyword._from) &&
                this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, TokenType.string)) {
                this.tokens.removeToken();
                this.tokens.removeToken();
            }
            return true;
        }
        return false;
    }
    processImportEquals() {
        const importName = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);
        if (this.isTypeName(importName)) {
            // If this name is only used as a type, elide the whole import.
            elideImportEquals(this.tokens);
        }
        else {
            // Otherwise, switch `import` to `const`.
            this.tokens.replaceToken("const");
        }
        return true;
    }
    processImport() {
        if (this.tokens.matches2(TokenType._import, TokenType.parenL)) {
            // Dynamic imports don't need to be transformed.
            return false;
        }
        const snapshot = this.tokens.snapshot();
        const allImportsRemoved = this.removeImportTypeBindings();
        if (allImportsRemoved) {
            this.tokens.restoreToSnapshot(snapshot);
            while (!this.tokens.matches1(TokenType.string)) {
                this.tokens.removeToken();
            }
            this.tokens.removeToken();
            if (this.tokens.matches1(TokenType.semi)) {
                this.tokens.removeToken();
            }
        }
        return true;
    }
    /**
     * Remove type bindings from this import, leaving the rest of the import intact.
     *
     * Return true if this import was ONLY types, and thus is eligible for removal. This will bail out
     * of the replacement operation, so we can return early here.
     */
    removeImportTypeBindings() {
        this.tokens.copyExpectedToken(TokenType._import);
        if (this.tokens.matchesContextual(ContextualKeyword._type) &&
            !this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, TokenType.comma) &&
            !this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, ContextualKeyword._from)) {
            // This is an "import type" statement, so exit early.
            return true;
        }
        if (this.tokens.matches1(TokenType.string)) {
            // This is a bare import, so we should proceed with the import.
            this.tokens.copyToken();
            return false;
        }
        if (this.keepUnusedImports) {
            return false;
        }
        let foundNonTypeImport = false;
        if (this.tokens.matches1(TokenType.name)) {
            if (this.isTypeName(this.tokens.identifierName())) {
                this.tokens.removeToken();
                if (this.tokens.matches1(TokenType.comma)) {
                    this.tokens.removeToken();
                }
            }
            else {
                foundNonTypeImport = true;
                this.tokens.copyToken();
                if (this.tokens.matches1(TokenType.comma)) {
                    this.tokens.copyToken();
                }
            }
        }
        if (this.tokens.matches1(TokenType.star)) {
            if (this.isTypeName(this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 2))) {
                this.tokens.removeToken();
                this.tokens.removeToken();
                this.tokens.removeToken();
            }
            else {
                foundNonTypeImport = true;
                this.tokens.copyExpectedToken(TokenType.star);
                this.tokens.copyExpectedToken(TokenType.name);
                this.tokens.copyExpectedToken(TokenType.name);
            }
        }
        else if (this.tokens.matches1(TokenType.braceL)) {
            this.tokens.copyToken();
            while (!this.tokens.matches1(TokenType.braceR)) {
                if (this.tokens.matches3(TokenType.name, TokenType.name, TokenType.comma) ||
                    this.tokens.matches3(TokenType.name, TokenType.name, TokenType.braceR)) {
                    // type foo
                    this.tokens.removeToken();
                    this.tokens.removeToken();
                    if (this.tokens.matches1(TokenType.comma)) {
                        this.tokens.removeToken();
                    }
                }
                else if (this.tokens.matches5(TokenType.name, TokenType.name, TokenType.name, TokenType.name, TokenType.comma) ||
                    this.tokens.matches5(TokenType.name, TokenType.name, TokenType.name, TokenType.name, TokenType.braceR)) {
                    // type foo as bar
                    this.tokens.removeToken();
                    this.tokens.removeToken();
                    this.tokens.removeToken();
                    this.tokens.removeToken();
                    if (this.tokens.matches1(TokenType.comma)) {
                        this.tokens.removeToken();
                    }
                }
                else if (this.tokens.matches2(TokenType.name, TokenType.comma) ||
                    this.tokens.matches2(TokenType.name, TokenType.braceR)) {
                    // foo
                    if (this.isTypeName(this.tokens.identifierName())) {
                        this.tokens.removeToken();
                        if (this.tokens.matches1(TokenType.comma)) {
                            this.tokens.removeToken();
                        }
                    }
                    else {
                        foundNonTypeImport = true;
                        this.tokens.copyToken();
                        if (this.tokens.matches1(TokenType.comma)) {
                            this.tokens.copyToken();
                        }
                    }
                }
                else if (this.tokens.matches4(TokenType.name, TokenType.name, TokenType.name, TokenType.comma) ||
                    this.tokens.matches4(TokenType.name, TokenType.name, TokenType.name, TokenType.braceR)) {
                    // foo as bar
                    if (this.isTypeName(this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 2))) {
                        this.tokens.removeToken();
                        this.tokens.removeToken();
                        this.tokens.removeToken();
                        if (this.tokens.matches1(TokenType.comma)) {
                            this.tokens.removeToken();
                        }
                    }
                    else {
                        foundNonTypeImport = true;
                        this.tokens.copyToken();
                        this.tokens.copyToken();
                        this.tokens.copyToken();
                        if (this.tokens.matches1(TokenType.comma)) {
                            this.tokens.copyToken();
                        }
                    }
                }
                else {
                    throw new Error("Unexpected import form.");
                }
            }
            this.tokens.copyExpectedToken(TokenType.braceR);
        }
        return !foundNonTypeImport;
    }
    isTypeName(name) {
        return this.isTypeScriptTransformEnabled && !this.nonTypeIdentifiers.has(name);
    }
    processExportDefault() {
        if (shouldElideDefaultExport(this.isTypeScriptTransformEnabled, this.tokens, this.declarationInfo)) {
            // If the exported value is just an identifier and should be elided by TypeScript
            // rules, then remove it entirely. It will always have the form `export default e`,
            // where `e` is an identifier.
            this.tokens.removeInitialToken();
            this.tokens.removeToken();
            this.tokens.removeToken();
            return true;
        }
        const alreadyHasName = this.tokens.matches4(TokenType._export, TokenType._default, TokenType._function, TokenType.name) ||
            // export default async function
            this.tokens.matches5(TokenType._export, TokenType._default, TokenType.name, TokenType._function, TokenType.name) ||
            this.tokens.matches4(TokenType._export, TokenType._default, TokenType._class, TokenType.name) ||
            this.tokens.matches5(TokenType._export, TokenType._default, TokenType._abstract, TokenType._class, TokenType.name);
        if (!alreadyHasName && this.reactHotLoaderTransformer) {
            // This is a plain "export default E" statement and we need to assign E to a variable.
            // Change "export default E" to "let _default; export default _default = E"
            const defaultVarName = this.nameManager.claimFreeName("_default");
            this.tokens.replaceToken(`let ${defaultVarName}; export`);
            this.tokens.copyToken();
            this.tokens.appendCode(` ${defaultVarName} =`);
            this.reactHotLoaderTransformer.setExtractedDefaultExportName(defaultVarName);
            return true;
        }
        return false;
    }
    /**
     * In TypeScript, we need to remove named exports that were never declared or only declared as a
     * type.
     */
    processNamedExports() {
        if (!this.isTypeScriptTransformEnabled) {
            return false;
        }
        this.tokens.copyExpectedToken(TokenType._export);
        this.tokens.copyExpectedToken(TokenType.braceL);
        while (!this.tokens.matches1(TokenType.braceR)) {
            if (!this.tokens.matches1(TokenType.name)) {
                throw new Error("Expected identifier at the start of named export.");
            }
            if (this.shouldElideExportedName(this.tokens.identifierName())) {
                while (!this.tokens.matches1(TokenType.comma) &&
                    !this.tokens.matches1(TokenType.braceR) &&
                    !this.tokens.isAtEnd()) {
                    this.tokens.removeToken();
                }
                if (this.tokens.matches1(TokenType.comma)) {
                    this.tokens.removeToken();
                }
            }
            else {
                while (!this.tokens.matches1(TokenType.comma) &&
                    !this.tokens.matches1(TokenType.braceR) &&
                    !this.tokens.isAtEnd()) {
                    this.tokens.copyToken();
                }
                if (this.tokens.matches1(TokenType.comma)) {
                    this.tokens.copyToken();
                }
            }
        }
        this.tokens.copyExpectedToken(TokenType.braceR);
        return true;
    }
    /**
     * ESM elides all imports with the rule that we only elide if we see that it's
     * a type and never see it as a value. This is in contract to CJS, which
     * elides imports that are completely unknown.
     */
    shouldElideExportedName(name) {
        return (this.isTypeScriptTransformEnabled &&
            this.declarationInfo.typeDeclarations.has(name) &&
            !this.declarationInfo.valueDeclarations.has(name));
    }
}

class NumericSeparatorTransformer extends Transformer {
    constructor(tokens) {
        super();
        this.tokens = tokens;
    }
    process() {
        if (this.tokens.matches1(TokenType.num)) {
            const code = this.tokens.currentTokenCode();
            if (code.includes("_")) {
                this.tokens.replaceToken(code.replace(/_/g, ""));
                return true;
            }
        }
        return false;
    }
}

class OptionalCatchBindingTransformer extends Transformer {
    constructor(tokens, nameManager) {
        super();
        this.tokens = tokens;
        this.nameManager = nameManager;
    }
    process() {
        if (this.tokens.matches2(TokenType._catch, TokenType.braceL)) {
            this.tokens.copyToken();
            this.tokens.appendCode(` (${this.nameManager.claimFreeName("e")})`);
            return true;
        }
        return false;
    }
}

/**
 * Transformer supporting the optional chaining and nullish coalescing operators.
 *
 * Tech plan here:
 * https://github.com/alangpierce/sucrase/wiki/Sucrase-Optional-Chaining-and-Nullish-Coalescing-Technical-Plan
 *
 * The prefix and suffix code snippets are handled by TokenProcessor, and this transformer handles
 * the operators themselves.
 */
class OptionalChainingNullishTransformer extends Transformer {
    constructor(tokens, nameManager) {
        super();
        this.tokens = tokens;
        this.nameManager = nameManager;
    }
    process() {
        if (this.tokens.matches1(TokenType.nullishCoalescing)) {
            const token = this.tokens.currentToken();
            if (this.tokens.tokens[token.nullishStartIndex].isAsyncOperation) {
                this.tokens.replaceTokenTrimmingLeftWhitespace(", async () => (");
            }
            else {
                this.tokens.replaceTokenTrimmingLeftWhitespace(", () => (");
            }
            return true;
        }
        if (this.tokens.matches1(TokenType._delete)) {
            const nextToken = this.tokens.tokenAtRelativeIndex(1);
            if (nextToken.isOptionalChainStart) {
                this.tokens.removeInitialToken();
                return true;
            }
        }
        const token = this.tokens.currentToken();
        const chainStart = token.subscriptStartIndex;
        if (chainStart != null &&
            this.tokens.tokens[chainStart].isOptionalChainStart &&
            // Super subscripts can't be optional (since super is never null/undefined), and the syntax
            // relies on the subscript being intact, so leave this token alone.
            this.tokens.tokenAtRelativeIndex(-1).type !== TokenType._super) {
            const param = this.nameManager.claimFreeName("_");
            let arrowStartSnippet;
            if (chainStart > 0 &&
                this.tokens.matches1AtIndex(chainStart - 1, TokenType._delete) &&
                this.isLastSubscriptInChain()) {
                // Delete operations are special: we already removed the delete keyword, and to still
                // perform a delete, we need to insert a delete in the very last part of the chain, which
                // in correct code will always be a property access.
                arrowStartSnippet = `${param} => delete ${param}`;
            }
            else {
                arrowStartSnippet = `${param} => ${param}`;
            }
            if (this.tokens.tokens[chainStart].isAsyncOperation) {
                arrowStartSnippet = `async ${arrowStartSnippet}`;
            }
            if (this.tokens.matches2(TokenType.questionDot, TokenType.parenL) ||
                this.tokens.matches2(TokenType.questionDot, TokenType.lessThan)) {
                if (this.justSkippedSuper()) {
                    this.tokens.appendCode(".bind(this)");
                }
                this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'optionalCall', ${arrowStartSnippet}`);
            }
            else if (this.tokens.matches2(TokenType.questionDot, TokenType.bracketL)) {
                this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'optionalAccess', ${arrowStartSnippet}`);
            }
            else if (this.tokens.matches1(TokenType.questionDot)) {
                this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'optionalAccess', ${arrowStartSnippet}.`);
            }
            else if (this.tokens.matches1(TokenType.dot)) {
                this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'access', ${arrowStartSnippet}.`);
            }
            else if (this.tokens.matches1(TokenType.bracketL)) {
                this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'access', ${arrowStartSnippet}[`);
            }
            else if (this.tokens.matches1(TokenType.parenL)) {
                if (this.justSkippedSuper()) {
                    this.tokens.appendCode(".bind(this)");
                }
                this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'call', ${arrowStartSnippet}(`);
            }
            else {
                throw new Error("Unexpected subscript operator in optional chain.");
            }
            return true;
        }
        return false;
    }
    /**
     * Determine if the current token is the last of its chain, so that we know whether it's eligible
     * to have a delete op inserted.
     *
     * We can do this by walking forward until we determine one way or another. Each
     * isOptionalChainStart token must be paired with exactly one isOptionalChainEnd token after it in
     * a nesting way, so we can track depth and walk to the end of the chain (the point where the
     * depth goes negative) and see if any other subscript token is after us in the chain.
     */
    isLastSubscriptInChain() {
        let depth = 0;
        for (let i = this.tokens.currentIndex() + 1;; i++) {
            if (i >= this.tokens.tokens.length) {
                throw new Error("Reached the end of the code while finding the end of the access chain.");
            }
            if (this.tokens.tokens[i].isOptionalChainStart) {
                depth++;
            }
            else if (this.tokens.tokens[i].isOptionalChainEnd) {
                depth--;
            }
            if (depth < 0) {
                return true;
            }
            // This subscript token is a later one in the same chain.
            if (depth === 0 && this.tokens.tokens[i].subscriptStartIndex != null) {
                return false;
            }
        }
    }
    /**
     * Determine if we are the open-paren in an expression like super.a()?.b.
     *
     * We can do this by walking backward to find the previous subscript. If that subscript was
     * preceded by a super, then we must be the subscript after it, so if this is a call expression,
     * we'll need to attach the right context.
     */
    justSkippedSuper() {
        let depth = 0;
        let index = this.tokens.currentIndex() - 1;
        while (true) {
            if (index < 0) {
                throw new Error("Reached the start of the code while finding the start of the access chain.");
            }
            if (this.tokens.tokens[index].isOptionalChainStart) {
                depth--;
            }
            else if (this.tokens.tokens[index].isOptionalChainEnd) {
                depth++;
            }
            if (depth < 0) {
                return false;
            }
            // This subscript token is a later one in the same chain.
            if (depth === 0 && this.tokens.tokens[index].subscriptStartIndex != null) {
                return this.tokens.tokens[index - 1].type === TokenType._super;
            }
            index--;
        }
    }
}

/**
 * Implementation of babel-plugin-transform-react-display-name, which adds a
 * display name to usages of React.createClass and createReactClass.
 */
class ReactDisplayNameTransformer extends Transformer {
    constructor(rootTransformer, tokens, importProcessor, options) {
        super();
        this.rootTransformer = rootTransformer;
        this.tokens = tokens;
        this.importProcessor = importProcessor;
        this.options = options;
    }
    process() {
        const startIndex = this.tokens.currentIndex();
        if (this.tokens.matches3(TokenType.name, TokenType.dot, TokenType.name) &&
            this.tokens.identifierName() === "React" &&
            this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 2) === "createClass") {
            const newName = "React";
            {
                this.tokens.replaceToken(newName);
                this.tokens.copyToken();
                this.tokens.copyToken();
            }
            this.tryProcessCreateClassCall(startIndex);
            return true;
        }
        return false;
    }
    /**
     * This is called with the token position at the open-paren.
     */
    tryProcessCreateClassCall(startIndex) {
        const displayName = this.findDisplayName(startIndex);
        if (!displayName) {
            return;
        }
        if (this.classNeedsDisplayName()) {
            this.tokens.copyExpectedToken(TokenType.parenL);
            this.tokens.copyExpectedToken(TokenType.braceL);
            this.tokens.appendCode(`displayName: '${displayName}',`);
            this.rootTransformer.processBalancedCode();
            this.tokens.copyExpectedToken(TokenType.braceR);
            this.tokens.copyExpectedToken(TokenType.parenR);
        }
    }
    findDisplayName(startIndex) {
        if (startIndex < 2) {
            return null;
        }
        if (this.tokens.matches2AtIndex(startIndex - 2, TokenType.name, TokenType.eq)) {
            // This is an assignment (or declaration) and the LHS is either an identifier or a member
            // expression ending in an identifier, so use that identifier name.
            return this.tokens.identifierNameAtIndex(startIndex - 2);
        }
        if (startIndex >= 2 &&
            this.tokens.tokens[startIndex - 2].identifierRole === IdentifierRole.ObjectKey) {
            // This is an object literal value.
            return this.tokens.identifierNameAtIndex(startIndex - 2);
        }
        if (this.tokens.matches2AtIndex(startIndex - 2, TokenType._export, TokenType._default)) {
            return this.getDisplayNameFromFilename();
        }
        return null;
    }
    getDisplayNameFromFilename() {
        const filePath = this.options.filePath || "unknown";
        const pathSegments = filePath.split("/");
        const filename = pathSegments[pathSegments.length - 1];
        const dotIndex = filename.lastIndexOf(".");
        const baseFilename = dotIndex === -1 ? filename : filename.slice(0, dotIndex);
        if (baseFilename === "index" && pathSegments[pathSegments.length - 2]) {
            return pathSegments[pathSegments.length - 2];
        }
        else {
            return baseFilename;
        }
    }
    /**
     * We only want to add a display name when this is a function call containing
     * one argument, which is an object literal without `displayName` as an
     * existing key.
     */
    classNeedsDisplayName() {
        let index = this.tokens.currentIndex();
        if (!this.tokens.matches2(TokenType.parenL, TokenType.braceL)) {
            return false;
        }
        // The block starts on the {, and we expect any displayName key to be in
        // that context. We need to ignore other other contexts to avoid matching
        // nested displayName keys.
        const objectStartIndex = index + 1;
        const objectContextId = this.tokens.tokens[objectStartIndex].contextId;
        if (objectContextId == null) {
            throw new Error("Expected non-null context ID on object open-brace.");
        }
        for (; index < this.tokens.tokens.length; index++) {
            const token = this.tokens.tokens[index];
            if (token.type === TokenType.braceR && token.contextId === objectContextId) {
                index++;
                break;
            }
            if (this.tokens.identifierNameAtIndex(index) === "displayName" &&
                this.tokens.tokens[index].identifierRole === IdentifierRole.ObjectKey &&
                token.contextId === objectContextId) {
                // We found a displayName key, so bail out.
                return false;
            }
        }
        if (index === this.tokens.tokens.length) {
            throw new Error("Unexpected end of input when processing React class.");
        }
        // If we got this far, we know we have createClass with an object with no
        // display name, so we want to proceed as long as that was the only argument.
        return (this.tokens.matches1AtIndex(index, TokenType.parenR) ||
            this.tokens.matches2AtIndex(index, TokenType.comma, TokenType.parenR));
    }
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar
// Hard-code a list of reserved words rather than trying to use keywords or contextual keywords
// from the parser, since currently there are various exceptions, like `package` being reserved
// but unused and various contextual keywords being reserved. Note that we assume that all code
// compiled by Sucrase is in a module, so strict mode words and await are all considered reserved
// here.
const RESERVED_WORDS = new Set([
    // Reserved keywords as of ECMAScript 2015
    "break",
    "case",
    "catch",
    "class",
    "const",
    "continue",
    "debugger",
    "default",
    "delete",
    "do",
    "else",
    "export",
    "extends",
    "finally",
    "for",
    "function",
    "if",
    "import",
    "in",
    "instanceof",
    "new",
    "return",
    "super",
    "switch",
    "this",
    "throw",
    "try",
    "typeof",
    "var",
    "void",
    "while",
    "with",
    "yield",
    // Future reserved keywords
    "enum",
    "implements",
    "interface",
    "let",
    "package",
    "private",
    "protected",
    "public",
    "static",
    "await",
]);
function isIdentifier(name) {
    if (name.length === 0) {
        return false;
    }
    if (!IS_IDENTIFIER_START[name.charCodeAt(0)]) {
        return false;
    }
    for (let i = 1; i < name.length; i++) {
        if (!IS_IDENTIFIER_CHAR[name.charCodeAt(i)]) {
            return false;
        }
    }
    return !RESERVED_WORDS.has(name);
}

class TypeScriptTransformer extends Transformer {
    constructor(rootTransformer, tokens, isImportsTransformEnabled) {
        super();
        this.rootTransformer = rootTransformer;
        this.tokens = tokens;
        this.isImportsTransformEnabled = isImportsTransformEnabled;
    }
    process() {
        if (this.rootTransformer.processPossibleArrowParamEnd() ||
            this.rootTransformer.processPossibleAsyncArrowWithTypeParams() ||
            this.rootTransformer.processPossibleTypeRange()) {
            return true;
        }
        if (this.tokens.matches1(TokenType._public) ||
            this.tokens.matches1(TokenType._protected) ||
            this.tokens.matches1(TokenType._private) ||
            this.tokens.matches1(TokenType._abstract) ||
            this.tokens.matches1(TokenType._readonly) ||
            this.tokens.matches1(TokenType.nonNullAssertion)) {
            this.tokens.removeInitialToken();
            return true;
        }
        if (this.tokens.matches1(TokenType._enum) || this.tokens.matches2(TokenType._const, TokenType._enum)) {
            this.processEnum();
            return true;
        }
        if (this.tokens.matches2(TokenType._export, TokenType._enum) ||
            this.tokens.matches3(TokenType._export, TokenType._const, TokenType._enum)) {
            this.processEnum(true);
            return true;
        }
        return false;
    }
    processEnum(isExport = false) {
        // We might have "export const enum", so just remove all relevant tokens.
        this.tokens.removeInitialToken();
        while (this.tokens.matches1(TokenType._const) || this.tokens.matches1(TokenType._enum)) {
            this.tokens.removeToken();
        }
        const enumName = this.tokens.identifierName();
        this.tokens.removeToken();
        if (isExport && !this.isImportsTransformEnabled) {
            this.tokens.appendCode("export ");
        }
        this.tokens.appendCode(`var ${enumName}; (function (${enumName})`);
        this.tokens.copyExpectedToken(TokenType.braceL);
        this.processEnumBody(enumName);
        this.tokens.copyExpectedToken(TokenType.braceR);
        if (isExport && this.isImportsTransformEnabled) {
            this.tokens.appendCode(`)(${enumName} || (exports.${enumName} = ${enumName} = {}));`);
        }
        else {
            this.tokens.appendCode(`)(${enumName} || (${enumName} = {}));`);
        }
    }
    /**
     * Rather than try to compute the actual enum values at compile time, we just create variables for
     * each one and let everything evaluate at runtime. There's some additional complexity due to
     * handling string literal names, including ones that happen to be valid identifiers.
     */
    processEnumBody(enumName) {
        let isPreviousValidIdentifier = false;
        let lastValueReference = null;
        while (true) {
            if (this.tokens.matches1(TokenType.braceR)) {
                break;
            }
            const nameToken = this.tokens.currentToken();
            let name;
            let nameStringCode;
            if (nameToken.type === TokenType.name) {
                name = this.tokens.identifierNameForToken(nameToken);
                nameStringCode = `"${name}"`;
            }
            else if (nameToken.type === TokenType.string) {
                name = this.tokens.stringValueForToken(nameToken);
                nameStringCode = this.tokens.code.slice(nameToken.start, nameToken.end);
            }
            else {
                throw new Error("Expected name or string at beginning of enum element.");
            }
            const isValidIdentifier = isIdentifier(name);
            this.tokens.removeInitialToken();
            let valueIsString;
            let valueCode;
            if (this.tokens.matches1(TokenType.eq)) {
                const rhsEndIndex = this.tokens.currentToken().rhsEndIndex;
                if (rhsEndIndex == null) {
                    throw new Error("Expected rhsEndIndex on enum assign.");
                }
                this.tokens.removeToken();
                if (this.tokens.matches2(TokenType.string, TokenType.comma) ||
                    this.tokens.matches2(TokenType.string, TokenType.braceR)) {
                    valueIsString = true;
                }
                const startToken = this.tokens.currentToken();
                while (this.tokens.currentIndex() < rhsEndIndex) {
                    this.tokens.removeToken();
                }
                valueCode = this.tokens.code.slice(startToken.start, this.tokens.tokenAtRelativeIndex(-1).end);
            }
            else {
                valueIsString = false;
                if (lastValueReference != null) {
                    if (isPreviousValidIdentifier) {
                        valueCode = `${lastValueReference} + 1`;
                    }
                    else {
                        valueCode = `(${lastValueReference}) + 1`;
                    }
                }
                else {
                    valueCode = "0";
                }
            }
            if (this.tokens.matches1(TokenType.comma)) {
                this.tokens.removeToken();
            }
            let valueReference;
            if (isValidIdentifier) {
                this.tokens.appendCode(`const ${name} = ${valueCode}; `);
                valueReference = name;
            }
            else {
                valueReference = valueCode;
            }
            if (valueIsString) {
                this.tokens.appendCode(`${enumName}[${nameStringCode}] = ${valueReference};`);
            }
            else {
                this.tokens.appendCode(`${enumName}[${enumName}[${nameStringCode}] = ${valueReference}] = ${nameStringCode};`);
            }
            lastValueReference = valueReference;
            isPreviousValidIdentifier = isValidIdentifier;
        }
    }
}

class RootTransformer {
    constructor(sucraseContext, transforms, options) {
        this.transformers = [];
        this.generatedVariables = [];
        this.nameManager = sucraseContext.nameManager;
        this.helperManager = sucraseContext.helperManager;
        const { tokenProcessor, importProcessor } = sucraseContext;
        this.tokens = tokenProcessor;
        this.isImportsTransformEnabled = false;
        // this.isReactHotLoaderTransformEnabled = false;
        this.transformers.push(new OptionalChainingNullishTransformer(tokenProcessor, this.nameManager));
        this.transformers.push(new NumericSeparatorTransformer(tokenProcessor));
        this.transformers.push(new OptionalCatchBindingTransformer(tokenProcessor, this.nameManager));
        if (transforms.includes("jsx")) {
            this.transformers.push(new JSXTransformer(this, tokenProcessor, importProcessor, this.nameManager, options));
            this.transformers.push(new ReactDisplayNameTransformer(this, tokenProcessor, importProcessor, options));
        }
        // let reactHotLoaderTransformer = null;
        // if (transforms.includes("react-hot-loader")) {
        //   if (!options.filePath) {
        //     throw new Error("filePath is required when using the react-hot-loader transform.");
        //   }
        //   reactHotLoaderTransformer = new ReactHotLoaderTransformer(tokenProcessor, options.filePath);
        //   this.transformers.push(reactHotLoaderTransformer);
        // }
        this.transformers.push(new ESMImportTransformer(tokenProcessor, this.nameManager, null, true, options));
        this.transformers.push(new TypeScriptTransformer(this, tokenProcessor, false));
    }
    transform() {
        this.tokens.reset();
        this.processBalancedCode();
        const shouldAddUseStrict = this.isImportsTransformEnabled;
        // "use strict" always needs to be first, so override the normal transformer order.
        let prefix = shouldAddUseStrict ? '"use strict";' : "";
        for (const transformer of this.transformers) {
            prefix += transformer.getPrefixCode();
        }
        prefix += this.helperManager.emitHelpers();
        prefix += this.generatedVariables.map((v) => ` var ${v};`).join("");
        for (const transformer of this.transformers) {
            prefix += transformer.getHoistedCode();
        }
        let suffix = "";
        for (const transformer of this.transformers) {
            suffix += transformer.getSuffixCode();
        }
        let code = this.tokens.finish();
        if (code.startsWith("#!")) {
            let newlineIndex = code.indexOf("\n");
            if (newlineIndex === -1) {
                newlineIndex = code.length;
                code += "\n";
            }
            return code.slice(0, newlineIndex + 1) + prefix + code.slice(newlineIndex + 1) + suffix;
        }
        else {
            return prefix + this.tokens.finish() + suffix;
        }
    }
    processBalancedCode() {
        let braceDepth = 0;
        let parenDepth = 0;
        while (!this.tokens.isAtEnd()) {
            if (this.tokens.matches1(TokenType.braceL) || this.tokens.matches1(TokenType.dollarBraceL)) {
                braceDepth++;
            }
            else if (this.tokens.matches1(TokenType.braceR)) {
                if (braceDepth === 0) {
                    return;
                }
                braceDepth--;
            }
            if (this.tokens.matches1(TokenType.parenL)) {
                parenDepth++;
            }
            else if (this.tokens.matches1(TokenType.parenR)) {
                if (parenDepth === 0) {
                    return;
                }
                parenDepth--;
            }
            this.processToken();
        }
    }
    processToken() {
        if (this.tokens.matches1(TokenType._class)) {
            this.processClass();
            return;
        }
        for (const transformer of this.transformers) {
            const wasProcessed = transformer.process();
            if (wasProcessed) {
                return;
            }
        }
        this.tokens.copyToken();
    }
    /**
     * Skip past a class with a name and return that name.
     */
    processNamedClass() {
        if (!this.tokens.matches2(TokenType._class, TokenType.name)) {
            throw new Error("Expected identifier for exported class name.");
        }
        const name = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);
        this.processClass();
        return name;
    }
    processClass() {
        const classInfo = getClassInfo(this, this.tokens, this.nameManager);
        // Both static and instance initializers need a class name to use to invoke the initializer, so
        // assign to one if necessary.
        const needsCommaExpression = classInfo.headerInfo.isExpression &&
            classInfo.staticInitializerNames.length + classInfo.instanceInitializerNames.length > 0;
        let className = classInfo.headerInfo.className;
        if (needsCommaExpression) {
            className = this.nameManager.claimFreeName("_class");
            this.generatedVariables.push(className);
            this.tokens.appendCode(` (${className} =`);
        }
        const classToken = this.tokens.currentToken();
        const contextId = classToken.contextId;
        if (contextId == null) {
            throw new Error("Expected class to have a context ID.");
        }
        this.tokens.copyExpectedToken(TokenType._class);
        while (!this.tokens.matchesContextIdAndLabel(TokenType.braceL, contextId)) {
            this.processToken();
        }
        this.processClassBody(classInfo, className);
        const staticInitializerStatements = classInfo.staticInitializerNames.map((name) => `${className}.${name}()`);
        if (needsCommaExpression) {
            this.tokens.appendCode(`, ${staticInitializerStatements.map((s) => `${s}, `).join("")}${className})`);
        }
        else if (classInfo.staticInitializerNames.length > 0) {
            this.tokens.appendCode(` ${staticInitializerStatements.map((s) => `${s};`).join(" ")}`);
        }
    }
    /**
     * We want to just handle class fields in all contexts, since TypeScript supports them. Later,
     * when some JS implementations support class fields, this should be made optional.
     */
    processClassBody(classInfo, className) {
        const { headerInfo, constructorInsertPos, constructorInitializerStatements, fields, instanceInitializerNames, rangesToRemove, } = classInfo;
        let fieldIndex = 0;
        let rangeToRemoveIndex = 0;
        const classContextId = this.tokens.currentToken().contextId;
        if (classContextId == null) {
            throw new Error("Expected non-null context ID on class.");
        }
        this.tokens.copyExpectedToken(TokenType.braceL);
        // if (this.isReactHotLoaderTransformEnabled) {
        //   this.tokens.appendCode(
        //     "__reactstandin__regenerateByEval(key, code) {this[key] = eval(code);}",
        //   );
        // }
        const needsConstructorInit = constructorInitializerStatements.length + instanceInitializerNames.length > 0;
        if (constructorInsertPos === null && needsConstructorInit) {
            const constructorInitializersCode = this.makeConstructorInitCode(constructorInitializerStatements, instanceInitializerNames, className);
            if (headerInfo.hasSuperclass) {
                const argsName = this.nameManager.claimFreeName("args");
                this.tokens.appendCode(`constructor(...${argsName}) { super(...${argsName}); ${constructorInitializersCode}; }`);
            }
            else {
                this.tokens.appendCode(`constructor() { ${constructorInitializersCode}; }`);
            }
        }
        while (!this.tokens.matchesContextIdAndLabel(TokenType.braceR, classContextId)) {
            if (fieldIndex < fields.length && this.tokens.currentIndex() === fields[fieldIndex].start) {
                let needsCloseBrace = false;
                if (this.tokens.matches1(TokenType.bracketL)) {
                    this.tokens.copyTokenWithPrefix(`${fields[fieldIndex].initializerName}() {this`);
                }
                else if (this.tokens.matches1(TokenType.string) || this.tokens.matches1(TokenType.num)) {
                    this.tokens.copyTokenWithPrefix(`${fields[fieldIndex].initializerName}() {this[`);
                    needsCloseBrace = true;
                }
                else {
                    this.tokens.copyTokenWithPrefix(`${fields[fieldIndex].initializerName}() {this.`);
                }
                while (this.tokens.currentIndex() < fields[fieldIndex].end) {
                    if (needsCloseBrace && this.tokens.currentIndex() === fields[fieldIndex].equalsIndex) {
                        this.tokens.appendCode("]");
                    }
                    this.processToken();
                }
                this.tokens.appendCode("}");
                fieldIndex++;
            }
            else if (rangeToRemoveIndex < rangesToRemove.length &&
                this.tokens.currentIndex() >= rangesToRemove[rangeToRemoveIndex].start) {
                if (this.tokens.currentIndex() < rangesToRemove[rangeToRemoveIndex].end) {
                    this.tokens.removeInitialToken();
                }
                while (this.tokens.currentIndex() < rangesToRemove[rangeToRemoveIndex].end) {
                    this.tokens.removeToken();
                }
                rangeToRemoveIndex++;
            }
            else if (this.tokens.currentIndex() === constructorInsertPos) {
                this.tokens.copyToken();
                if (needsConstructorInit) {
                    this.tokens.appendCode(`;${this.makeConstructorInitCode(constructorInitializerStatements, instanceInitializerNames, className)};`);
                }
                this.processToken();
            }
            else {
                this.processToken();
            }
        }
        this.tokens.copyExpectedToken(TokenType.braceR);
    }
    makeConstructorInitCode(constructorInitializerStatements, instanceInitializerNames, className) {
        return [
            ...constructorInitializerStatements,
            ...instanceInitializerNames.map((name) => `${className}.prototype.${name}.call(this)`),
        ].join(";");
    }
    /**
     * Normally it's ok to simply remove type tokens, but we need to be more careful when dealing with
     * arrow function return types since they can confuse the parser. In that case, we want to move
     * the close-paren to the same line as the arrow.
     *
     * See https://github.com/alangpierce/sucrase/issues/391 for more details.
     */
    processPossibleArrowParamEnd() {
        if (this.tokens.matches2(TokenType.parenR, TokenType.colon) && this.tokens.tokenAtRelativeIndex(1).isType) {
            let nextNonTypeIndex = this.tokens.currentIndex() + 1;
            // Look ahead to see if this is an arrow function or something else.
            while (this.tokens.tokens[nextNonTypeIndex].isType) {
                nextNonTypeIndex++;
            }
            if (this.tokens.matches1AtIndex(nextNonTypeIndex, TokenType.arrow)) {
                this.tokens.removeInitialToken();
                while (this.tokens.currentIndex() < nextNonTypeIndex) {
                    this.tokens.removeToken();
                }
                this.tokens.replaceTokenTrimmingLeftWhitespace(") =>");
                return true;
            }
        }
        return false;
    }
    /**
     * An async arrow function might be of the form:
     *
     * async <
     *   T
     * >() => {}
     *
     * in which case, removing the type parameters will cause a syntax error. Detect this case and
     * move the open-paren earlier.
     */
    processPossibleAsyncArrowWithTypeParams() {
        if (!this.tokens.matchesContextual(ContextualKeyword._async) &&
            !this.tokens.matches1(TokenType._async)) {
            return false;
        }
        const nextToken = this.tokens.tokenAtRelativeIndex(1);
        if (nextToken.type !== TokenType.lessThan || !nextToken.isType) {
            return false;
        }
        let nextNonTypeIndex = this.tokens.currentIndex() + 1;
        // Look ahead to see if this is an arrow function or something else.
        while (this.tokens.tokens[nextNonTypeIndex].isType) {
            nextNonTypeIndex++;
        }
        if (this.tokens.matches1AtIndex(nextNonTypeIndex, TokenType.parenL)) {
            this.tokens.replaceToken("async (");
            this.tokens.removeInitialToken();
            while (this.tokens.currentIndex() < nextNonTypeIndex) {
                this.tokens.removeToken();
            }
            this.tokens.removeToken();
            // We ate a ( token, so we need to process the tokens in between and then the ) token so that
            // we remain balanced.
            this.processBalancedCode();
            this.processToken();
            return true;
        }
        return false;
    }
    processPossibleTypeRange() {
        if (this.tokens.currentToken().isType) {
            this.tokens.removeInitialToken();
            while (this.tokens.currentToken().isType) {
                this.tokens.removeToken();
            }
            return true;
        }
        return false;
    }
}

var LF = '\n';
var CR = '\r';
var LinesAndColumns = (function () {
    function LinesAndColumns(string) {
        this.string = string;
        var offsets = [0];
        for (var offset = 0; offset < string.length;) {
            switch (string[offset]) {
                case LF:
                    offset += LF.length;
                    offsets.push(offset);
                    break;
                case CR:
                    offset += CR.length;
                    if (string[offset] === LF) {
                        offset += LF.length;
                    }
                    offsets.push(offset);
                    break;
                default:
                    offset++;
                    break;
            }
        }
        this.offsets = offsets;
    }
    LinesAndColumns.prototype.locationForIndex = function (index) {
        if (index < 0 || index > this.string.length) {
            return null;
        }
        var line = 0;
        var offsets = this.offsets;
        while (offsets[line + 1] <= index) {
            line++;
        }
        var column = index - offsets[line];
        return { line: line, column: column };
    };
    LinesAndColumns.prototype.indexForLocation = function (location) {
        var line = location.line, column = location.column;
        if (line < 0 || line >= this.offsets.length) {
            return null;
        }
        if (column < 0 || column > this.lengthOfLine(line)) {
            return null;
        }
        return this.offsets[line] + column;
    };
    LinesAndColumns.prototype.lengthOfLine = function (line) {
        var offset = this.offsets[line];
        var nextOffset = line === this.offsets.length - 1 ? this.string.length : this.offsets[line + 1];
        return nextOffset - offset;
    };
    return LinesAndColumns;
}());

function formatTokens(code, tokens) {
    if (tokens.length === 0) {
        return "";
    }
    const tokenKeys = Object.keys(tokens[0]).filter((k) => k !== "type" && k !== "value" && k !== "start" && k !== "end" && k !== "loc");
    const typeKeys = Object.keys(tokens[0].type).filter((k) => k !== "label" && k !== "keyword");
    const headings = ["Location", "Label", "Raw", ...tokenKeys, ...typeKeys];
    const lines = new LinesAndColumns(code);
    const rows = [headings, ...tokens.map(getTokenComponents)];
    const padding = headings.map(() => 0);
    for (const components of rows) {
        for (let i = 0; i < components.length; i++) {
            padding[i] = Math.max(padding[i], components[i].length);
        }
    }
    return rows
        .map((components) => components.map((component, i) => component.padEnd(padding[i])).join(" "))
        .join("\n");
    function getTokenComponents(token) {
        const raw = code.slice(token.start, token.end);
        return [
            formatRange(token.start, token.end),
            formatTokenType(token.type),
            truncate(String(raw), 14),
            // @ts-ignore: Intentional dynamic access by key.
            ...tokenKeys.map((key) => formatValue(token[key], key)),
            // @ts-ignore: Intentional dynamic access by key.
            ...typeKeys.map((key) => formatValue(token.type[key], key)),
        ];
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function formatValue(value, key) {
        if (value === true) {
            return key;
        }
        else if (value === false || value === null) {
            return "";
        }
        else {
            return String(value);
        }
    }
    function formatRange(start, end) {
        return `${formatPos(start)}-${formatPos(end)}`;
    }
    function formatPos(pos) {
        const location = lines.locationForIndex(pos);
        if (!location) {
            return "Unknown";
        }
        else {
            return `${location.line + 1}:${location.column + 1}`;
        }
    }
}
function truncate(s, length) {
    if (s.length > length) {
        return `${s.slice(0, length - 3)}...`;
    }
    else {
        return s;
    }
}

/**
 * Special case code to scan for imported names in ESM TypeScript. We need to do this so we can
 * properly get globals so we can compute shadowed globals.
 *
 * This is similar to logic in CJSImportProcessor, but trimmed down to avoid logic with CJS
 * replacement and flow type imports.
 */
function getTSImportedNames(tokens) {
    const importedNames = new Set();
    for (let i = 0; i < tokens.tokens.length; i++) {
        if (tokens.matches1AtIndex(i, TokenType._import) &&
            !tokens.matches3AtIndex(i, TokenType._import, TokenType.name, TokenType.eq)) {
            collectNamesForImport(tokens, i, importedNames);
        }
    }
    return importedNames;
}
function collectNamesForImport(tokens, index, importedNames) {
    index++;
    if (tokens.matches1AtIndex(index, TokenType.parenL)) {
        // Dynamic import, so nothing to do
        return;
    }
    if (tokens.matches1AtIndex(index, TokenType.name)) {
        importedNames.add(tokens.identifierNameAtIndex(index));
        index++;
        if (tokens.matches1AtIndex(index, TokenType.comma)) {
            index++;
        }
    }
    if (tokens.matches1AtIndex(index, TokenType.star)) {
        // * as
        index += 2;
        importedNames.add(tokens.identifierNameAtIndex(index));
        index++;
    }
    if (tokens.matches1AtIndex(index, TokenType.braceL)) {
        index++;
        collectNamesForNamedImport(tokens, index, importedNames);
    }
}
function collectNamesForNamedImport(tokens, index, importedNames) {
    while (true) {
        if (tokens.matches1AtIndex(index, TokenType.braceR)) {
            return;
        }
        // We care about the local name, which might be the first token, or if there's an "as", is the
        // one after that.
        let name = tokens.identifierNameAtIndex(index);
        index++;
        if (tokens.matchesContextualAtIndex(index, ContextualKeyword._as)) {
            index++;
            name = tokens.identifierNameAtIndex(index);
            index++;
        }
        importedNames.add(name);
        if (tokens.matches2AtIndex(index, TokenType.comma, TokenType.braceR)) {
            return;
        }
        else if (tokens.matches1AtIndex(index, TokenType.braceR)) {
            return;
        }
        else if (tokens.matches1AtIndex(index, TokenType.comma)) {
            index++;
        }
        else {
            throw new Error(`Unexpected token: ${JSON.stringify(tokens.tokens[index])}`);
        }
    }
}

// import computeSourceMap, {RawSourceMap} from "./computeSourceMap";
// Re-export options types in an isolatedModules-friendly way so they can be used externally.
function getVersion() {
    // eslint-disable-next-line
    return require("../package.json").version;
}
function transform(code, options) {
    try {
        const sucraseContext = getSucraseContext(code, options);
        const transformer = new RootTransformer(sucraseContext, options.transforms, options);
        let result = { code: transformer.transform() };
        if (options.sourceMapOptions) {
            if (!options.filePath) {
                throw new Error("filePath must be specified when generating a source map.");
            }
            result = {
                ...result,
                sourceMap: undefined,
                // sourceMap: computeSourceMap(result.code, options.filePath, options.sourceMapOptions),
            };
        }
        return result;
    }
    catch (e) {
        if (options.filePath) {
            e.message = `Error transforming ${options.filePath}: ${e.message}`;
        }
        throw e;
    }
}
/**
 * Return a string representation of the sucrase tokens, mostly useful for
 * diagnostic purposes.
 */
function getFormattedTokens(code, options) {
    const tokens = getSucraseContext(code, options).tokenProcessor.tokens;
    return formatTokens(code, tokens);
}
/**
 * Call into the parser/tokenizer and do some further preprocessing:
 * - Come up with a set of used names so that we can assign new names.
 * - Preprocess all import/export statements so we know which globals we are interested in.
 * - Compute situations where any of those globals are shadowed.
 *
 * In the future, some of these preprocessing steps can be skipped based on what actual work is
 * being done.
 */
function getSucraseContext(code, options) {
    const isJSXEnabled = options.transforms.includes("jsx");
    const file = parse(code, isJSXEnabled);
    const tokens = file.tokens;
    const scopes = file.scopes;
    const nameManager = new NameManager(code, tokens);
    const helperManager = new HelperManager(nameManager);
    const tokenProcessor = new TokenProcessor(code, tokens, false, helperManager);
    const importProcessor = null;
    identifyShadowedGlobals(tokenProcessor, scopes, getTSImportedNames(tokenProcessor));
    return { tokenProcessor, scopes, nameManager, importProcessor, helperManager };
}

exports.getFormattedTokens = getFormattedTokens;
exports.getVersion = getVersion;
exports.transform = transform;
